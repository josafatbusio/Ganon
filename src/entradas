--spool entradas.log;
set serveroutput on size 1000000
set echo off
set verify off
set termout on
set heading off
set feedback off
set newpage none
set pagesize 0
set linesize 1024
set trims on
variable retcode   number;
DECLARE

TYPE error_rec_type IS RECORD (
linea                 number,
articulo              varchar2(500),
msg_error             varchar2(32767)
);

TYPE error_type IS TABLE OF error_rec_type
INDEX BY BINARY_INTEGER;

TYPE trx_rec_type IS RECORD (
trx_number                 varchar2(500),
msg_error                  varchar2(32767)
);

TYPE trx_tbl_type IS TABLE OF trx_rec_type
INDEX BY BINARY_INTEGER;


TYPE trx_rec_type_ok IS RECORD (
trx_number                 varchar2(500),
comentarios                  varchar2(32767)
);

TYPE trx_tbl_type_ok IS TABLE OF trx_rec_type_ok
INDEX BY BINARY_INTEGER;

type XXBOL_LOT_QUANTITIES_TYPE IS RECORD
(
  PRODUCTO    VARCHAR2(240 BYTE),
  ITEM_ID     NUMBER,
  LOTE        VARCHAR2(250 BYTE),
  EXIS        NUMBER,
  INICIAL     NUMBER,
  MOVIMIENTO  VARCHAR2(100 BYTE),
  FECHA       VARCHAR2(10 BYTE),
  SUCURSAL    NUMBER,
  PARTIDA     NUMBER,
  LOCATOR_ID  NUMBER,
  LOCALIZADOR VARCHAR2(240 BYTE),
  secondary_inventory_name VARCHAR2(240 BYTE),
  SERIAL_NUMBER   VARCHAR2(240 BYTE)
);

type XXBOL_MTL_SYSTEM_ITEMS_TYPE IS RECORD
(
PRODUCTO                  VARCHAR2(40 BYTE),
CODIGO                    VARCHAR2(240 BYTE),
LOCALIZADOR               VARCHAR2(160 BYTE),
DESCRIPTION1              VARCHAR2(240 BYTE),
DESCRIPTION2              VARCHAR2(240 BYTE),
DESCRIPTION3              VARCHAR2(240 BYTE),
PROVEEDOR1                NUMBER,
PROVEEDOR2                NUMBER,
INVENTORY_ITEM_FLAG       VARCHAR2(1 BYTE),
KIT                       VARCHAR2(1 BYTE),
LOT_CONTROL               VARCHAR2(1 BYTE),
SERIAL_CONTROL            VARCHAR2(1 BYTE),
LINEA                     VARCHAR2(40 BYTE),
SUBLINEA                  VARCHAR2(40 BYTE),
MARCA                     VARCHAR2(40 BYTE),
IMPUESTO                  NUMBER,
SUBSTITUTO                VARCHAR2(40 BYTE),
UNIDAD                    VARCHAR2(25 BYTE),
ALTA                      VARCHAR2(10 BYTE),
MODIFICADO                VARCHAR2(10 BYTE),
MONEDA                    VARCHAR2(30 BYTE),
NOTAS                     VARCHAR2(240 BYTE),
PRECIO1                   number,
PRECIO2                   number,
PRECIO3                   number,
PRECIO4                   number,
PRECIO5                   number,
PRECIO6                   number,
PRECIO7                   number,
PRECIO8                   number,
PRECIOG                   number,
PRECIOP                   number,
COSTO_PROM                NUMBER,
COSTO_REPO                NUMBER,
COSTO_UL                  NUMBER,
DESCUENTO1                NUMBER,
DESCUENTO2                NUMBER,
DESCUENTO3                NUMBER,
EXIS                      NUMBER,
EXIS0                     NUMBER,
EXIS1                     NUMBER,
EXIS2                     NUMBER,
EXIS3                     NUMBER,
EXIS4                     NUMBER,
EXIS5                     NUMBER,
EXIS6                     NUMBER,
EXIS7                     NUMBER,
EXIS8                     NUMBER,
EXIS9                     NUMBER,
EXIS10                    NUMBER,
EXIS11                    NUMBER,
EXIS12                    NUMBER,
EXIS13                    NUMBER,
EXIS14                    NUMBER,
EXIS15                    NUMBER,
EXIS16                    NUMBER,
EXIS17                    NUMBER,
EXIS18                    NUMBER,
EXIS19                    NUMBER,
EXIS20                    NUMBER,
EXIS21                    NUMBER,
EXIS22                    NUMBER,
EXIS23                    NUMBER,
EXIS24                    NUMBER,
EXIS25                    NUMBER,
EXIS26                    NUMBER,
EXIS27                    NUMBER,
EXIS28                    NUMBER,
EXIS29                    NUMBER,
EXIS30                    NUMBER,
EXIS31                    NUMBER,
EXIS32                    NUMBER,
EXIS33                    NUMBER,
EXIS34                    NUMBER,
EXIS35                    NUMBER,
EXIS36                    NUMBER,
EXIS37                    NUMBER,
EXIS38                    NUMBER,
EXIS39                    NUMBER,
EXIS40                    NUMBER,
EXIS41                    NUMBER,
EXIS42                    NUMBER,
EXIS43                    NUMBER,
EXIS44                    NUMBER,
EXIS45                    NUMBER,
EXIS46                    NUMBER,
EXIS47                    NUMBER,
EXIS48                    NUMBER,
EXIS49                    NUMBER,
EXIS50                    NUMBER,
EXIS51                    NUMBER,
EXIS52                    NUMBER,
EXIS53                    NUMBER,
EXIS54                    NUMBER,
INVENTORY_ITEM_ID         NUMBER,
PLANNING_MAKE_BUY_CODE    NUMBER
);

type XXBOL_CLIENTES_TYPE IS RECORD
(
CLIENTE     VARCHAR2(240),
CLIENTE_ORACLE VARCHAR2(240),
RFC         VARCHAR2(80),
CURP        VARCHAR2(80),
NOMBRE      VARCHAR2(240),
NOMBRE2     VARCHAR2(240),
CALLE       VARCHAR2(240),
COLONIA     VARCHAR2(240),
ESTADO      VARCHAR2(240),
CIUDAD      VARCHAR2(240),
CP          VARCHAR2(240),
TELEFONO    VARCHAR2(240),
TELEFONO2   VARCHAR2(240),
CONTACTO    VARCHAR2(240),
CONTACTO2   VARCHAR2(240),
VENDEDOR    VARCHAR2(240),
CLASIFICA   VARCHAR2(10),
TIPO        VARCHAR2(240),
TIPOCTE     VARCHAR2(240),
GIRO        VARCHAR2(240),
CLEDO       VARCHAR2(240),
DIAS        NUMBER,
LIMITE      NUMBER,
ALTA        VARCHAR2(10),
DESCUENTO   NUMBER,
BLOQUEADO   VARCHAR2(1),
BLOQUEONOT  VARCHAR2(240),
ENTREGA     VARCHAR2(240),
EMAIL       VARCHAR2(240),
HOMEPAGE    VARCHAR2(240),
SITE_USE_ID NUMBER,
PARTY_ID    NUMBER,
CUST_ACCOUNT_ID NUMBER,
PRICE_LIST_ID   NUMBER,
SALESREP_ID     NUMBER,
created_date    date,
last_update_date date
);

TYPE t_string_table IS TABLE OF VARCHAR2(32767);

g_reply         t_string_table := t_string_table();
g_binary        BOOLEAN := TRUE;
g_debug         BOOLEAN := TRUE;
g_convert_crlf  BOOLEAN := TRUE;

-- procesa archivos
ERRBUF          VARCHAR2(1000);
errcode         number;
l_conn          UTL_TCP.connection;
l_list          t_string_table;
v_borra         varchar2(1):='Y';
v_path          varchar2(100):='INCRS_TOP';
v_path_err      varchar2(100):='BOL_TOP';
V_IP            varchar2(100):='10.1.30.223';
v_usuario_ftp   varchar2(100):='crescendo';
v_passw_ftp     varchar2(100):='@dmin2011';
v_path_in       varchar2(100):='/OUT/';
/*V_IP            varchar2(100):='10.97.0.81';--'10.97.0.81';;
      v_usuario_ftp   varchar2(100):='blanco';
      v_passw_ftp     varchar2(100):='posadas';
      v_path_in       varchar2(100):='/OUT/';*/
v_estatus       number:=0;
v_role          number;
v_request_id    number;
v_subject       varchar2(500):='Notificacion de Errores interfaces CRESCENDO';
v_body          varchar2(5000);

v_usuario       varchar2(100):='SYSADMIN';

CURSOR c_usuario (p_user varchar2) is
select user_id
  from fnd_user
  where user_name = p_user
          and sysdate between start_date and nvl(end_date,sysdate);

v_errores number:=0;

v_archivo     varchar2(200);
--en procesa archivos

PROCEDURE debug (p_text  IN  VARCHAR2) IS
-- --------------------------------------------------------------------------
BEGIN
  IF g_debug THEN
  DBMS_OUTPUT.put_line(SUBSTR(p_text, 1, 255));
  END IF;
END;

PROCEDURE get_reply (p_conn  IN OUT NOCOPY  UTL_TCP.connection) IS
-- --------------------------------------------------------------------------
l_reply_code  VARCHAR2(3) := NULL;
BEGIN
  LOOP
  g_reply.extend;
  g_reply(g_reply.last) := UTL_TCP.get_line(p_conn, TRUE);
  debug(g_reply(g_reply.last));
  IF l_reply_code IS NULL THEN
  l_reply_code := SUBSTR(g_reply(g_reply.last), 1, 3);
  END IF;
  IF SUBSTR(l_reply_code, 1, 1) IN ('4', '5') THEN
  RAISE_APPLICATION_ERROR(-20000, g_reply(g_reply.last));
  ELSIF (SUBSTR(g_reply(g_reply.last), 1, 3) = l_reply_code AND
          SUBSTR(g_reply(g_reply.last), 4, 1) = ' ') THEN
  EXIT;
  END IF;
  END LOOP;
EXCEPTION
  WHEN UTL_TCP.END_OF_INPUT THEN
NULL;
END;

PROCEDURE send_command (p_conn     IN OUT NOCOPY  UTL_TCP.connection,
p_command  IN             VARCHAR2,
p_reply    IN             BOOLEAN := TRUE) IS
-- --------------------------------------------------------------------------
l_result  PLS_INTEGER;
BEGIN
  l_result := UTL_TCP.write_line(p_conn, p_command);
-- If you get ORA-29260 after the PASV call, replace the above line with the following line.
  -- l_result := UTL_TCP.write_text(p_conn, p_command || utl_tcp.crlf, length(p_command || utl_tcp.crlf));

  IF p_reply THEN
  get_reply(p_conn);
  END IF;
END;



-- --------------------------------------------------------------------------
FUNCTION login (p_host    IN  VARCHAR2,
p_port    IN  VARCHAR2,
p_user    IN  VARCHAR2,
p_pass    IN  VARCHAR2,
p_timeout IN  NUMBER := NULL)
RETURN UTL_TCP.connection IS
-- --------------------------------------------------------------------------
l_conn  UTL_TCP.connection;
BEGIN
g_reply.delete;

  l_conn := UTL_TCP.open_connection(p_host, p_port, tx_timeout => p_timeout);
  get_reply (l_conn);
  send_command(l_conn, 'USER ' || p_user);
  send_command(l_conn, 'PASS ' || p_pass);
  RETURN l_conn;
END;
-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------
FUNCTION get_passive (p_conn  IN OUT NOCOPY  UTL_TCP.connection)
RETURN UTL_TCP.connection IS
-- --------------------------------------------------------------------------
l_conn    UTL_TCP.connection;
l_reply   VARCHAR2(32767);
l_host    VARCHAR(100);
l_port1   NUMBER(10);
l_port2   NUMBER(10);
BEGIN
  send_command(p_conn, 'PASV');
  l_reply := g_reply(g_reply.last);

  l_reply := REPLACE(SUBSTR(l_reply, INSTR(l_reply, '(') + 1, (INSTR(l_reply, ')')) - (INSTR(l_reply, '('))-1), ',', '.');
  l_host  := SUBSTR(l_reply, 1, INSTR(l_reply, '.', 1, 4)-1);

  l_port1 := TO_NUMBER(SUBSTR(l_reply, INSTR(l_reply, '.', 1, 4)+1, (INSTR(l_reply, '.', 1, 5)-1) - (INSTR(l_reply, '.', 1, 4))));
  l_port2 := TO_NUMBER(SUBSTR(l_reply, INSTR(l_reply, '.', 1, 5)+1));

  l_conn := utl_tcp.open_connection(l_host, 256 * l_port1 + l_port2);
  return l_conn;
END;
-- --------------------------------------------------------------------------



-- --------------------------------------------------------------------------
PROCEDURE logout(p_conn   IN OUT NOCOPY  UTL_TCP.connection,
p_reply  IN             BOOLEAN := TRUE) AS
-- --------------------------------------------------------------------------
BEGIN
  send_command(p_conn, 'QUIT', p_reply);
  UTL_TCP.close_connection(p_conn);
END;
-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------



-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------
-- --------------------------------------------------------------------------
FUNCTION get_local_ascii_data (p_dir   IN  VARCHAR2,
p_file  IN  VARCHAR2)
RETURN CLOB IS
-- --------------------------------------------------------------------------
l_bfile   BFILE;
l_data    CLOB;
BEGIN
  DBMS_LOB.createtemporary (lob_loc => l_data,
          cache   => TRUE,
          dur     => DBMS_LOB.call);

  l_bfile := BFILENAME(p_dir, p_file);
  DBMS_LOB.fileopen(l_bfile, DBMS_LOB.file_readonly);

  IF DBMS_LOB.getlength(l_bfile) > 0 THEN
  DBMS_LOB.loadfromfile(l_data, l_bfile, DBMS_LOB.getlength(l_bfile));
  END IF;

  DBMS_LOB.fileclose(l_bfile);

  RETURN l_data;
END;
-- --------------------------------------------------------------------------
-- --------------------------------------------------------------------------
FUNCTION get_local_binary_data (p_dir   IN  VARCHAR2,
p_file  IN  VARCHAR2)
RETURN BLOB IS
-- --------------------------------------------------------------------------
l_bfile   BFILE;
l_data    BLOB;
BEGIN
  DBMS_LOB.createtemporary (lob_loc => l_data,
          cache   => TRUE,
          dur     => DBMS_LOB.call);

  l_bfile := BFILENAME(p_dir, p_file);
  DBMS_LOB.fileopen(l_bfile, DBMS_LOB.file_readonly);
  IF DBMS_LOB.getlength(l_bfile) > 0 THEN
  DBMS_LOB.loadfromfile(l_data, l_bfile, DBMS_LOB.getlength(l_bfile));
  END IF;
  DBMS_LOB.fileclose(l_bfile);

  RETURN l_data;
END;
-- --------------------------------------------------------------------------
-- --------------------------------------------------------------------------
FUNCTION get_remote_ascii_data (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_file  IN             VARCHAR2)
RETURN CLOB IS
-- --------------------------------------------------------------------------
l_conn    UTL_TCP.connection;
l_amount  PLS_INTEGER;
l_buffer  VARCHAR2(32767);
l_data    CLOB;
BEGIN
  DBMS_LOB.createtemporary (lob_loc => l_data,
          cache   => TRUE,
          dur     => DBMS_LOB.call);

  l_conn := get_passive(p_conn);
  send_command(p_conn, 'RETR ' || p_file, TRUE);
--logout(l_conn, FALSE);

  BEGIN
    LOOP
    l_amount := UTL_TCP.read_text (l_conn, l_buffer, 32767);
    DBMS_LOB.writeappend(l_data, l_amount, l_buffer);
    END LOOP;
  EXCEPTION
    WHEN UTL_TCP.END_OF_INPUT THEN
  NULL;
  WHEN OTHERS THEN
NULL;
END;
UTL_TCP.close_connection(l_conn);
get_reply(p_conn);

RETURN l_data;

EXCEPTION
WHEN OTHERS THEN
UTL_TCP.close_connection(l_conn);
RAISE;
END;
-- --------------------------------------------------------------------------
-- --------------------------------------------------------------------------
FUNCTION get_remote_binary_data (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_file  IN             VARCHAR2)
RETURN BLOB IS
-- --------------------------------------------------------------------------
l_conn    UTL_TCP.connection;
l_amount  PLS_INTEGER;
l_buffer  RAW(32767);
l_data    BLOB;
BEGIN
  DBMS_LOB.createtemporary (lob_loc => l_data,
          cache   => TRUE,
          dur     => DBMS_LOB.call);

  l_conn := get_passive(p_conn);
  send_command(p_conn, 'RETR ' || p_file, TRUE);

  BEGIN
    LOOP
    l_amount := UTL_TCP.read_raw (l_conn, l_buffer, 32767);
    DBMS_LOB.writeappend(l_data, l_amount, l_buffer);
    END LOOP;
  EXCEPTION
    WHEN UTL_TCP.END_OF_INPUT THEN
  NULL;
  WHEN OTHERS THEN
NULL;
END;
UTL_TCP.close_connection(l_conn);
get_reply(p_conn);

RETURN l_data;

EXCEPTION
WHEN OTHERS THEN
UTL_TCP.close_connection(l_conn);
RAISE;
END;
-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------
PROCEDURE put_local_ascii_data (p_data  IN  CLOB,
p_dir   IN  VARCHAR2,
p_file  IN  VARCHAR2) IS
-- --------------------------------------------------------------------------
l_out_file  UTL_FILE.file_type;
l_buffer    VARCHAR2(32767);
l_amount    BINARY_INTEGER := 32767;
l_pos       INTEGER := 1;
l_clob_len  INTEGER;
BEGIN
  l_clob_len := DBMS_LOB.getlength(p_data);

  l_out_file := UTL_FILE.fopen(p_dir, p_file, 'w', 32767);

  WHILE l_pos <= l_clob_len LOOP
  DBMS_LOB.read (p_data, l_amount, l_pos, l_buffer);
  IF g_convert_crlf THEN
  l_buffer := REPLACE(l_buffer, CHR(13), NULL);
  END IF;

  UTL_FILE.put(l_out_file, l_buffer);
  UTL_FILE.fflush(l_out_file);
  l_pos := l_pos + l_amount;
  END LOOP;

  UTL_FILE.fclose(l_out_file);
EXCEPTION
WHEN OTHERS THEN
  IF UTL_FILE.is_open(l_out_file) THEN
  UTL_FILE.fclose(l_out_file);
  END IF;
  RAISE;
END;
-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------
PROCEDURE put_local_binary_data (p_data  IN  BLOB,
p_dir   IN  VARCHAR2,
p_file  IN  VARCHAR2) IS
-- --------------------------------------------------------------------------
l_out_file  UTL_FILE.file_type;
l_buffer    RAW(32767);
l_amount    BINARY_INTEGER := 32767;
l_pos       INTEGER := 1;
l_blob_len  INTEGER;
BEGIN
  l_blob_len := DBMS_LOB.getlength(p_data);

  l_out_file := UTL_FILE.fopen(p_dir, p_file, 'wb', 32767);

  WHILE l_pos <= l_blob_len LOOP
  DBMS_LOB.read (p_data, l_amount, l_pos, l_buffer);
  UTL_FILE.put_raw(l_out_file, l_buffer, TRUE);
  UTL_FILE.fflush(l_out_file);
  l_pos := l_pos + l_amount;
  END LOOP;

  UTL_FILE.fclose(l_out_file);
EXCEPTION
WHEN OTHERS THEN
  IF UTL_FILE.is_open(l_out_file) THEN
  UTL_FILE.fclose(l_out_file);
  END IF;
  RAISE;
END;
-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------
PROCEDURE put_remote_ascii_data (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_file  IN             VARCHAR2,
p_data  IN             CLOB) IS
-- --------------------------------------------------------------------------
l_conn      UTL_TCP.connection;
l_result    PLS_INTEGER;
l_buffer    VARCHAR2(32767);
l_amount    BINARY_INTEGER := 32767; -- Switch to 10000 (or use binary) if you get ORA-06502 from this line.
l_pos       INTEGER := 1;
l_clob_len  INTEGER;
BEGIN
  l_conn := get_passive(p_conn);
  send_command(p_conn, 'STOR ' || p_file, TRUE);

  l_clob_len := DBMS_LOB.getlength(p_data);

  WHILE l_pos <= l_clob_len LOOP
  DBMS_LOB.READ (p_data, l_amount, l_pos, l_buffer);
  IF g_convert_crlf THEN
  l_buffer := REPLACE(l_buffer, CHR(13), NULL);
  END IF;
  l_result := UTL_TCP.write_text(l_conn, l_buffer, LENGTH(l_buffer));
  UTL_TCP.flush(l_conn);
  l_pos := l_pos + l_amount;
  END LOOP;

  UTL_TCP.close_connection(l_conn);
-- The following line allows some people to make multiple calls from one connection.
  -- It causes the operation to hang for me, hence it is commented out by default.
  -- get_reply(p_conn);

EXCEPTION
WHEN OTHERS THEN
  UTL_TCP.close_connection(l_conn);
  RAISE;
END;
-- --------------------------------------------------------------------------
-- --------------------------------------------------------------------------
PROCEDURE put_remote_binary_data (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_file  IN             VARCHAR2,
p_data  IN             BLOB) IS
-- --------------------------------------------------------------------------
l_conn      UTL_TCP.connection;
l_result    PLS_INTEGER;
l_buffer    RAW(32767);
l_amount    BINARY_INTEGER := 32767;
l_pos       INTEGER := 1;
l_blob_len  INTEGER;
BEGIN
  l_conn := get_passive(p_conn);
  send_command(p_conn, 'STOR ' || p_file, TRUE);

  l_blob_len := DBMS_LOB.getlength(p_data);

  WHILE l_pos <= l_blob_len LOOP
  DBMS_LOB.READ (p_data, l_amount, l_pos, l_buffer);
  l_result := UTL_TCP.write_raw(l_conn, l_buffer, l_amount);
  UTL_TCP.flush(l_conn);
  l_pos := l_pos + l_amount;
  END LOOP;

  UTL_TCP.close_connection(l_conn);
-- The following line allows some people to make multiple calls from one connection.
  -- It causes the operation to hang for me, hence it is commented out by default.
  -- get_reply(p_conn);

EXCEPTION
WHEN OTHERS THEN
  UTL_TCP.close_connection(l_conn);
  RAISE;
END;
-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------
PROCEDURE get_file (p_conn       IN OUT NOCOPY  UTL_TCP.connection,
p_from_file  IN             VARCHAR2,
p_to_dir     IN             VARCHAR2,
p_to_file    IN             VARCHAR2) AS
-- --------------------------------------------------------------------------
BEGIN
  IF g_binary THEN
  put_local_binary_data(p_data  => get_remote_binary_data (p_conn, p_from_file),
          p_dir   => p_to_dir,
          p_file  => p_to_file);
    ELSE
    put_local_ascii_data(p_data  => get_remote_ascii_data (p_conn, p_from_file),
            p_dir   => p_to_dir,
            p_file  => p_to_file);
  END IF;
END;
-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------
PROCEDURE put (p_conn       IN OUT NOCOPY  UTL_TCP.connection,
p_from_dir   IN             VARCHAR2,
p_from_file  IN             VARCHAR2,
p_to_file    IN             VARCHAR2) AS
-- --------------------------------------------------------------------------
BEGIN
  IF g_binary THEN
  put_remote_binary_data(p_conn => p_conn,
          p_file => p_to_file,
          p_data => get_local_binary_data(p_from_dir, p_from_file));
    ELSE
    put_remote_ascii_data(p_conn => p_conn,
            p_file => p_to_file,
            p_data => get_local_ascii_data(p_from_dir, p_from_file));
  END IF;
  get_reply(p_conn);
END;
-- --------------------------------------------------------------------------



-- --------------------------------------------------------------------------
PROCEDURE get_direct (p_conn       IN OUT NOCOPY  UTL_TCP.connection,
p_from_file  IN             VARCHAR2,
p_to_dir     IN             VARCHAR2,
p_to_file    IN             VARCHAR2) IS
-- --------------------------------------------------------------------------
l_conn        UTL_TCP.connection;
l_out_file    UTL_FILE.file_type;
l_amount      PLS_INTEGER;
l_buffer      VARCHAR2(32767);
l_raw_buffer  RAW(32767);
BEGIN
  l_conn := get_passive(p_conn);
  send_command(p_conn, 'RETR ' || p_from_file, TRUE);
  IF g_binary THEN
  l_out_file := UTL_FILE.fopen(p_to_dir, p_to_file, 'wb', 32767);
    ELSE
    l_out_file := UTL_FILE.fopen(p_to_dir, p_to_file, 'w', 32767);
  END IF;

  BEGIN
    LOOP
    IF g_binary THEN
    l_amount := UTL_TCP.read_raw (l_conn, l_raw_buffer, 32767);
    UTL_FILE.put_raw(l_out_file, l_raw_buffer, TRUE);
      ELSE
      l_amount := UTL_TCP.read_text (l_conn, l_buffer, 32767);
      IF g_convert_crlf THEN
      l_buffer := REPLACE(l_buffer, CHR(13), NULL);
      END IF;
      UTL_FILE.put(l_out_file, l_buffer);
    END IF;
    UTL_FILE.fflush(l_out_file);
    END LOOP;
  EXCEPTION
    WHEN UTL_TCP.END_OF_INPUT THEN
  NULL;
  WHEN OTHERS THEN
NULL;
END;
UTL_FILE.fclose(l_out_file);
UTL_TCP.close_connection(l_conn);
EXCEPTION
WHEN OTHERS THEN
IF UTL_FILE.is_open(l_out_file) THEN
UTL_FILE.fclose(l_out_file);
END IF;
RAISE;
END;
-- --------------------------------------------------------------------------

-- --------------------------------------------------------------------------

PROCEDURE put_direct (
p_conn       IN OUT NOCOPY  UTL_TCP.connection,
p_from_dir   IN             VARCHAR2,
p_from_file  IN             VARCHAR2,
p_to_file    IN             VARCHAR2
)
IS
l_conn        UTL_TCP.connection;
l_bfile       BFILE;
l_result      PLS_INTEGER;
l_amount      PLS_INTEGER := 32767;
l_raw_buffer  RAW(32767);
l_len         NUMBER;
l_pos         NUMBER := 1;
ex_ascii      EXCEPTION;
BEGIN

  IF NOT g_binary THEN
  RAISE ex_ascii;
  END IF;

  l_conn := get_passive(p_conn);
  send_command(p_conn, 'STOR ' || p_to_file, TRUE);

  l_bfile := BFILENAME(p_from_dir, p_from_file);

  DBMS_LOB.fileopen(l_bfile, DBMS_LOB.file_readonly);
  l_len := DBMS_LOB.getlength(l_bfile);

  WHILE l_pos <= l_len LOOP
  DBMS_LOB.READ (l_bfile, l_amount, l_pos, l_raw_buffer);
  debug(l_amount);
  l_result := UTL_TCP.write_raw(l_conn, l_raw_buffer, l_amount);
  l_pos := l_pos + l_amount;
  END LOOP;

  DBMS_LOB.fileclose(l_bfile);
  UTL_TCP.close_connection(l_conn);
EXCEPTION
WHEN ex_ascii THEN
  RAISE_APPLICATION_ERROR(-20000, 'PUT_DIRECT not available in ASCII mode.');
WHEN OTHERS THEN
  IF DBMS_LOB.fileisopen(l_bfile) = 1 THEN
  DBMS_LOB.fileclose(l_bfile);
  END IF;
  RAISE;
END;

PROCEDURE help (p_conn  IN OUT NOCOPY  UTL_TCP.connection) AS
BEGIN
  send_command(p_conn, 'HELP', TRUE);
END;

-- --------------------------------------------------------------------------
PROCEDURE ascii (p_conn  IN OUT NOCOPY  UTL_TCP.connection) AS
-- --------------------------------------------------------------------------
BEGIN
  send_command(p_conn, 'TYPE A', TRUE);
  g_binary := FALSE;
END;
-- --------------------------------------------------------------------------



-- --------------------------------------------------------------------------
PROCEDURE binary (p_conn  IN OUT NOCOPY  UTL_TCP.connection) AS
-- --------------------------------------------------------------------------
BEGIN
  send_command(p_conn, 'TYPE I', TRUE);
  g_binary := TRUE;
END;

PROCEDURE list (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_dir   IN             VARCHAR2,
p_list  OUT            t_string_table) AS
-- --------------------------------------------------------------------------
l_conn        UTL_TCP.connection;
l_list        t_string_table := t_string_table();
l_reply_code  VARCHAR2(3) := NULL;
BEGIN
  l_conn := get_passive(p_conn);
  send_command(p_conn, 'LIST ' || p_dir, TRUE);

  BEGIN
    LOOP
    l_list.extend;
    l_list(l_list.last) := UTL_TCP.get_line(l_conn, TRUE);
    debug(l_list(l_list.last));
    IF l_reply_code IS NULL THEN
    l_reply_code := SUBSTR(l_list(l_list.last), 1, 3);
    END IF;
    IF SUBSTR(l_reply_code, 1, 1) IN ('4', '5') THEN
    RAISE_APPLICATION_ERROR(-20000, l_list(l_list.last));
    ELSIF (SUBSTR(g_reply(g_reply.last), 1, 3) = l_reply_code AND
            SUBSTR(g_reply(g_reply.last), 4, 1) = ' ') THEN
    EXIT;
    END IF;
    END LOOP;
  EXCEPTION
    WHEN UTL_TCP.END_OF_INPUT THEN
  NULL;
END;

l_list.delete(l_list.last);
p_list := l_list;

utl_tcp.close_connection(l_conn);
get_reply (p_conn);
END;

PROCEDURE nlst (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_dir   IN             VARCHAR2,
p_list  OUT            t_string_table) AS
-- --------------------------------------------------------------------------
l_conn        UTL_TCP.connection;
l_list        t_string_table := t_string_table();
l_reply_code  VARCHAR2(3) := NULL;
BEGIN
  l_conn := get_passive(p_conn);
  send_command(p_conn, 'NLST ' || p_dir, TRUE);

  BEGIN
    LOOP
    l_list.extend;
    l_list(l_list.last) := UTL_TCP.get_line(l_conn, TRUE);
    debug(l_list(l_list.last));
    IF l_reply_code IS NULL THEN
    l_reply_code := SUBSTR(l_list(l_list.last), 1, 3);
    END IF;
    IF SUBSTR(l_reply_code, 1, 1) IN ('4', '5') THEN
    RAISE_APPLICATION_ERROR(-20000, l_list(l_list.last));
    ELSIF (SUBSTR(g_reply(g_reply.last), 1, 3) = l_reply_code AND
            SUBSTR(g_reply(g_reply.last), 4, 1) = ' ') THEN
    EXIT;
    END IF;
    END LOOP;
  EXCEPTION
    WHEN UTL_TCP.END_OF_INPUT THEN
  NULL;
END;

l_list.delete(l_list.last);
p_list := l_list;

utl_tcp.close_connection(l_conn);
get_reply (p_conn);
END;

PROCEDURE rename (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_from  IN             VARCHAR2,
p_to    IN             VARCHAR2) AS
-- --------------------------------------------------------------------------
l_conn  UTL_TCP.connection;
BEGIN
  l_conn := get_passive(p_conn);
  send_command(p_conn, 'RNFR ' || p_from, TRUE);
  send_command(p_conn, 'RNTO ' || p_to, TRUE);
  logout(l_conn, FALSE);
END rename;

PROCEDURE delete_file (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_file  IN             VARCHAR2) AS
-- --------------------------------------------------------------------------
l_conn  UTL_TCP.connection;
BEGIN
  l_conn := get_passive(p_conn);
  send_command(p_conn, 'DELE ' || p_file, TRUE);
  logout(l_conn, FALSE);
END delete_file;

PROCEDURE mkdir (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_dir   IN             VARCHAR2) AS
-- --------------------------------------------------------------------------
l_conn  UTL_TCP.connection;
BEGIN
  l_conn := get_passive(p_conn);
  send_command(p_conn, 'MKD ' || p_dir, TRUE);
  logout(l_conn, FALSE);
END mkdir;

PROCEDURE rmdir (p_conn  IN OUT NOCOPY  UTL_TCP.connection,
p_dir   IN             VARCHAR2) AS
-- --------------------------------------------------------------------------
l_conn  UTL_TCP.connection;
BEGIN
  l_conn := get_passive(p_conn);
  send_command(p_conn, 'RMD ' || p_dir, TRUE);
  logout(l_conn, FALSE);
END rmdir;

PROCEDURE convert_crlf (p_status  IN  BOOLEAN) AS

BEGIN
  g_convert_crlf := p_status;
END;

-- --------------------------------------------------------------------------

procedure update_organization (
p_organization_rec  IN     hz_party_v2pub.ORGANIZATION_REC_TYPE,
p_party_object_version_number in out number,
x_profile_id        OUT    NUMBER
)
is
x_return_status          VARCHAR2 (2000);
x_msg_count              NUMBER;
x_msg_data               VARCHAR2 (2000);
BEGIN
  hz_party_v2pub.update_organization (
  FND_API.G_TRUE,
          p_organization_rec,
          p_party_object_version_number,
          x_profile_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
  IF x_return_status = fnd_api.g_ret_sts_success THEN
  COMMIT;
  --        dbms_output.put_line('Actualizacion del cliente exitosamente');
--        dbms_output.put_line('Output information ....');        
        --dbms_output.put_line('x_profile_id       : '||x_profile_id);                        

    ELSE
    dbms_output.put_line('Fallo la actualizacion del cliente:'||x_msg_data);
    ROLLBACK;
    FOR i IN 1 .. x_msg_count
    LOOP
    x_msg_data := oe_msg_pub.get( p_msg_index => i, p_encoded => 'F');
    dbms_output.put_line( i|| ') '|| x_msg_data);
    END LOOP;
  END IF;
--dbms_output.put_line('Completion of API');
END update_organization;

procedure create_cust_account_org (p_cust_account_rec       in hz_cust_account_v2pub.cust_account_rec_type,
p_organization_rec       in hz_party_v2pub.organization_rec_type,
p_customer_profile_rec   in hz_customer_profile_v2pub.customer_profile_rec_type,
x_cust_account_id        out NUMBER,
x_account_number         out VARCHAR2,
x_party_id               out NUMBER,
x_party_number           out VARCHAR2,
x_profile_id             out NUMBER
)
is
x_return_status          VARCHAR2 (2000);
x_msg_count              NUMBER;
x_msg_data               VARCHAR2 (2000);
BEGIN
  hz_cust_account_v2pub.create_cust_account (
  FND_API.G_TRUE,
          p_cust_account_rec,
          p_organization_rec,
          p_customer_profile_rec,
          FND_API.G_TRUE,
          x_cust_account_id,
          x_account_number,
          x_party_id,
          x_party_number,
          x_profile_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
  IF x_return_status = fnd_api.g_ret_sts_success THEN
  COMMIT;
  --dbms_output.put_line('Creation of Party and customer account is Successful ');
--        dbms_output.put_line('Output information ....');
--        dbms_output.put_line('x_cust_account_id  : '||x_cust_account_id);
--        dbms_output.put_line('x_account_number   : '||x_account_number);
--        dbms_output.put_line('x_party_id         : '||x_party_id);
--        dbms_output.put_line('x_party_number     : '||x_party_number);
--        dbms_output.put_line('x_profile_id       : '||x_profile_id);                        

    ELSE
    dbms_output.put_line('Creation of Party and customer account failed:'||x_msg_data);
    ROLLBACK;
    FOR i IN 1 .. x_msg_count
    LOOP
    x_msg_data := oe_msg_pub.get( p_msg_index => i, p_encoded => 'F');
    dbms_output.put_line( i|| ') '|| x_msg_data);
    END LOOP;
  END IF;
--dbms_output.put_line('Completion of API');
END create_cust_account_org;

procedure create_customer_profile (
p_cust_profile_rec   in hz_customer_profile_v2pub.customer_profile_rec_type,
x_cust_account_profile_id out NUMBER
)
is
x_return_status          VARCHAR2 (2000);
x_msg_count              NUMBER;
x_msg_data               VARCHAR2 (2000);

BEGIN

  HZ_CUSTOMER_PROFILE_V2PUB.create_customer_profile (
  'T',
          p_cust_profile_rec,
          FND_API.G_TRUE,
          x_cust_account_profile_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--dbms_output.put_line('x_cust_account_profile_id = ' || x_cust_account_profile_id);                                                   
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,1,255));
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(   i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;
END create_customer_profile;

procedure create_cust_profile_amt (
p_cust_profile_amt_rec   in hz_customer_profile_v2pub.CUST_PROFILE_AMT_REC_TYPE,
x_cust_acct_profile_amt_id out NUMBER
)
is
x_return_status          VARCHAR2 (2000);
x_msg_count              NUMBER;
x_msg_data               VARCHAR2 (2000);
BEGIN
  HZ_CUSTOMER_PROFILE_V2PUB.create_cust_profile_amt (
  'T',
          FND_API.G_TRUE,
          p_cust_profile_amt_rec,
          x_cust_acct_profile_amt_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--dbms_output.put_line('x_cust_acct_profile_amt_id = ' || x_cust_acct_profile_amt_id);                                                   
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(  i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;
END;

procedure update_cust_profile_amt (
p_cust_profile_amt_rec   in hz_customer_profile_v2pub.CUST_PROFILE_AMT_REC_TYPE,
p_version_number in NUMBER
)
is

x_return_status          VARCHAR2 (2000);
x_msg_count              NUMBER;
x_msg_data               VARCHAR2 (2000);
v_version_number         number:=p_version_number;
BEGIN


  HZ_CUSTOMER_PROFILE_V2PUB.update_cust_profile_amt (
  'T',
          p_cust_profile_amt_rec,
          v_version_number,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--   DBMS_OUTPUT.put_line (SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   DBMS_OUTPUT.put_line ('x_msg_count = ' || TO_CHAR (x_msg_count));
--   DBMS_OUTPUT.put_line (SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    DBMS_OUTPUT.put_line
            (   i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;
END;

procedure create_location (
p_location_rec  in  hz_location_v2pub.location_rec_type,
x_location_id   out  NUMBER
)
is
x_return_status   VARCHAR2 (2000);
x_msg_count       NUMBER;
x_msg_data        VARCHAR2 (2000);
BEGIN
  hz_location_v2pub.create_location (FND_API.G_TRUE,
          p_location_rec,
          x_location_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--   dbms_output.put_line('x_location_id = ' || x_location_id);                                    
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(   i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;
END create_location;

procedure create_party_site (
p_party_site_rec     in   hz_party_site_v2pub.party_site_rec_type,
x_party_site_id      out  NUMBER,
x_party_site_number  out  VARCHAR2
)
is
x_return_status       VARCHAR2 (2000);
x_msg_count           NUMBER;
x_msg_data            VARCHAR2 (2000);
BEGIN

  hz_party_site_v2pub.create_party_site (FND_API.G_TRUE,
          p_party_site_rec,
          x_party_site_id,
          x_party_site_number,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--    dbms_output.put_line('x_party_site_id = ' || x_party_site_id);
--    dbms_output.put_line('x_party_site_number = ' || x_party_site_number);
                                             
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(   i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;
END create_party_site;

procedure create_cust_account_site (
p_cust_acct_site_rec   in hz_cust_account_site_v2pub.cust_acct_site_rec_type,
x_cust_acct_site_id    out NUMBER
)
is
x_return_status        VARCHAR2 (2000);
x_msg_count            NUMBER;
x_msg_data             VARCHAR2 (2000);
BEGIN

  hz_cust_account_site_v2pub.create_cust_acct_site ('T',
          p_cust_acct_site_rec,
          x_cust_acct_site_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--   dbms_output.put_line('x_cust_acct_site_id = ' || x_cust_acct_site_id);                                                        
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(  i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;
END create_cust_account_site;

procedure create_cust_site_use (
p_cust_site_use_rec     in hz_cust_account_site_v2pub.cust_site_use_rec_type,
p_customer_profile_rec  in hz_customer_profile_v2pub.customer_profile_rec_type,
x_site_use_id           out NUMBER
)
is
x_return_status          VARCHAR2 (2000);
x_msg_count              NUMBER;
x_msg_data               VARCHAR2 (2000);
BEGIN
  hz_cust_account_site_v2pub.create_cust_site_use ('T',
          p_cust_site_use_rec,
          p_customer_profile_rec,
          '',
          '',
          x_site_use_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--   dbms_output.put_line('x_site_use_id = ' || x_site_use_id);                                                   
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(   i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;
END create_cust_site_use;

procedure create_person (
p_create_person_rec   in hz_party_v2pub.person_rec_type,
x_party_id            out NUMBER,
x_party_number        out VARCHAR2,
x_profile_id          out NUMBER
)
is
x_return_status       VARCHAR2 (2000);
x_msg_count           NUMBER;
x_msg_data            VARCHAR2 (2000);
BEGIN
  hz_party_v2pub.create_person ('T',
          p_create_person_rec,
          x_party_id,
          x_party_number,
          x_profile_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--   dbms_output.put_line('x_party_id: ' || x_party_id);
--   dbms_output.put_line('x_party_number: ' || x_party_number);
--   dbms_output.put_line('x_profile_id: ' || x_profile_id);                                                      
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(   i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;

END create_person;


procedure create_org_contact (
p_org_contact_rec  in  hz_party_contact_v2pub.org_contact_rec_type,
x_org_contact_id   out NUMBER,
x_party_rel_id     out NUMBER,
x_party_id         out NUMBER,
x_party_number     out VARCHAR2
)
is
x_return_status     VARCHAR2 (2000);
x_msg_count         NUMBER;
x_msg_data          VARCHAR2 (2000);
BEGIN
  hz_party_contact_v2pub.create_org_contact ('T',
          p_org_contact_rec,
          x_org_contact_id,
          x_party_rel_id,
          x_party_id,
          x_party_number,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--   dbms_output.put_line('x_org_contact_id: ' || x_org_contact_id);
--   dbms_output.put_line('x_party_rel_id: ' || x_party_rel_id);
--   dbms_output.put_line('x_party_id: ' || x_party_id);
--   dbms_output.put_line('x_party_number: ' || x_party_number);
--                                                         
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(   i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;

END create_org_contact;

procedure create_contact_point (
p_contact_point_rec   in hz_contact_point_v2pub.contact_point_rec_type,
p_edi_rec             in hz_contact_point_v2pub.edi_rec_type,
p_email_rec           in hz_contact_point_v2pub.email_rec_type,
p_phone_rec           in hz_contact_point_v2pub.phone_rec_type,
p_telex_rec           in hz_contact_point_v2pub.telex_rec_type,
p_web_rec             in hz_contact_point_v2pub.web_rec_type,
x_contact_point_id    out NUMBER
)
is
x_return_status       VARCHAR2 (2000);
x_msg_count           NUMBER;
x_msg_data            VARCHAR2 (2000);
BEGIN
  hz_contact_point_v2pub.create_contact_point ('T',
          p_contact_point_rec,
          p_edi_rec,
          p_email_rec,
          p_phone_rec,
          p_telex_rec,
          p_web_rec,
          x_contact_point_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--   dbms_output.put_line('x_contact_point_id = ' || x_contact_point_id);                                               
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(   i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;
END create_contact_point;

procedure create_cust_account_role(
p_cr_cust_acc_role_rec   in hz_cust_account_role_v2pub.cust_account_role_rec_type,
x_cust_account_role_id   out NUMBER
)
is
x_return_status          VARCHAR2 (2000);
x_msg_count              NUMBER;
x_msg_data               VARCHAR2 (2000);
BEGIN
  hz_cust_account_role_v2pub.create_cust_account_role
          ('T',
          p_cr_cust_acc_role_rec,
          x_cust_account_role_id,
          x_return_status,
          x_msg_count,
          x_msg_data
          );
--   dbms_output.put_line('x_cust_account_role_id: ' || x_cust_account_role_id);                                             
--   dbms_output.put_line(SUBSTR ('x_return_status = ' || x_return_status,
--                                 1,
--                                 255
--                                )
--                        );
--   dbms_output.put_line('x_msg_count = ' || TO_CHAR (x_msg_count));
--   dbms_output.put_line(SUBSTR ('x_msg_data = ' || x_msg_data, 1, 255));

  IF x_msg_count > 1
    THEN
    FOR i IN 1 .. x_msg_count
    LOOP
    dbms_output.put_line(   i
            || '. '
            || SUBSTR
            (fnd_msg_pub.get (p_encoded      => fnd_api.g_false),
            1,
            255
            )
            );
    END LOOP;
  END IF;
END create_cust_account_role;

PROCEDURE cliente
(ERRBUF    OUT VARCHAR2,
RETCODE   OUT number,
p_file    in varchar2)
IS
v_FILE_CLI              SYS.UTL_FILE.file_type;
V_LINE                  VARCHAR2(5000);
v_rec_no                number:=0;
v_path                  varchar2(1000):='INCRS_TOP';
v_substr                varchar2(5000);
v_tipo                  varchar2(100);

-- variables cliente
v_nombre                hz_parties.party_name%type;
v_tipo_cliente          varchar2(200);
v_categoria             varchar2(200);
v_numero_cliente        varchar2(280);
v_numero_cliente_oracle varchar2(280);
v_rfc                   varchar2(20);
v_address1              varchar2(360);
v_colonia               varchar2(360);
v_delegacion            varchar2(360);
v_address4              varchar2(360);
v_ciudad                varchar2(360);
v_estado                varchar2(360);
v_cp                    varchar2(360);
v_pais                  varchar2(360);
v_moneda                varchar2(3);
v_limite                number;
v_termino_pago          varchar2(360);

-- variables contacto

v_nombre_contacto       varchar2(250);
v_apellido_contacto     varchar2(250);
v_mobil                 varchar2(250);
v_telefono              varchar2(250);
v_fax                   varchar2(250);
v_mail                  varchar2(250);
v_web                   varchar2(250);


cursor c_contacto (p_name varchar2, p_cust_account_id  number) is
select g.party_name  CONTACTO,
        upper(d.job_title) titulo,
        d.JOB_TITLE_CODE,
        d.status status_contacto,
        A.PARTY_ID,
        hcar.cust_account_id
  from  hz_org_contacts d,
          hz_relationships a,
          hz_parties g,
          hz_cust_account_roles hcar
  where d.party_relationship_id          = a.relationship_id
          AND a.subject_table_name             = 'HZ_PARTIES'
          AND a.object_table_name              = 'HZ_PARTIES'
          AND a.directional_flag               = 'F'
          and a.relationship_code(+)           = 'CONTACT_OF'
          and g.party_id                       = a.subject_id(+)
          and hcar.cust_account_id             = p_CUST_ACCOUNT_ID
          AND hcar.role_type                   = 'CONTACT'
          AND hcar.party_id                    = a.party_id
          and upper(trim(g.party_name)) = upper(trim(p_name));

reg_contact c_contacto%rowtype;

CURSOR c_party_exists (p_cliente varchar2, p_cliente_oracle varchar2)
is
SELECT *
  FROM
          (
                    select
                            c.account_number cliente_oracle,
                            upper(p.ORGANIZATION_NAME_PHONETIC) CLIENTE,
                            p.tax_reference RFC,
                            null CURP,
                            p.party_name NOMBRE,
                            lo.address1 CALLE,
                            case
                              when lo.address3 is null and lo.address4 is not null
                              then trim(lo.address2) || ', ' ||  trim(lo.address4)
                              when lo.address3 is not null and lo.address4 is not null
                              then trim(lo.address2) || ', ' ||  trim(lo.address3) || ', '|| trim(lo.address4)
                              when lo.address3 is not null and lo.address4 is null
                              then trim(lo.address2) || ', ' ||  trim(lo.address3)
                                    else trim(lo.address2)
                                    end COLONIA,
                            lo.state estado,
                            case when lo.city is not null then
                                    lo.city
                                    end ciudad,
                            lo.postal_code cp,
                    --                     (SELECT DISTINCT S.SALESREP_NUMBER
--                    FROM RA_SALESREPS_ALL S
--                    WHERE  S.status = 'A'
--                    and s.salesrep_id = CSU.primary_salesrep_id
--                    AND sysdate between s.start_date_active
--                                and nvl(s.end_date_active,to_date('4712/12/31','RRRR/mm/DD'))
--                                ) VENDEDOR,
--                     (
--                     select headers.attribute1
--                     from qp_secu_list_headers_v headers
--                     where headers.list_header_id = CSU.PRICE_LIST_ID 
--                     ) CLASIFICA,                                         
                            p.PARTY_ID,
                            csu.SITE_USE_ID,
                            CSU.PRICE_LIST_ID,
                            csu.CUST_ACCT_SITE_ID,
                            CSU.primary_salesrep_id,
                            c.CUST_ACCOUNT_ID,
                            ps.PARTY_SITE_ID,
                            csu.primary_flag,
                            hr_general.decode_organization(csu.org_id) uo,
                            case when P.ATTRIBUTE1 is not null then 'FABRICANTE'
                              when p.attribute2 is not null then 'DISTRIBUIDOR'
                              when P.ATTRIBUTE3 is not null then 'OTRO'
                                    end TIPO,
                            case when P.ATTRIBUTE1 is not null then P.ATTRIBUTE1
                              when p.attribute2 is not null then p.attribute2
                              when P.ATTRIBUTE3 is not null then P.ATTRIBUTE3
                                    end CATEGORIA,
                    --                     nvl((SELECT TERM.NAME
--                    FROM ra_terms_tl term,
--                         hz_customer_profiles pro
--                    WHERE term.LANGUAGE = 'ESA'                    
--                    and pro.cust_account_id = c.cust_account_id
--                    and pro.STANDARD_TERMS =  term.TERM_ID
--                    ),'0')  TERMINO_PAGO,
--                    nvl((
--                    select OVERALL_CREDIT_LIMIT
--                    from hz_cust_profile_amts amts,
--                         hz_customer_profiles pf,
--                         hz_cust_profile_classes pc
--                    where amts.CUST_ACCOUNT_PROFILE_ID   = pf.CUST_ACCOUNT_PROFILE_ID
--                    AND pf.profile_class_id              = pc.profile_class_id
--                    and amts.cust_account_id = pf.cust_account_id
--                    and amts.site_use_id is null
--                    and pf.cust_account_id  = c.cust_account_id
--                    and nvl(pf.CREDIT_CHECKING,'N') = 'Y'                       
--                    ),'0') limite,
--                    (
--                    select AMTS.CURRENCY_CODE
--                    from hz_cust_profile_amts amts,
--                         hz_customer_profiles pf,
--                         hz_cust_profile_classes pc
--                    where amts.CUST_ACCOUNT_PROFILE_ID   = pf.CUST_ACCOUNT_PROFILE_ID
--                    AND pf.profile_class_id              = pc.profile_class_id
--                    and amts.cust_account_id = pf.cust_account_id
--                    and amts.site_use_id is null
--                    and pf.cust_account_id  = c.cust_account_id
--                    and nvl(pf.CREDIT_CHECKING,'N') = 'Y'                       
--                    ) MONEDA,
                            p.object_version_number
            FROM hz_cust_accounts c,
                    hz_parties p,
                    hz_cust_acct_sites_all st,
                    hz_party_sites ps,
                    hz_locations lo,
                    FND_TERRITORIES_VL trr,
                    hz_cust_site_uses_all csu,
                    ar_lookups lu
            WHERE c.party_id                      = p.party_id
                    --AND c.cust_account_id                = pf.cust_account_id
               --and pf.site_use_id (+)               =  csu.site_use_id               
                    AND c.cust_account_id                = st.cust_account_id
                    AND st.party_site_id                 = ps.party_site_id
                    AND ps.location_id                   = lo.location_id
                    AND lo.COUNTRY                       = trr.TERRITORY_CODE(+)
                    and csu.CUST_ACCT_SITE_ID            = st.CUST_ACCT_SITE_ID
                    and lu.lookup_type                   = 'SITE_USE_CODE'
                    AND lu.lookup_code                   = csu.site_use_code
                    AND p.party_type = 'ORGANIZATION'
                    AND csu.status                       = 'A'
                    --               AND csu.primary_flag                 = 'Y'
                    AND csu.org_id                       = st.org_id
                    AND csu.org_id                       = st.org_id
                    AND csu.SITE_USE_CODE                IN ('BILL_TO')
                  --and hr_general.decode_organization(csu.org_id) = 'UO_DCH' --- FALTA QUE CRESCENDO CONFIRME COMO QUIERE LOS CLIENTES               
                  )
          DATOS
  WHERE (
          (
                  datos.cliente_oracle is not null
                          and p_cliente_oracle is not null
                          and ltrim(trim(datos.cliente_oracle),'0') = ltrim(trim(p_cliente_oracle),'0')
                  )
                  or
                  (
                          datos.cliente is not null
                                  and p_cliente is not null
                                  and upper(trim(datos.cliente)) = upper(trim(p_cliente))
                          )
          );

reg_cliente c_party_exists%rowtype;
v_errores           number:=0;
v_errores_log           number:=0;
v_errores_gral      number:=0;

cursor c_categoria (p_cat_name varchar2,p_value varchar2) is
SELECT v_val.*
  FROM fnd_flex_vset_v    v_set
          ,fnd_flex_values_vl v_val
  WHERE 1 = 1
          AND v_set.flex_value_set_id = v_val.flex_value_set_id
          AND v_set.parent_value_set_name = p_cat_name--'LOV_SEG_FAB'
          and upper(trim(v_val.flex_value_meaning)) = trim(p_value)
          and v_val.enabled_flag = 'Y'
  ORDER BY v_val.flex_value;

reg_categoria       c_categoria%rowtype;
v_cat_name          varchar2(200);

cursor c_ciudad (p_ciudad varchar2) is
SELECT v_val.*
  FROM fnd_flex_vset_v    v_set
          ,fnd_flex_values_vl v_val
  WHERE 1 = 1
          AND v_set.flex_value_set_id = v_val.flex_value_set_id
          AND v_set.parent_value_set_name = 'CIUDAD'
          and upper(trim(v_val.flex_value_meaning)) = upper(trim(p_ciudad))
  ORDER BY v_val.flex_value;

reg_ciudad c_ciudad%rowtype;

cursor c_estado (p_estado varchar2) is
SELECT v_val.*
  FROM fnd_flex_vset_v    v_set
          ,fnd_flex_values_vl v_val
  WHERE 1 = 1
          AND v_set.flex_value_set_id = v_val.flex_value_set_id
          AND v_set.parent_value_set_name = 'ESTADO'
          and upper(trim(v_val.flex_value_meaning)) = upper(trim(p_estado))
  ORDER BY v_val.flex_value;

reg_estado c_estado%rowtype;

cursor c_terms (p_name varchar2) is
SELECT *
  FROM ra_terms_tl term
  WHERE term.LANGUAGE = 'ESA'
          AND upper(trim(term.name))       = nvl(upper(trim(p_name)),'CONTADO');

reg_terms  c_terms%rowtype;
-- variables para create_cust_account_org
p_cust_account_rec       hz_cust_account_v2pub.cust_account_rec_type;
p_organization_rec       hz_party_v2pub.organization_rec_type;
x_cust_account_id        NUMBER;
x_account_number         VARCHAR2 (2000);
x_party_id               NUMBER;
x_party_number           VARCHAR2 (2000);
x_profile_id             NUMBER;
cursor c_profile_class (p_name varchar2)
is
select *
  FROM HZ_CUST_PROFILE_CLASSES
  where NAME = P_NAME
          AND STATUS = 'A';

reg_profile c_profile_class%rowtype;

--variables para create_customer_profile
p_customer_profile_rec   hz_customer_profile_v2pub.customer_profile_rec_type;
x_cust_account_profile_id NUMBER;

--variables para create_cust_profile_amt
p_cust_profile_amt_rec      hz_customer_profile_v2pub.CUST_PROFILE_AMT_REC_TYPE;
x_cust_acct_profile_amt_id  NUMBER;

--varables para create_location
p_location_rec hz_location_v2pub.location_rec_type;
x_location_id  NUMBER;

--variables para create_party_site
p_party_site_rec     hz_party_site_v2pub.party_site_rec_type;
x_party_site_id      NUMBER;
x_party_site_number  VARCHAR2 (2000);

--variables para create_cust_account_site
p_cust_acct_site_rec   hz_cust_account_site_v2pub.cust_acct_site_rec_type;
x_cust_acct_site_id    NUMBER;

cursor c_operating_unit is
select *
  from hr_organization_information hroi
  where org_information1 = 'OPERATING_UNIT'
  order by hroi.ORGANIZATION_ID;

--variables para create_cust_site_use
p_cust_site_use_rec     hz_cust_account_site_v2pub.cust_site_use_rec_type;
--p_customer_profile_rec  hz_customer_profile_v2pub.customer_profile_rec_type;
x_site_use_id           NUMBER;

--variables para create_person
p_create_person_rec   hz_party_v2pub.person_rec_type;
x_person_party_id     NUMBER;
x_person_party_number VARCHAR2(2000);
x_person_profile_id   NUMBER;

--variables para create_org_contact
p_org_contact_rec  hz_party_contact_v2pub.org_contact_rec_type;
x_org_contact_id   NUMBER;
x_party_rel_id     NUMBER;
x_org_party_id     NUMBER;
x_org_party_number VARCHAR2(2000);

--variables para create_contact_point
p_contact_point_rec   hz_contact_point_v2pub.contact_point_rec_type;
p_edi_rec             hz_contact_point_v2pub.edi_rec_type;
p_email_rec           hz_contact_point_v2pub.email_rec_type;
p_phone_rec           hz_contact_point_v2pub.phone_rec_type;
p_telex_rec           hz_contact_point_v2pub.telex_rec_type;
p_web_rec             hz_contact_point_v2pub.web_rec_type;
x_contact_point_id    NUMBER;

CURSOR c_profile (p_cust_account_id number)
is
SELECT cust_account_profile_id
  FROM hz_customer_profiles
  WHERE cust_account_id= p_cust_account_id;

CURSOR c_profile_amts (p_CUST_ACCOUNT_PROFILE_ID number) is
SELECT *
  FROM HZ_CUST_PROFILE_AMTS
  WHERE CUST_ACCOUNT_PROFILE_ID = p_CUST_ACCOUNT_PROFILE_ID;

reg_amts c_profile_amts%rowtype;

--variables para create_cust_account_role
p_cr_cust_acc_role_rec   hz_cust_account_role_v2pub.cust_account_role_rec_type;
x_cust_account_role_id   NUMBER;
v_object_version_number     number;

-- variables para notificacion
v_role          number:= fnd_global.user_id;
v_request_id    number:=fnd_global.CONC_REQUEST_ID;
v_subject       varchar2(500):='Notificacion de Errores en Interfaz de Clientes CRESCENDO, archivo => '||p_file;
v_body          varchar2(5000):='Revisar el log del request_id='||fnd_global.CONC_REQUEST_ID||' para ver el detalle del error';

trx_tabla_err           trx_tbl_type;

BEGIN

/* si se ejecuta fuera de un concurrente*/
  fnd_global.APPS_INITIALIZE (0,20678,222,0,7121);
  apps.fnd_client_info.set_org_context(101);
  MO_GLOBAL.INIT('AR');
  --MO_GLOBAL.SET_POLICY_CONTEXT('S', 81);
  commit;

  dbms_output.put_line( 'Ruta: ' || v_path);
  dbms_output.put_line( 'Archivo: ' || p_file);
  v_file_cli := SYS.UTL_FILE.fopen (v_path, p_file, 'r');
  dbms_output.put_line( 'Archivo abierto');

  trx_tabla_err.DELETE;

  --SYS.UTL_FILE.get_line (v_file_ar, v_line);

  v_line:=null;
  --LECTURA ARCHIVO
  LOOP

  begin
    SYS.UTL_FILE.get_line (v_file_cli, v_line);
  exception
  when no_data_found then
    v_line := null;
  end;
  exit when v_line is null;

  --limpia variables
  v_substr:=null;
  v_tipo:=null;

  -- variables cliente
  v_nombre                :=null;
  v_tipo_cliente          :=null;
  v_categoria             :=null;
  v_numero_cliente        :=null;
  v_numero_cliente_oracle := null;
  v_rfc                   :=null;
  v_address1              :=null;
  v_colonia               :=null;
  v_delegacion            :=null;
  v_address4              :=null;
  v_ciudad                :=null;
  v_estado                :=null;
  v_cp                    :=null;
  v_pais                  :=null;
  v_moneda                :=null;
  v_limite                :=null;
  v_termino_pago          :=null;

  -- variables contacto

  v_nombre_contacto       :=null;
  v_apellido_contacto     :=null;
  v_mobil                 :=null;
  v_telefono              :=null;
  v_fax                   :=null;
  v_mail                  :=null;
  v_web                   :=null;
  v_object_version_number := null;
  v_errores               := 0;


  v_rec_no := v_rec_no + 1;
  --    dbms_output.put_line( v_line);   

  v_tipo:= substr(v_line,1,INSTR(v_line,'|')-1);
  --dbms_output.put_line( 'v_tipo:  '||v_tipo);
  v_line:= substr(v_line,INSTR(v_line,'|')+1);

  if v_tipo = 'CLIENTE' then

  FOR i in 1 .. 17 loop

  v_substr:= UPPER(trim(substr(v_line,1,INSTR(v_line,'|')-1)));
  v_line:= substr(v_line,INSTR(v_line,'|')+1);

  if i = 1 then       -- nombre del cliente   
  v_nombre:= v_substr;
  --                dbms_output.put_line( 'v_nombre:  '||v_nombre);                
    elsif i = 2 then    -- TIPO DE CLIENTE
    v_tipo_cliente:= v_substr;
    --                dbms_output.put_line( 'v_tipo_cliente:  '||v_tipo_cliente);
    if v_tipo_cliente = 'DISTRIBUIDOR' then
    v_cat_name := 'LOV_SEG_DIST';
      elsif   v_tipo_cliente = 'FABRICANTE' then
      v_cat_name := 'LOV_SEG_FAB';
      elsif   v_tipo_cliente = 'OTRO' then
      v_cat_name := 'OTRO';
      ELSE
      v_cat_name := 'OTRO';
      /*dbms_output.put_line( 'El tipo de cliente es requerido y los valores validos son DISTRIBUIDOR, FABRICANTE u OTROS, corregir el archivo, linea'||v_rec_no);
                    trx_tabla_err(v_errores_log).trx_number := v_nombre;
                    trx_tabla_err(v_errores_log).msg_error := 'El tipo de cliente es requerido y los valores validos son DISTRIBUIDOR, FABRICANTE u OTROS, corregir el archivo, linea'||v_rec_no;                    
                    v_errores := v_errores + 1;
                   v_errores_log := v_errores_log + 1;*/
      null;
    --continue;                
    end if;
    elsif i = 3 then    -- ccategoria del cliente
    v_categoria:= v_substr;
    --                dbms_output.put_line( 'v_categoria:  '||v_categoria);
    if v_categoria is not null and v_tipo_cliente is null then
    v_tipo_cliente := 'OTRO';
      elsif v_tipo_cliente in ('DISTRIBUIDOR','FABRICANTE') and v_categoria is not null then
      reg_categoria:=NULL;
      open c_categoria (v_cat_name,v_categoria);
      fetch c_categoria into reg_categoria;
      if c_categoria%notfound then
      --close c_categoria;
      dbms_output.put_line( 'La categoria: '||v_categoria||' no corresponde al tipo de cliente: '||v_tipo_cliente||', corregir y volver a intentar, linea'||v_rec_no);
      trx_tabla_err(v_errores_log).trx_number := v_nombre;
      trx_tabla_err(v_errores_log).msg_error := 'La categoria: '||v_categoria||' no corresponde al tipo de cliente: '||v_tipo_cliente||', corregir y volver a intentar, linea'||v_rec_no;
      v_errores := v_errores + 1;
      v_errores_log := v_errores_log + 1;
      --continue;
      end if;
      close c_categoria;
    end if;
    elsif i = 4 then    -- numero del cliente
    v_numero_cliente:= upper(v_substr);
  --                dbms_output.put_line( 'v_numero_cliente:  '||v_numero_cliente);
                --validaciones                                
    elsif i = 5 then    -- RFC
    v_rfc:= v_substr;
  --                dbms_output.put_line( 'v_rfc:  '||v_rfc);                
    elsif i = 6 then -- calle y numero
    v_address1:= v_substr;
  --                dbms_output.put_line( 'v_address1:  '||v_address1);                
    elsif i = 7 then -- colonia
    v_colonia:= v_substr;
  --                dbms_output.put_line( 'v_colonia:  '||v_colonia);                
    elsif i = 8 then -- delegacion o municipio  -----checar si tiene lista de valores
    v_delegacion:= v_substr;
  --                dbms_output.put_line( 'v_delegacion:  '||v_delegacion);                
    elsif i = 9 then -- cinformacion adicional direccion
    v_address4:= v_substr;
  --                dbms_output.put_line( 'v_address4:  '||v_address4);                
    elsif i = 10 then -- ciudad
    v_ciudad:= v_substr;
    --                dbms_output.put_line( 'v_ciudad:  '||v_ciudad);
    reg_ciudad:=null;
    open c_ciudad (v_ciudad);
    fetch c_ciudad into reg_ciudad;
    if c_ciudad%notfound then
    --close c_ciudad;
    dbms_output.put_line( 'La ciudad '||v_ciudad||' no existe en el catalogo de Ciudades en Oracle, corregir archivo');
    trx_tabla_err(v_errores_log).trx_number := v_nombre;
    trx_tabla_err(v_errores_log).msg_error := 'La ciudad '||v_ciudad||' no existe en el catalogo de Ciudades en Oracle, corregir archivo';
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    --continue;
    end if;
    close c_ciudad;
    elsif i = 11 then -- estado
    v_estado:= v_substr;
    --                dbms_output.put_line( 'v_estado:  '||v_estado);
    reg_estado:=null;
    open c_estado (v_estado);
    fetch c_estado into reg_estado;
    if c_estado%notfound then
    --close c_estado;
    dbms_output.put_line( 'El estado '||v_estado||' no existe en el catalogo de Estados en Oracle, corregir archivo');
    trx_tabla_err(v_errores_log).trx_number := v_nombre;
    trx_tabla_err(v_errores_log).msg_error := 'El estado '||v_estado||' no existe en el catalogo de Estados en Oracle, corregir archivo';
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    --continue;
    end if;
    close c_estado;
    elsif i = 12 then -- codigo postal
    v_cp:= v_substr;
  --                dbms_output.put_line( 'v_cp:  '||v_cp);                
    elsif i = 13 then -- pais
    v_pais:= v_substr;
    --                dbms_output.put_line( 'v_pais:  '||v_pais);
    if nvl(v_pais,'pais') not in ('MX','US') then
    dbms_output.put_line( 'el codigo de pais '||v_pais||' no es valido, valores validos MX y US, linea '||v_rec_no);
    trx_tabla_err(v_errores_log).trx_number := v_nombre;
    trx_tabla_err(v_errores_log).msg_error := 'el codigo de pais '||v_pais||' no es valido, valores validos MX y US, linea '||v_rec_no;
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    --continue; 
    end if;
    elsif i = 14 then -- moneda
    v_moneda:= v_substr;
    --                dbms_output.put_line( 'v_moneda:  '||v_moneda);
    if v_moneda is not null and nvl(v_moneda,'moneda') not in ('USD','MXN') then
    dbms_output.put_line( 'La moneda '||v_moneda||' no es valida, valores validos MXN y USD, linea '||v_rec_no);
    trx_tabla_err(v_errores_log ).trx_number := v_nombre;
    trx_tabla_err(v_errores_log ).msg_error := 'el codigo de pais '||v_pais||' no es valido, valores validos MX y US, linea '||v_rec_no;
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    --continue; 
    end if;
    elsif i = 15 then -- limite de credito
    v_limite:= v_substr;
  --                dbms_output.put_line( 'v_limite:  '||v_limite);                
    elsif i = 16 then --termino de pago 
    v_termino_pago:= v_substr;
    --                dbms_output.put_line( 'v_termino_pago:  '||v_termino_pago);
    if v_termino_pago is not null then
    reg_terms:=null;
    open c_terms (v_termino_pago);
    fetch c_terms into reg_terms;
    if c_terms%notfound then
    --close c_terms;
    dbms_output.put_line( 'El termino de pago '||v_termino_pago||' no existe en el Catalogo de terminos de pago de Oracle, linea '||v_rec_no);
    trx_tabla_err(v_errores_log ).trx_number := v_nombre;
    trx_tabla_err(v_errores_log ).msg_error := 'El termino de pago '||v_termino_pago||' no existe en el Catalogo de terminos de pago de Oracle, linea '||v_rec_no;
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    --continue;  
    end if;
    close c_terms;
    end if;
    elsif i = 17 then    -- numero del cliente oracle
    v_numero_cliente_oracle:= v_substr;
  --                dbms_output.put_line( 'v_numero_cliente_oracle:  '||v_numero_cliente_oracle);
                --validaciones                                                       
  end if;

  end loop;

  if v_errores > 0 then
  dbms_output.put_line( 'La linea '||v_rec_no ||' del archivo '||p_file||' esta incorrecta, linea '||v_rec_no);
  continue;
  v_errores_gral := v_errores_gral + 1;
  end if;

  ---- inicio se insertaria aqui para que no se genere el cliente
  reg_cliente:=null;
  open c_party_exists (v_numero_cliente, v_numero_cliente_oracle);
  fetch c_party_exists into reg_cliente;
  if c_party_exists%found then
  -- si en oracle no se cuenta con el numero de crescendo se actualiza el cliente con el numero correspondiente
  IF reg_cliente.cliente is null then
  p_organization_rec:=null;
  x_profile_id:=null;
  p_organization_rec.created_by_module         := 'TCA_V2_API';
  p_organization_rec.organization_name_phonetic:= v_numero_cliente;
  p_organization_rec.party_rec.party_id        := reg_cliente.party_id;
  p_organization_rec.application_id            := 222;
  update_organization  (
  p_organization_rec,
          reg_cliente.object_version_number,
          x_profile_id
          );
  if x_profile_id is null then
  v_errores_gral := v_errores_gral + 1;
  end if;
  continue; -- solo se actualiza el numero de crescendo, continuamos con el siguiente registro
    else
    dbms_output.put_line( 'El cliente ya ha sido cargado con anterioridad, no se permite actualizacion de clientes via interfaz , linea '||v_rec_no);
    trx_tabla_err(v_errores_log).trx_number := v_nombre;
    trx_tabla_err(v_errores_log).msg_error := 'El cliente ya ha sido cargado con anterioridad, no se permite actualizacion de clientes via interfaz , linea '||v_rec_no;
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    close c_party_exists;
    continue;
  end if;
  end if;
  close c_party_exists;

  p_cust_account_rec:=null;
  p_organization_rec:=null;
  x_cust_account_id:=null;
  x_account_number:=null;
  x_party_id:=null;
  x_party_number:=null;
  x_profile_id:=null;
  p_cust_account_rec.account_name              := v_nombre;
  p_cust_account_rec.created_by_module         := 'TCA_V2_API';
  p_cust_account_rec.application_id            := 222;
  p_organization_rec.organization_name         := v_nombre;
  p_organization_rec.created_by_module         := 'TCA_V2_API';
  p_organization_rec.organization_name_phonetic:= v_numero_cliente;
  p_organization_rec.jgzz_fiscal_code          := v_rfc;
  p_organization_rec.application_id            := 222;

  if v_tipo_cliente = 'FABRICANTE' then
  p_organization_rec.party_rec.attribute1:=reg_categoria.flex_value_meaning;
    elsif v_tipo_cliente = 'DISTRIBUIDOR' then
    p_organization_rec.party_rec.attribute2:=reg_categoria.flex_value_meaning;
    elsif v_tipo_cliente = 'OTRO' then
    p_organization_rec.party_rec.attribute3:=v_categoria;
  END IF;

  IF reg_terms.term_id is not null THEN
  reg_profile:=null;
  open c_profile_class ('DEFAULT');
  fetch c_profile_class into reg_profile;
  close c_profile_class;
  p_customer_profile_rec:=null;
  x_cust_account_profile_id:=null;
  p_customer_profile_rec.cust_account_id       := x_cust_account_id;
  p_customer_profile_rec.created_by_module     := 'TCA_V2_API';
  p_customer_profile_rec.credit_checking       := 'Y';
  p_customer_profile_rec.profile_class_id      := reg_profile.profile_class_id;
  p_customer_profile_rec.standard_terms        := reg_terms.term_id;
  p_customer_profile_rec.application_id        := 222;
  end if;


  create_cust_account_org (p_cust_account_rec,
          p_organization_rec,
          p_customer_profile_rec,
          x_cust_account_id,
          x_account_number,
          x_party_id,
          x_party_number,
          x_profile_id
          );

  if x_cust_account_id is not null then

  x_cust_account_profile_id:=null;
  open c_profile(x_cust_account_id);
  fetch c_profile into x_cust_account_profile_id;
  close c_profile;

  if x_cust_account_profile_id is not null and v_moneda is not null and v_limite is not null and reg_terms.term_id is not null then

  reg_amts:=null;
  open c_profile_amts (x_cust_account_profile_id);
  fetch c_profile_amts into reg_amts;
  if c_profile_amts%notfound then

  p_cust_profile_amt_rec:=null;
  x_cust_acct_profile_amt_id:=null;
  --p_cust_profile_amt_rec.org_id := 101;
  p_cust_profile_amt_rec.cust_account_profile_id   := x_cust_account_profile_id;
  p_cust_profile_amt_rec.created_by_module         := 'TCA_V2_API';
  p_cust_profile_amt_rec.overall_credit_limit      := v_limite;
  p_cust_profile_amt_rec.currency_code             := v_moneda;
  p_cust_profile_amt_rec.cust_account_id           := x_cust_account_id;
  p_cust_profile_amt_rec.application_id            := 222;

  create_cust_profile_amt (
  p_cust_profile_amt_rec,
          x_cust_acct_profile_amt_id
          );
  if x_cust_acct_profile_amt_id is null then
  dbms_output.put_line( 'No se pudo crear los montos del perfil del Cliente '||v_nombre||', linea '||v_rec_no);
  trx_tabla_err(v_errores_log).trx_number := v_nombre;
  trx_tabla_err(v_errores_log).msg_error := 'No se pudo crear los montos del perfil del Cliente '||v_nombre||', linea '||v_rec_no||' modificar manualmente en la pagina de clientes de Oracle';
  v_errores := v_errores + 1;
  v_errores_log := v_errores_log + 1;
  v_errores_gral := v_errores_gral + 1;
  end if;
    else
    p_cust_profile_amt_rec:=null;
    p_cust_profile_amt_rec.cust_acct_profile_amt_id := reg_amts.cust_acct_profile_amt_id;
    p_cust_profile_amt_rec.overall_credit_limit      := v_limite;
    --                       dbms_output.put_line( 'cust_acct_profile_amt_id =  '||reg_amts.cust_acct_profile_amt_id);                  
    update_cust_profile_amt (
    p_cust_profile_amt_rec,
            reg_amts.object_version_number
            );
  end if;
  close c_profile_amts;

  end if;

  p_location_rec:=null;
  x_location_id:=null;
  p_location_rec.created_by_module := 'TCA_V2_API';
  p_location_rec.country           := v_pais;
  p_location_rec.address1          := v_address1;
  p_location_rec.address2          := v_colonia;
  p_location_rec.address3          := v_delegacion;
  p_location_rec.address4          := v_address4;
  p_location_rec.city              := v_ciudad;
  p_location_rec.postal_code       := v_cp;
  p_location_rec.state             := v_estado;
  p_location_rec.application_id    := 222;

  create_location (
  p_location_rec,
          x_location_id
          );

  if x_location_id is not null then

  p_party_site_rec:=null;
  x_party_site_id:=null;
  x_party_site_number:=null;
  p_party_site_rec.party_id                    := x_party_id;
  p_party_site_rec.location_id                 := x_location_id;
  p_party_site_rec.identifying_address_flag    := 'Y';
  p_party_site_rec.created_by_module           := 'TCA_V2_API';
  p_party_site_rec.application_id              := 222;

  create_party_site (
  p_party_site_rec,
          x_party_site_id,
          x_party_site_number
          );

  if x_party_site_id is not null then

  for reg_uo in c_operating_unit loop
  p_cust_acct_site_rec:=null;
  x_cust_acct_site_id:=null;
  p_cust_acct_site_rec.cust_account_id     := x_cust_account_id;
  p_cust_acct_site_rec.party_site_id       := x_party_site_id;
  p_cust_acct_site_rec.org_id              := reg_uo.organization_id;
  p_cust_acct_site_rec.created_by_module   := 'TCA_V2_API';
  p_cust_acct_site_rec.application_id      := 222;

  create_cust_account_site (
  p_cust_acct_site_rec,
          x_cust_acct_site_id
          );

  if x_cust_acct_site_id is not null then

  p_cust_site_use_rec:=null;
  p_customer_profile_rec:=null;
  x_site_use_id:=null;
  p_cust_site_use_rec.cust_acct_site_id    := x_cust_acct_site_id;
  p_cust_site_use_rec.site_use_code        := 'BILL_TO';
  --p_cust_site_use_rec.LOCATION             := 'TCA'; --- site use id
  p_cust_site_use_rec.created_by_module    := 'TCA_V2_API';
  p_cust_site_use_rec.org_id               := reg_uo.organization_id;
  p_cust_site_use_rec.application_id       := 222;


  create_cust_site_use (
  p_cust_site_use_rec,
          p_customer_profile_rec,
          x_site_use_id
          );
  if x_site_use_id is null then
  dbms_output.put_line( 'No se pudo crear el proposito de negocio BILL_TO de la direccion del Cliente '||v_nombre||', para la unidad operativa '||reg_uo.organization_id||', linea'||v_rec_no);
  trx_tabla_err(v_errores_log).trx_number := v_nombre;
  trx_tabla_err(v_errores_log).msg_error := 'No se pudo crear el proposito de negocio BILL_TO de la direccion del Cliente '||v_nombre||', para la unidad operativa '||reg_uo.organization_id||', linea'||v_rec_no||' Agregar la direccion manualmente';
  v_errores := v_errores + 1;
  v_errores_log := v_errores_log + 1;
  v_errores_gral := v_errores_gral + 1;
  end if;
  p_cust_site_use_rec:=null;
  p_customer_profile_rec:=null;
  x_site_use_id:=null;
  p_cust_site_use_rec.cust_acct_site_id    := x_cust_acct_site_id;
  p_cust_site_use_rec.site_use_code        := 'SHIP_TO';
  --p_cust_site_use_rec.LOCATION             := 'TCA'; --- site use id
  p_cust_site_use_rec.created_by_module    := 'TCA_V2_API';
  p_cust_site_use_rec.org_id               := reg_uo.organization_id;
  p_cust_site_use_rec.application_id       := 222;

  create_cust_site_use (
  p_cust_site_use_rec,
          p_customer_profile_rec,
          x_site_use_id
          );
  if x_site_use_id is null then
  dbms_output.put_line( 'No se pudo crear el proposito de negocio SHIP_TO de la direccion del Cliente '||v_nombre||', para la unidad operativa '||reg_uo.organization_id||', linea'||v_rec_no);
  trx_tabla_err(v_errores_log).trx_number := v_nombre;
  trx_tabla_err(v_errores_log).msg_error := 'No se pudo crear el proposito de negocio SHIP_TO de la direccion del Cliente '||v_nombre||', para la unidad operativa '||reg_uo.organization_id||', linea'||v_rec_no||' Agregar la direccion manualmente';
  v_errores := v_errores + 1;
  v_errores_log := v_errores_log + 1;
  v_errores_gral := v_errores_gral + 1;
  end if;
    else
    dbms_output.put_line( 'No se pudo crear la cuenta del sitio de direccion del Cliente '||v_nombre||', para la unidad operativa '||reg_uo.organization_id||', linea '||v_rec_no);
    trx_tabla_err(v_errores_log).trx_number := v_nombre;
    trx_tabla_err(v_errores_log).msg_error := 'No se pudo crear la cuenta del sitio de direccion del Cliente '||v_nombre||', para la unidad operativa '||reg_uo.organization_id||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    v_errores_gral := v_errores_gral + 1;
  end if;
  end loop;
    else
    dbms_output.put_line( 'No se pudo crear el sitio de la direccion del Cliente '||v_nombre||', linea '||v_rec_no);
    trx_tabla_err(v_errores_log).trx_number := v_nombre;
    trx_tabla_err(v_errores_log).msg_error := 'No se pudo crear el sitio de la direccion del Cliente '||v_nombre||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    v_errores_gral := v_errores_gral + 1;
  end if;
    else
    dbms_output.put_line( 'No se pudo crear la direccion del Cliente '||v_nombre||', linea '||v_rec_no);
    trx_tabla_err(v_errores_log).trx_number := v_nombre;
    trx_tabla_err(v_errores_log).msg_error := 'No se pudo crear la direccion del Cliente '||v_nombre||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    v_errores_gral := v_errores_gral + 1;
  end if;
    else
    dbms_output.put_line( 'No se pudo crear la cuenta en Oracle del Cliente '||v_nombre||', linea '||v_rec_no);
    trx_tabla_err(v_errores_log).trx_number := v_nombre;
    trx_tabla_err(v_errores_log).msg_error := 'No se pudo crear la cuenta en Oracle del Cliente '||v_nombre||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_log := v_errores_log + 1;
    v_errores_gral := v_errores_gral + 1;
  end if;

  ---- terminaria aqui se insertaria aqui para que no se genere el cliente

    elsif v_tipo = 'CONTACTO' then

    FOR i in 1 .. 17 loop

    v_substr:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    v_line:= substr(v_line,INSTR(v_line,'|')+1);

    if i = 1 then       -- numero_cliente al que corresponde el contacto   
    v_numero_cliente:= v_substr;
    --                dbms_output.put_line( 'v_numero_cliente:  '||v_numero_cliente);                                
      elsif i = 2 then    -- nombre contacto
      v_nombre_contacto:= v_substr;
    --                dbms_output.put_line( 'v_nombre_contacto:  '||v_nombre_contacto);                
      elsif i = 3 then    -- apellido contacto
      v_apellido_contacto:= v_substr;
    --                dbms_output.put_line( 'v_apellido_contacto:  '||v_apellido_contacto);                
      elsif i = 4 then    -- movil
      v_mobil:= v_substr;
    --                dbms_output.put_line( 'v_mobil:  '||v_mobil);                
      elsif i = 5 then    -- telefono
      v_telefono:= v_substr;
    --                dbms_output.put_line( 'v_telefono:  '||v_telefono);                
      elsif i = 6 then -- fax
      v_fax:= v_substr;
    --                dbms_output.put_line( 'v_fax:  '||v_fax);                
      elsif i = 7 then -- mail
      v_mail:= v_substr;
    --                dbms_output.put_line( 'v_mail:  '||v_mail);
      elsif i = 8 then -- pagina web
      v_web:= v_substr;
    --                dbms_output.put_line( 'v_web:  '||v_web);
      elsif i = 9 then -- calle y numero
      v_address1:= v_substr;
      --                dbms_output.put_line( 'v_address1:  '||v_address1);
      if v_address1 is null then
      dbms_output.put_line( 'La direccion del contacto por lo menos debe tener codigo de pais, calle y numero, linea '||v_rec_no);
      trx_tabla_err(v_errores).trx_number := v_nombre;
      trx_tabla_err(v_errores).msg_error := 'La direccion del contacto por lo menos debe tener codigo de pais, calle y numero, linea '||v_rec_no||' Agregar la direccion manualmente';
      v_errores := v_errores + 1;
      v_errores_gral := v_errores_gral + 1;
      continue;
      end if;
      elsif i = 10 then -- colonia
      v_colonia:= v_substr;
    --                dbms_output.put_line( 'v_colonia:  '||v_colonia);                
      elsif i = 11 then -- delegacion o municipio
      v_delegacion:= v_substr;
    --                dbms_output.put_line( 'v_delegacion:  '||v_delegacion);                
      elsif i = 12 then -- cinformacion adicional direccion
      v_address4:= v_substr;
    --                dbms_output.put_line( 'v_address4:  '||v_address4);                
      elsif i = 13 then -- ciudad
      v_ciudad:= v_substr;
    --                dbms_output.put_line( 'v_ciudad:  '||v_ciudad);
    /*if v_ciudad is not null then
                reg_ciudad:=null;
                open c_ciudad (v_ciudad);
                fetch c_ciudad into reg_ciudad;
                if c_ciudad%notfound then
                    close c_ciudad;
                    dbms_output.put_line( 'La ciudad '||v_ciudad||' no existe en el catalogo de Ciudades en Oracle, corregir archivo');
                    v_errores := v_errores + 1;
                    v_errores_gral := v_errores_gral + 1;
                    continue;
                end if;
                close c_ciudad;
                end if;*/
      elsif i = 14 then -- estado
      v_estado:= v_substr;
    --                dbms_output.put_line( 'v_estado:  '||v_estado);
    /*if v_estado is not null then
                reg_estado:=null;
                open c_estado (v_estado);
                fetch c_estado into reg_estado;
                if c_estado%notfound then
                    close c_estado;
                    dbms_output.put_line( 'El estado '||v_estado||' no existe en el catalogo de Estados en Oracle, corregir archivo');
                    v_errores := v_errores + 1;
                    v_errores_gral := v_errores_gral + 1;
                    continue;
                end if;
                close c_estado;
                end if;*/
      elsif i = 15 then -- codigo postal
      v_cp:= v_substr;
    --                dbms_output.put_line( 'v_cp:  '||v_cp);                
      elsif i = 16 then -- pais
      v_pais:= v_substr;
      --                dbms_output.put_line( 'v_pais:  '||v_pais);
      if nvl(v_pais,'pais') not in ('MX','US') then
      dbms_output.put_line( 'el codigo de pais '||v_pais||' no es valido, valores validos MX y US, linea '||v_rec_no);
      trx_tabla_err(v_errores).trx_number := v_nombre;
      trx_tabla_err(v_errores).msg_error := 'el codigo de pais '||v_pais||' no es valido, valores validos MX y US, linea '||v_rec_no||' Agregar la direccion manualmente';
      v_errores := v_errores + 1;
      v_errores_gral := v_errores_gral + 1;
      continue;
      end if;
      elsif i = 17 then
      v_numero_cliente_oracle:= v_substr;
    --                dbms_output.put_line( 'v_numero_cliente_oracle:  '||v_numero_cliente_oracle);        
    end if;

    end loop;

    --validaciones
    reg_cliente:=null;
    open c_party_exists (v_numero_cliente, v_numero_cliente_oracle);
    fetch c_party_exists into reg_cliente;
    if c_party_exists%notfound then
    close c_party_exists;
    dbms_output.put_line( 'El cliente de crescendo '||v_numero_cliente||' no existe en Oracle, linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'El cliente de crescendo '||v_numero_cliente||' no existe en Oracle, linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_gral := v_errores_gral + 1;
    continue;
    end if;
    close c_party_exists;

    open c_contacto (trim(v_nombre_contacto||' '||v_apellido_contacto), reg_cliente.cust_account_id);
    fetch c_contacto into reg_contact;
    if c_contacto%found then
    close c_contacto;
    dbms_output.put_line( 'El contacto '||reg_contact.contacto||' ya lo tiene asignado el cliente crescendo '|| v_numero_cliente||', linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'El contacto '||reg_contact.contacto||' ya lo tiene asignado el cliente crescendo '|| v_numero_cliente||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    continue;
    end if;
    close c_contacto;

    p_create_person_rec:=null;
    x_person_party_id:=null;
    x_person_party_number:=null;
    x_person_profile_id:=null;
    --p_create_person_rec.person_pre_name_adjunct := 'MR.';
    p_create_person_rec.person_first_name    := v_nombre_contacto;
    p_create_person_rec.person_last_name     := v_apellido_contacto;
    p_create_person_rec.created_by_module    := 'TCA_V2_API';
    p_create_person_rec.application_id       := 222;

    create_person (
    p_create_person_rec,
            x_person_party_id,
            x_person_party_number,
            x_person_profile_id
            );

    if x_person_party_id is not null then

    --p_org_contact_rec.department_code := 'ACCOUNTING';
           --p_org_contact_rec.job_title := 'ACCOUNTS OFFICER';
           --p_org_contact_rec.decision_maker_flag := 'Y';
           --p_org_contact_rec.job_title_code := 'APC';
    p_org_contact_rec:=null;
    x_org_contact_id:=null;
    x_party_rel_id:=null;
    x_org_party_id:=null;
    x_org_party_number:=null;
    p_org_contact_rec.created_by_module                  := 'TCA_V2_API';
    p_org_contact_rec.party_rel_rec.subject_id           := x_person_party_id; --<<value for party_id from step 7>
    p_org_contact_rec.party_rel_rec.subject_type         := 'PERSON';
    p_org_contact_rec.party_rel_rec.subject_table_name   := 'HZ_PARTIES';
    p_org_contact_rec.party_rel_rec.object_id            := reg_cliente.party_id;        --<<value for party_id from step 2>
    p_org_contact_rec.party_rel_rec.object_type          := 'ORGANIZATION';
    p_org_contact_rec.party_rel_rec.object_table_name    := 'HZ_PARTIES';
    p_org_contact_rec.party_rel_rec.relationship_code    := 'CONTACT_OF';
    p_org_contact_rec.party_rel_rec.relationship_type    := 'CONTACT';
    p_org_contact_rec.party_rel_rec.start_date           := SYSDATE;
    p_org_contact_rec.party_rel_rec.status               := 'A';
    p_org_contact_rec.application_id                     := 222;
    create_org_contact (
    p_org_contact_rec,
            x_org_contact_id,
            x_party_rel_id,
            x_org_party_id,
            x_org_party_number
            );
    p_location_rec:=null;
    x_location_id :=null;
    p_location_rec.created_by_module := 'TCA_V2_API';
    p_location_rec.country           := v_pais;
    p_location_rec.address1          := v_address1;
    p_location_rec.address2          := v_colonia;
    p_location_rec.address3          := v_delegacion;
    p_location_rec.address4          := v_address4;
    p_location_rec.city              := v_ciudad;
    p_location_rec.postal_code       := v_cp;
    p_location_rec.state             := v_estado;
    p_location_rec.application_id    := 222;

    create_location (
    p_location_rec,
            x_location_id
            );

    if x_location_id is not null then

    p_party_site_rec:=null;
    x_party_site_id:=null;
    x_party_site_number:=null;
    p_party_site_rec.party_id                    := x_org_party_id;
    p_party_site_rec.location_id                 := x_location_id;
    p_party_site_rec.identifying_address_flag    := 'Y';
    p_party_site_rec.created_by_module           := 'TCA_V2_API';
    p_party_site_rec.application_id              := 222;

    create_party_site (
    p_party_site_rec,
            x_party_site_id,
            x_party_site_number
            );
    if x_party_site_id is null then
    dbms_output.put_line( 'No se pudo crear la direccion del contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'No se pudo crear la direccion del contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_gral := v_errores_gral + 1;
    end if;
      else
      dbms_output.put_line( 'No se pudo crear la direccion del contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no);
      trx_tabla_err(v_errores).trx_number := v_nombre;
      trx_tabla_err(v_errores).msg_error := 'No se pudo crear la direccion del contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no||' Agregar la direccion manualmente';
      v_errores := v_errores + 1;
      v_errores_gral := v_errores_gral + 1;
    end if;

    if x_org_party_id is not null then

    p_cr_cust_acc_role_rec:=null;
    x_cust_account_role_id:=null;
    p_cr_cust_acc_role_rec.party_id              := x_org_party_id; --<<value for party_id from step 8>
    p_cr_cust_acc_role_rec.cust_account_id       := reg_cliente.cust_account_id;  --<<value for cust_account_id from step 2>
               --p_cr_cust_acc_role_rec.cust_acct_site_id := 1312;  --<<value for cust_acct_site_id from step 5>
               --p_cr_cust_acc_role_rec.primary_flag := 'Y';
    p_cr_cust_acc_role_rec.role_type             := 'CONTACT';
    p_cr_cust_acc_role_rec.created_by_module     := 'TCA_V2_API';
    P_cr_cust_acc_role_rec.application_id        := 222;

    create_cust_account_role(
    p_cr_cust_acc_role_rec,
            x_cust_account_role_id
            );
    if x_cust_account_role_id is null then
    dbms_output.put_line( 'No se pudo crear el role para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'No se pudo crear el role para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_gral := v_errores_gral + 1;
    end if;

    p_contact_point_rec:=null;
    p_phone_rec:=null;
    p_edi_rec:=null;
    p_email_rec:=null;
    p_phone_rec:=null;
    p_telex_rec:=null;
    p_web_rec:=null;
    x_contact_point_id:=null;

    if v_mobil is not null then
    p_contact_point_rec.created_by_module    := 'TCA_V2_API';
    p_contact_point_rec.contact_point_type   := 'PHONE';
    p_contact_point_rec.owner_table_name     := 'HZ_PARTIES';
    p_contact_point_rec.owner_table_id       :=  x_org_party_id;
    p_contact_point_rec.primary_flag         := 'Y';
    p_contact_point_rec.application_id       := 222;
    if nvl(v_pais,'pais') = 'US' then
    p_phone_rec.phone_country_code      := '1';
      elsif nvl(v_pais,'pais') = 'MX' then
      p_phone_rec.phone_country_code      := '52';
    end if;
    p_phone_rec.phone_number                 := v_mobil;
    p_phone_rec.phone_line_type              := 'MOBILE';
    --p_phone_rec.application_id               := 222;

    create_contact_point (
    p_contact_point_rec,
            p_edi_rec,
            p_email_rec,
            p_phone_rec,
            p_telex_rec,
            p_web_rec,
            x_contact_point_id
            );
    if x_contact_point_id is null then
    dbms_output.put_line( 'No se pudo registrar el telefono movil para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'No se pudo registrar el telefono movil para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_gral := v_errores_gral + 1;
    end if;
    end if;
    p_contact_point_rec:=null;
    p_phone_rec:=null;
    p_edi_rec:=null;
    p_email_rec:=null;
    p_phone_rec:=null;
    p_telex_rec:=null;
    p_web_rec:=null;
    x_contact_point_id:=null;
    if v_telefono is not null then
    p_contact_point_rec.created_by_module    := 'TCA_V2_API';
    p_contact_point_rec.contact_point_type   := 'PHONE';
    p_contact_point_rec.owner_table_name     := 'HZ_PARTIES';
    p_contact_point_rec.owner_table_id       :=  x_org_party_id;
    p_contact_point_rec.primary_flag         := 'Y';
    p_contact_point_rec.application_id       := 222;
    if nvl(v_pais,'pais') = 'US' then
    p_phone_rec.phone_country_code      := '1';
      elsif nvl(v_pais,'pais') = 'MX' then
      p_phone_rec.phone_country_code      := '52';
    end if;
    p_phone_rec.phone_number                 := v_telefono;
    p_phone_rec.phone_line_type              := 'GEN';
    --p_phone_rec.application_id               := 222;   
    create_contact_point (
    p_contact_point_rec,
            p_edi_rec,
            p_email_rec,
            p_phone_rec,
            p_telex_rec,
            p_web_rec,
            x_contact_point_id
            );
    if x_contact_point_id is null then
    dbms_output.put_line( 'No se pudo registrar el telefono para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'No se pudo registrar el telefono para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_gral := v_errores_gral + 1;
    end if;
    end if;
    p_contact_point_rec:=null;
    p_phone_rec:=null;
    p_edi_rec:=null;
    p_email_rec:=null;
    p_phone_rec:=null;
    p_telex_rec:=null;
    p_web_rec:=null;
    x_contact_point_id:=null;
    if v_fax is not null then
    p_contact_point_rec.created_by_module    := 'TCA_V2_API';
    p_contact_point_rec.contact_point_type   := 'PHONE';
    p_contact_point_rec.owner_table_name     := 'HZ_PARTIES';
    p_contact_point_rec.owner_table_id       :=  x_org_party_id;
    p_contact_point_rec.primary_flag         := 'Y';
    p_contact_point_rec.application_id       := 222;
    if nvl(v_pais,'pais') = 'US' then
    p_phone_rec.phone_country_code      := '1';
      elsif nvl(v_pais,'pais') = 'MX' then
      p_phone_rec.phone_country_code      := '52';
    end if;
    p_phone_rec.phone_number                 := v_FAX;
    p_phone_rec.phone_line_type              := 'FAX';
    --p_phone_rec.application_id               := 222;
    create_contact_point (
    p_contact_point_rec,
            p_edi_rec,
            p_email_rec,
            p_phone_rec,
            p_telex_rec,
            p_web_rec,
            x_contact_point_id
            );
    if x_contact_point_id is null then
    dbms_output.put_line( 'No se pudo registrar el FAX para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'No se pudo registrar el FAX para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_gral := v_errores_gral + 1;
    end if;
    end if;

    p_contact_point_rec:=null;
    p_phone_rec:=null;
    p_edi_rec:=null;
    p_email_rec:=null;
    p_phone_rec:=null;
    p_telex_rec:=null;
    p_web_rec:=null;
    x_contact_point_id:=null;

    if v_mail is not null then
    p_contact_point_rec.created_by_module    := 'TCA_V2_API';
    p_contact_point_rec.contact_point_type   := 'EMAIL';
    p_contact_point_rec.owner_table_name     := 'HZ_PARTIES';
    p_contact_point_rec.owner_table_id       :=  x_org_party_id;
    p_contact_point_rec.primary_flag         := 'Y';
    p_contact_point_rec.application_id       := 222;
    p_email_rec.email_address                := v_mail;
    --p_email_rec.application_id               := 222;
    create_contact_point (
    p_contact_point_rec,
            p_edi_rec,
            p_email_rec,
            p_phone_rec,
            p_telex_rec,
            p_web_rec,
            x_contact_point_id
            );
    if x_contact_point_id is null then
    dbms_output.put_line( 'No se pudo registrar el MAIL movil para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'No se pudo registrar el MAIL movil para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_gral := v_errores_gral + 1;
    end if;
    END IF;
    p_contact_point_rec:=null;
    p_phone_rec:=null;
    p_edi_rec:=null;
    p_email_rec:=null;
    p_phone_rec:=null;
    p_telex_rec:=null;
    p_web_rec:=null;
    x_contact_point_id:=null;
    if v_web is not null then
    p_contact_point_rec.created_by_module    := 'TCA_V2_API';
    p_contact_point_rec.contact_point_type   := 'WEB';
    p_contact_point_rec.owner_table_name     := 'HZ_PARTIES';
    p_contact_point_rec.owner_table_id       :=  x_org_party_id;
    p_contact_point_rec.primary_flag         := 'Y';
    p_contact_point_rec.application_id       := 222;
    p_web_rec.web_type                       :='HOMEPAGE';
    p_web_rec.url                            := v_web;
    --p_web_rec.application_id                 := 222;
    create_contact_point (
    p_contact_point_rec,
            p_edi_rec,
            p_email_rec,
            p_phone_rec,
            p_telex_rec,
            p_web_rec,
            x_contact_point_id
            );
    if x_contact_point_id is null then
    dbms_output.put_line( 'No se pudo registrar la pagina WEB para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'No se pudo registrar la pagina WEB para el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_gral := v_errores_gral + 1;
    end if;
    end if;
    end if;
      else
      dbms_output.put_line( 'No se pudo crear el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no);
      trx_tabla_err(v_errores).trx_number := v_nombre;
      trx_tabla_err(v_errores).msg_error := 'No se pudo crear el contacto '||v_nombre_contacto||' para el cliente '||v_numero_cliente_oracle||', linea '||v_rec_no||' Agregar la direccion manualmente';
      v_errores := v_errores + 1;
      v_errores_gral := v_errores_gral + 1;
    end if;

    else
    dbms_output.put_line( 'Tipo de linea invalido, corregir y volver a intentar, tipo: '||v_tipo||', linea '||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_nombre;
    trx_tabla_err(v_errores).msg_error := 'Tipo de linea invalido, corregir y volver a intentar, tipo: '||v_tipo||', linea '||v_rec_no||' Agregar la direccion manualmente';
    v_errores := v_errores + 1;
    v_errores_gral := v_errores_gral + 1;
    continue;
  end if;

  commit;

  end loop;

  if trx_tabla_err.COUNT > 0 then

  dbms_output.put_line('Resumen de importacion de Clientes');
  dbms_output.put_line('***************************************************************');
  dbms_output.put_line('Clientes|Mensaje de Error');
  for i in trx_tabla_err.first .. trx_tabla_err.last loop

  dbms_output.put_line(trx_tabla_err(i).trx_number||'|'||trx_tabla_err(i).msg_error);
  end loop;

  dbms_output.put_line('***************************************************************');
  dbms_output.put_line('Revisar el log completo para identifacr los errores');

  end if;

  if v_errores_gral > 0 then

  retcode:=1;

  end if;

  SYS.UTL_FILE.fclose (v_file_cli);
exception
when others then
  dbms_output.put_line( 'Ocurrio un error:'||sqlerrm);
  retcode:=2;
  SYS.UTL_FILE.fclose (v_file_cli);
END cliente;

PROCEDURE XXBOL_AR_APPLY_CM_TO_DM (
errbuf                  out varchar2
,retcode                 out number
,p_cm_customer_trx_id    in number
,p_inv_customer_trx_id   in number
,p_org_id                in number
,p_amount                in number
,p_apply_date            in date
)
is
cursor c_importe is
SELECT nvl(aps.AMOUNT_DUE_REMAINING,0)
  FROM apps.ra_customer_trx_all rct,
          apps.ra_cust_trx_types_all rca,
          apps.ar_payment_schedules_all aps
  WHERE 1=1
          and rct.org_id =   p_org_id
          AND rct.cust_trx_type_id = rca.cust_trx_type_id
          AND rca.org_id = rct.org_id
          --                      AND rca.TYPE = 'INV'
          AND aps.customer_trx_id = rct.customer_trx_id
          and rct.customer_trx_id = p_inv_customer_trx_id;

K_api_version               CONSTANT NUMBER := 1;
K_init_msg_list             CONSTANT VARCHAR2(1) := FND_API.G_FALSE;
K_comments                  CONSTANT ar_receivable_applications.comments%TYPE := 'Test';
K_commit                    CONSTANT VARCHAR2(1) := FND_API.G_FALSE;
l_acctd_amount_applied_from ar_receivable_applications_all.acctd_amount_applied_from%TYPE;
l_acctd_amount_applied_to   ar_receivable_applications_all.acctd_amount_applied_to%TYPE;
l_cm_app_rec                AR_CM_API_PUB.cm_app_rec_type;
l_msg_count                 NUMBER;
l_msg_data                  VARCHAR2(255);
l_out_rec_application_id    NUMBER;
l_return_status             VARCHAR2(1);

v_importe                   number:=0;

BEGIN
-- First set the environment of the user submitting the request by submitting
-- fnd_global.apps_initialize().
-- The procedure requires three parameters
-- Fnd_Global.apps_initialize(userId,responsibilityId,applicationId)
-- replace the following code with correct value as get from sql above
--Fnd_Global.apps_initialize(1391,50718,222,0,9124);

/*open c_importe;
fetch c_importe into v_importe;
close c_importe;*/


  dbms_output.put_line('v_importe: '||p_amount);
  dbms_output.put_line('p_cm_customer_trx_id: '||p_cm_customer_trx_id);
  dbms_output.put_line('p_inv_customer_trx_id: '||p_inv_customer_trx_id);
  dbms_output.put_line('p_org_id: '||p_org_id);

  l_cm_app_rec.cm_customer_trx_id             := p_cm_customer_trx_id;--227612;
  l_cm_app_rec.cm_trx_number                  := null; -- Credit Memo Number
  l_cm_app_rec.inv_customer_trx_id            := p_inv_customer_trx_id;--227607;
  l_cm_app_rec.inv_trx_number                 := null ; -- Invoice Number
--l_cm_app_rec.installment                    := 1;
--l_cm_app_rec.applied_payment_schedule_id    := 155192;
  l_cm_app_rec.amount_applied                 := p_amount;--v_importe;--476.83; 
  l_cm_app_rec.apply_date                     := p_apply_date;
  l_cm_app_rec.gl_date                        := p_apply_date;
  l_cm_app_rec.inv_customer_trx_line_id       := null;
  l_cm_app_rec.inv_line_number                := null;
  l_cm_app_rec.show_closed_invoices           := null;
  l_cm_app_rec.ussgl_transaction_code         := null;
  l_cm_app_rec.attribute_category             := null;
  l_cm_app_rec.attribute1                     :=null ;
  l_cm_app_rec.attribute2                     :=null ;
  l_cm_app_rec.attribute3                     := null ;
  l_cm_app_rec.attribute4                     := null;
  l_cm_app_rec.attribute5                     := null;
  l_cm_app_rec.attribute6                     := null;
  l_cm_app_rec.attribute7                     := null;
  l_cm_app_rec.attribute8                     := null;
  l_cm_app_rec.attribute9                     := null;
  l_cm_app_rec.attribute10                    := null;
  l_cm_app_rec.attribute11                    := null;
  l_cm_app_rec.attribute12                    := null;
  l_cm_app_rec.attribute13                    := null;
  l_cm_app_rec.attribute14                    := null;
  l_cm_app_rec.attribute15                    := null;
  l_cm_app_rec.global_attribute_category      := null;
  l_cm_app_rec.global_attribute1              := null;
  l_cm_app_rec.global_attribute2              := null;
  l_cm_app_rec.global_attribute3              := null;
  l_cm_app_rec.global_attribute4              := null;
  l_cm_app_rec.global_attribute5              := null;
  l_cm_app_rec.global_attribute6              := null;
  l_cm_app_rec.global_attribute7              := null;
  l_cm_app_rec.global_attribute8              := null;
  l_cm_app_rec.global_attribute9              := null;
  l_cm_app_rec.global_attribute10             := null;
  l_cm_app_rec.global_attribute11             := null;
  l_cm_app_rec.global_attribute12             := null;
  l_cm_app_rec.global_attribute12             := null;
  l_cm_app_rec.global_attribute14             := null;
  l_cm_app_rec.global_attribute15             := null;
  l_cm_app_rec.global_attribute16             := null;
  l_cm_app_rec.global_attribute17             := null;
  l_cm_app_rec.global_attribute18             := null;
  l_cm_app_rec.global_attribute19             := null;
  l_cm_app_rec.global_attribute20             := null;
  l_cm_app_rec.comments                       := K_comments;
  l_cm_app_rec.called_from                    := null;

  AR_CM_API_PUB.apply_on_account(
  p_api_version                 => K_api_version
  , p_init_msg_list               => K_init_msg_list
  , p_commit                      => K_commit
  , p_cm_app_rec                  => l_cm_app_rec
  , x_return_status               => l_return_status
  , x_msg_count                   => l_msg_count
  , x_msg_data                    => l_msg_data
  , x_out_rec_application_id      =>   l_out_rec_application_id
  , x_acctd_amount_applied_from   =>   l_acctd_amount_applied_from
  , x_acctd_amount_applied_to     =>   l_acctd_amount_applied_to
          );
  dbms_output.put_line('return_status: '||l_return_status);
  dbms_output.put_line('msg_count: '||l_msg_count);
  dbms_output.put_line('out_rec_application_id: '||l_out_rec_application_id);
  dbms_output.put_line('acctd_amount_applied_from: '|| l_acctd_amount_applied_from);
  dbms_output.put_line('acctd_amount_applied_to: '|| l_acctd_amount_applied_to);
  IF l_msg_count = 1 THEN
  dbms_output.put_line(l_msg_data);
  RETCODE:=2;
    ELSIF l_msg_count > 1 THEN
    FOR I IN 1..l_msg_count
    LOOP
    dbms_output.put_line(I||'. '||SubStr(FND_MSG_PUB.Get(p_encoded => FND_API.G_FALSE ), 1, 255));

    dbms_output.put_line(l_msg_data);
    END LOOP;

    RETCODE:=2;
    ELSE
    RETCODE :=0;
  END IF;
END XXBOL_AR_APPLY_CM_TO_DM;

PROCEDURE XXBOL_AR_TRANSACTIONS_PRC
(ERRBUF    OUT VARCHAR2,
RETCODE   OUT number,
p_file    in varchar2) IS


trx_tabla_err           trx_tbl_type;
trx_tabla_ok            trx_tbl_type_ok;
p_msg_count             number;
p_msg_data              varchar2(2000);
o_trx_header_tbl        ar_invoice_api_pub.trx_header_tbl_type;
o_trx_lines_tbl         ar_invoice_api_pub.trx_line_tbl_type;
p_trx_dist_tbl          ar_invoice_api_pub.trx_dist_tbl_type;
p_trx_salescredits_tbl  ar_invoice_api_pub.trx_salescredits_tbl_type;
o_batch_source_rec      ar_invoice_api_pub.batch_source_rec_type;
p_trx_contingencies_tbl ar_invoice_api_pub.trx_contingencies_tbl_type;
l_cnt number := 0;
l_customer_trx_id       number;
l_return_status         varchar2(80);
v_org_id number;

cursor c_type (P_TYPE VARCHAR2, P_ORGANIZATION_ID  NUMBER, p_almacen varchar2) is

/*
Agregar atribute1 para identificar por tienda/organizacion inventarios
*/
select cust_trx_type_id, attribute2 batch_source_id
  from ra_cust_trx_types_all
  where ATTRIBUTE1 = P_ORGANIZATION_ID
          and attribute3 = p_almacen
          --name = 'VTA MOST FACT T PINO';
          and TYPE = P_TYPE;

reg_type c_type %rowtype;

cursor c_origen (p_org_id number, p_serie number) is
/*
Agregar atribute 1 para identificar por unidad operativa
*/
select bs.batch_source_id
  FROM   ra_batch_sources_all bs
  where bs.name = p_serie--'CRESCENDO VENTAS DCH'
          and bs.org_id = p_org_id;

reg_origen c_origen%rowtype;

CURSOR c_cliente (p_org_id number, p_cliente_crescendo varchar2, p_cliente_oracle varchar2)
is
SELECT hp.party_number, hp.party_name,
        hp.orig_system_reference orig_system_reference_c,
        ca.cust_account_id orig_system_bill_customer_id,
        ca.orig_system_reference orig_system_reference_ca,
        cas.cust_acct_site_id orig_system_bill_address_id,
        cas.orig_system_reference orig_system_reference_a,
        ps.orig_system_reference orig_system_reference_ps,
        ps.party_site_number, csu.site_use_code, csu.payment_term_id,
        trm.term_id, trm.NAME term_name
  FROM hz_parties hp,
          hz_cust_accounts ca,
          hz_cust_acct_sites_all cas,
          hz_party_sites ps,
          hz_cust_site_uses_all csu,
          ra_terms_tl trm
  WHERE hp.party_id = ca.party_id
          AND cas.cust_account_id = ca.cust_account_id
          AND cas.party_site_id = ps.party_site_id
          AND cas.cust_acct_site_id = csu.cust_acct_site_id
          AND csu.site_use_code = 'BILL_TO'
          AND csu.status = 'A'
          AND trm.term_id =
          NVL (csu.payment_term_id,
                  (SELECT tt.term_id
                    FROM ra_terms_tl tt
                    WHERE tt.NAME = 'CONTADO'
                            AND tt.LANGUAGE = 'ESA')
                  )
          AND trm.LANGUAGE = 'ESA'
          and cas.org_id = csu.org_id
          and csu.org_id = p_org_id
          AND
          (
                  (
                          p_cliente_crescendo is not null
                                  and upper(trim(hp.ORGANIZATION_NAME_PHONETIC)) = upper(trim(p_cliente_crescendo))
                          )
                          or
                          (p_cliente_oracle is not null
                                  and ltrim(trim(ca.account_number),'0') = ltrim(trim(p_cliente_oracle),'0')
                                  )
                  );
--and ca.cust_account_id = p_bill_id
         --and cas.cust_acct_site_id = p_addr_id;     

reg_cliente c_cliente%rowtype;


cursor c_libro (p_org_code varchar2) is
/*ç
agregar parametro para organizacion de inventarios
*/

select hroi.organization_id, hroi.org_information1 gl_id, hroi.org_information3 UO , hraou.name
  from
          hr_all_organization_units hraou,
                  hr_organization_information hroi
  where      hraou.organization_id               = hroi.organization_id
          and     hroi.org_information_context    = 'Accounting Information'
          and exists (
    select 1
    from mtl_parameters mp
    where mp.organization_id = hroi.organization_id
            and mp.organization_code = p_org_code
          );
--   and     hraou.name = '003_TIENDA URUGUAY';

reg_libro c_libro%rowtype;

cursor c_memoline (p_org_id number) is

select t.MEMO_LINE_ID
  FROM ar_memo_lines_ALL_tl t
  WHERE t.LANGUAGE = 'ESA'
          AND upper(t.name) =upper('Ventas Mostrador')
          and t.org_id = p_org_id;


reg_memoline c_memoline%rowtype;
CURSOR c_erro_c
IS
SELECT *
  FROM ar_trx_errors_gt ate;
--WHERE ate.trx_header_id = p_head_id;    

CURSOR carticulo (
in_item_code           mtl_system_items_b.segment1%TYPE,
in_organization_code   mtl_parameters.organization_code%TYPE
)
IS

SELECT distinct si.inventory_item_id, si.tax_code, si.description, Si.segment1,
        si.organization_id, si.primary_unit_of_measure, rt.percentage_rate
  FROM   mtl_system_items_b si,
          zx_rates_b rt,
          zx_rates_tl rtt,
          (SELECT mp.organization_id
            FROM mtl_parameters mp
            WHERE mp.organization_code = in_organization_code) og
  WHERE si.organization_id = og.organization_id
          AND si.tax_code = rt.tax_rate_code(+)
          AND rtt.tax_rate_id(+) = rt.tax_rate_id
          AND si.segment1 = in_item_code
          AND rtt.LANGUAGE(+) = 'ESA';

reg_articulo carticulo%rowtype;

cursor c_uom ( p_unidad varchar2) is
select uom.uom_code
  from MTL_UNITS_OF_MEASURE_VL uom
  where uom.unit_of_measure = p_unidad;

cursor c_term (p_name varchar2) is
select trm.TERM_ID
  from ra_terms_tl trm
  where trm.NAME = p_name
          and trm.LANGUAGE = 'ESA';

reg_term c_term%rowtype;

CURSOR C_trx (P_trx_number VARCHAR2, P_ADDR_ID NUMBER, P_BILL_ID NUMBER) IS
select DISTINCT trx.customer_trx_id
  from ra_customer_trx_all trx
  where trx.trx_number = P_trx_number
          and TRX.BILL_TO_CUSTOMER_ID = P_BILL_ID
          AND BILL_TO_ADDRESS_ID = P_ADDR_ID;

CURSOR C_trx_number (P_ID NUMBER) IS
select DISTINCT trx.trx_number
  from ra_customer_trx_all trx
  where trx.customer_trx_id=p_id;

cursor C_trx_exists (p_trx_number ra_customer_trx_all.trx_number%type ,
p_orig_system_bill_address_id ra_customer_trx_all.BILL_TO_ADDRESS_ID %type,
p_orig_system_bill_customer_id ra_customer_trx_all.BILL_TO_CUSTOMER_ID%type,
p_cust_trx_type_id ra_customer_trx_all.cust_trx_type_id%type,
p_batch_source_id ra_customer_trx_all.batch_source_id%type
)
is
select 1
  from ra_customer_trx_all trx
  where
          trx.interface_header_attribute1 = p_trx_number
                  and  trx.BILL_TO_ADDRESS_ID = p_orig_system_bill_address_id
                  and  trx.BILL_TO_CUSTOMER_ID = p_orig_system_bill_customer_id
                  --and trx.CUST_TRX_TYPE_ID = p_cust_trx_type_id
                  and  trx.BATCH_SOURCE_ID = p_batch_source_id;

reg_exists c_trx_exists%rowtype;

v_trx_number_new        ra_customer_trx_all.trx_number%type;

v_header_id             number;
v_line_id               number;
--v_line                  number:=0;
v_quantity              number:=70;

v_FILE_AR               SYS.UTL_FILE.file_type;
V_LINE                  VARCHAR2(5000);
v_rec_no                number:=0;
v_path                  varchar2(1000):='INCRS_TOP';
v_substr                varchar2(5000);
v_trx_number            ra_customer_trx_all.trx_number%type;
v_organization_code     mtl_parameters.organization_code%type;
v_corte                 number;
v_tipo_trx              varchar2(3);
v_cliente_mostrador     varchar2(2);
v_bill_customer_id      number;
v_bill_address_id       number;
v_cliente_crescendo     varchar2(100);
v_cliente_oracle        varchar2(100);
v_trx_number_app        ra_customer_trx_all.trx_number%type;
v_line_trx_app          number;
v_line_trx              number;
v_articulo              mtl_system_items_b.segment1%type;
v_uom                   varchar2(180);
v_cantidad              number;
v_importe               number;
v_unit_selling_price    number;
v_payment_term          ra_terms_tl.term_id%type;

v_trx_number_old        ra_customer_trx_all.trx_number%type;
v_tipo_trx_old          varchar2(3);
v_trx_number_app_old    ra_customer_trx_all.trx_number%type;
v_importe_app_old       number:=0;

v_linea                 number:=0;
v_cabeza                number:=0;
v_tax_code              varchar2(150);
v_currency              varchar2(3);
v_exchange_rate_type    VARCHAR2(60);
v_exchange_date         DATE;
v_exchange_rate         Number;

v_errbuf                varchar2(1000);
v_retcode   number:=0;

v_customer_trx_id_inv   number;

v_importe_app       number:=0;

v_exit              number:=0;
v_errores_gral      number:=0;

--

v_cliente_atributo  varchar2(250);
v_mail_atributo     varchar2(250);
v_telefono_atributo varchar2(250);
v_tipo_cliente_atributo varchar2(250);

v_debug_id          number;
v_org_id_api        number;
v_abort             boolean:=false;
v_trx_cont          number:=0;
v_trx_cont_ok       number:=0;

v_almacen           varchar2(200);
v_trx_date          date;
BEGIN

/* si se ejecuta fuera de un concurrente*/
/*   fnd_global.APPS_INITIALIZE (0,20678,222,0,7121);    
            apps.fnd_client_info.set_org_context(101);
            MO_GLOBAL.INIT('AR');
            --MO_GLOBAL.SET_POLICY_CONTEXT('S', 81);
            commit;*/

  dbms_output.put_line( 'Ruta: ' || v_path);
  dbms_output.put_line( 'Archivo: ' || p_file);
  v_file_ar := SYS.UTL_FILE.fopen (v_path, p_file, 'r');
  dbms_output.put_line( 'Archivo abierto');


  --SYS.UTL_FILE.get_line (v_file_ar, v_line);

  v_line:=null;
  --LECTURA ARCHIVO
  LOOP

  begin
    SYS.UTL_FILE.get_line (v_file_ar, v_line);
  exception
  when no_data_found then
    v_line := null;
  end;
  exit when v_exit = 1;

  if v_line is not null then

  v_rec_no := v_rec_no + 1;
  --        dbms_output.put_line( v_line);

  v_trx_number:=null;
  v_organization_code:=null;
  v_corte:=null;
  v_tipo_trx:=null;
  v_cliente_mostrador:=null;
  v_bill_customer_id:=null;
  v_bill_address_id:=null;
  v_trx_number_app:=null;
  v_line_trx_app:=null;
  v_line_trx:=null;
  v_articulo:=null;
  v_uom:=null;
  v_cantidad:=null;
  v_importe:=null;
  v_unit_selling_price:=null;
  v_payment_term:=null;
  v_cliente_atributo:=null;
  v_mail_atributo:=null;
  v_telefono_atributo:=null;
  v_tipo_cliente_atributo:=null;
  v_almacen:=null;

  v_substr:=null;

  for i in 1..25 loop

  if i = 1 then       -- numero transaccion   
  v_trx_number:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
  --                dbms_output.put_line( 'v_trx_number:  '||v_trx_number);
  if v_trx_number is null then
  dbms_output.put_line( 'El numero de transaccion es obligatorio, corregir y volver a intentar');
  v_errores_gral := v_errores_gral + 1;
  --p_trx_header_tbl.delete;
  trx_tabla_err(v_trx_cont).trx_number := v_trx_number;
  trx_tabla_err(v_trx_cont).msg_error := '|Linea: '||v_rec_no||'|El numero de transaccion es obligatorio, corregir y volver a intentar';
  v_trx_cont := v_trx_cont + 1;
  continue;
  end if;
  v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 2 then    -- codigo tienda (organizacion de inventarios)
    v_organization_code:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_organization_code:  '||v_organization_code);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 3 then    -- corte del dia
    v_corte:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_corte:  '||v_corte);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 4 then    -- tipo de transaccion DEV o FAC
    v_tipo_trx:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_tipo_trx:  '||v_tipo_trx);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 5 then    -- Cliente Mostrador SI o NO
    v_cliente_mostrador:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_cliente_mostrador:  '||v_cliente_mostrador);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 6 then -- numero cliente crescendo
    v_cliente_crescendo:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_cliente_crescendo:  '||v_cliente_crescendo);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 7 then -- numero cliente oracle                   
    v_cliente_oracle:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_cliente_oracle:  '||v_cliente_oracle);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 8 then -- numero de la factura a aplicar, solo para notas de credito tipo_trx = DEV
    v_trx_number_app:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_trx_number_app:  '||v_trx_number_app);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 9 then -- linea de la factura a ser aplicada, solo para notas de credito tipo_trx = DEV
    v_line_trx_app:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_line_trx_app:  '||v_line_trx_app);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 10 then -- linea de la transaccion que se esta creando
    v_line_trx:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_line_trx:  '||v_line_trx);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 11 then   -- Codigo del articulo, solo para clientes diferenetes a CLIENTE MOSTRADOR
    v_articulo:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_articulo:  '||v_articulo);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 12 then   -- unidad de medida del articulo vendido, solo para clientes diferenetes a CLIENTE MOSTRADOR 
    v_substr:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    --if v_cliente_mostrador = 'NO' then
    v_uom:=NULL;
    open c_uom (v_substr);
    fetch c_uom into v_uom;
    if c_uom%notfound then
    dbms_output.put_line( 'Unidad de medida '||v_substr||' no existe.');
    close c_uom;
    v_errores_gral := v_errores_gral + 1;
    --p_trx_header_tbl.delete;
    trx_tabla_err(v_trx_cont).trx_number := v_trx_number;
    trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|Unidad de medida '||v_substr||' no existe.';
    v_trx_cont := v_trx_cont + 1;
    continue;
    end if;
    close c_uom;
  --                    dbms_output.put_line( 'v_uom:  '||v_uom);
                --end if; 
    elsif i = 13 then   -- Cantidad vendida 
    v_cantidad:= trim(to_number(substr(v_line,1,INSTR(v_line,'|')-1)));
    --                dbms_output.put_line( 'v_cantidad:  '||v_cantidad);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 14 then   -- importe del articulo vendido para clientes mostrador es la suma de la venta del dia por tienda, corte, y para los demas es importe del articulo vendido cantidad X precio 
    v_importe:= trim(to_number(substr(v_line,1,INSTR(v_line,'|')-1)));
    --                dbms_output.put_line( 'v_importe:  '||v_importe);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);

    elsif i = 15 then   -- precio de venta del articulo vendido, para a CLIENTE MOSTRADOR = v_importe 
    v_unit_selling_price:= trim(to_number(substr(v_line,1,INSTR(v_line,'|')-1)));
    --                dbms_output.put_line( 'v_unit_selling_price:  '||v_unit_selling_price);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 16 then   -- Codigo de impuesto, definir si usamos el del articulo 
    v_tax_code:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_tax_code:  '||v_tax_code);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 17 then   -- Moneda 
    v_currency:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_currency:  '||v_currency);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 18 then   -- Tipo de cambio 
    v_exchange_rate:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_exchange_rate:  '||v_exchange_rate);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 19 then   -- Cliente quien hizo la compra 
    v_cliente_atributo:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_cliente_atributo:  '||v_cliente_atributo);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 20 then   -- Mail del comprador 
    v_mail_atributo:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_mail_atributo:  '||v_mail_atributo);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 21 then   -- telefono del comprador 
    v_telefono_atributo:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_telefono_atributo:  '||v_telefono_atributo);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 22 then   -- tipo cliente comprador 
    v_tipo_cliente_atributo:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_tipo_cliente_atributo:  '||v_tipo_cliente_atributo);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 23 then   -- subinventario 
    v_almacen:= trim(substr(v_line,1,INSTR(v_line,'|')-1));
    --                dbms_output.put_line( 'v_almacen:  '||v_almacen);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 24 then   -- subinventario 
    v_trx_date:= to_date(trim(substr(v_line,1,INSTR(v_line,'|')-1)),'DD/MM/RRRR');
    --                dbms_output.put_line( 'v_almacen:  '||v_almacen);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
  /*
                -- se toma el termino de pago del cliente, si no gtiene se toma como contado
                elsif 1 = 17 then   -- Termino de pago, solo para facturas, por defautl se toma CONTADO 
                v_substr:= substr(v_line,1,INSTR(v_line,'|')-1);
                v_line:= substr(v_line,INSTR(v_line,'|')+1); 
                open c_term (v_substr);
                fetch c_term into  v_payment_term;
                if c_term%notfound then
                    dbms_output.put_line( 'Termino de pago '||v_substr||' no existe.');
                    continue;            
                end if; 
                close c_term;*/
  end if;
  end loop;

  reg_libro:=null;
  open c_libro(v_organization_code);
  fetch c_libro into reg_libro;
  if c_libro%notfound then
  dbms_output.put_line( 'No se encontro unidad operativa para la tienda '||v_organization_code);
  close c_libro;
  v_errores_gral := v_errores_gral + 1;
  if v_trx_number_old is null then

  v_trx_number_old:= v_trx_number;

  end if;
  v_abort := true;
  --p_trx_header_tbl.delete;
  trx_tabla_err(v_trx_cont).trx_number := v_trx_number;
  trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|No se encontro unidad operativa para la tienda '||v_organization_code;
  v_trx_cont := v_trx_cont + 1;
  continue;
  end if;
  close c_libro;


  --derivar info
  /*    reg_origen:=null;
    open c_origen (v_org_id);
    fetch c_origen into reg_origen;
    if c_origen%notfound then
        dbms_output.put_line( 'No hay definido origen para la unidad operativa '||v_orgid);    
    end if;
    close c_origen;        
*/
  reg_type:=null;
  if v_tipo_trx = 'FAC' then

  open c_type ('INV',reg_libro.organization_id, v_almacen);
  fetch c_type into reg_type;
  if c_type%notfound then
  dbms_output.put_line( 'No se encontro tipo de transaccion de Factura para la organizacion '||v_organization_code||', y almacen '||v_almacen);
  close c_type;
  v_errores_gral := v_errores_gral + 1;
  if v_trx_number_old is null then

  v_trx_number_old:= v_trx_number;

  end if;
  v_abort := true;
  --p_trx_header_tbl.delete;
  trx_tabla_err(v_trx_cont).trx_number := v_trx_number;
  trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|No se encontro tipo de transaccion de Factura para la organizacion '||v_organization_code||', y almacen '||v_almacen;
  v_trx_cont := v_trx_cont + 1;
  continue;
  end if;
  close c_type;

    elsif v_tipo_trx = 'DEV' then

    open c_type ('CM',reg_libro.organization_id,v_almacen);
    fetch c_type into reg_type;
    if c_type%notfound then
    dbms_output.put_line( 'No se encontro tipo de transaccion de Nota de Credito para la organizacion '||v_organization_code);
    close c_type;
    v_errores_gral := v_errores_gral + 1;
    if v_trx_number_old is null then

    v_trx_number_old:= v_trx_number;

    end if;
    --p_trx_header_tbl.delete;
    trx_tabla_err(v_trx_cont).trx_number := v_trx_number;
    trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|No se encontro tipo de transaccion de Nota de Credito para la organizacion '||v_organization_code;
    v_trx_cont := v_trx_cont + 1;
    v_abort := true;
    continue;

    end if;
    close c_type;

  end if;

  reg_cliente:=null;
  open c_cliente (reg_libro.uo,v_cliente_crescendo,v_cliente_oracle);
  fetch c_cliente into reg_cliente;
  if c_cliente%notfound then
  dbms_output.put_line( 'No se encontro el cliente CRESCENDO '|| v_cliente_crescendo||', Cliente Oracle '||v_cliente_oracle||', reg_libro.uo: '||reg_libro.uo);
  close c_cliente;
  v_errores_gral := v_errores_gral + 1;
  if v_trx_number_old is null then

  v_trx_number_old:= v_trx_number;

  end if;
  v_abort := true;
  --p_trx_header_tbl.delete;
  trx_tabla_err(v_trx_cont).trx_number := v_trx_number;
  trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|No se encontro el cliente CRESCENDO '|| v_cliente_crescendo||', Cliente Oracle '||v_cliente_oracle;
  v_trx_cont := v_trx_cont + 1;
  continue;
  end if;
  close c_cliente;


  reg_articulo:=null;
  open carticulo (v_articulo,v_organization_code);
  fetch carticulo into reg_articulo;
  if carticulo%notfound then
  dbms_output.put_line( 'No se encontro el articulo '||v_articulo||' en la organizacion '||v_organization_code);
  close carticulo;
  v_errores_gral := v_errores_gral + 1;

  if v_trx_number_old is null then

  v_trx_number_old:= v_trx_number;

  end if;
  trx_tabla_err(v_trx_cont).trx_number := v_trx_number;
  trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|No se encontro el articulo '||v_articulo||' en la organizacion '||v_organization_code;
  v_trx_cont := v_trx_cont + 1;
  v_abort := true;
  continue;
  end if;
  close carticulo;

    else

    v_exit := 1;

    dbms_output.put_line('Ultima Linea........');
  --        
--        dbms_output.put_line('v_trx_number_old='||v_trx_number_old);
--        dbms_output.put_line('v_trx_number='||v_trx_number);          
--        dbms_output.put_line('v_exit='||v_exit);
--        dbms_output.put_line('v_cabeza='||v_cabeza);      

  end if;


  if nvl(v_trx_number_old,'xxxx') != v_trx_number or v_exit = 1 then



  /*if v_abort 
          then 
                dbms_output.put_line( 'Transaccion no creada '|| v_trx_number_old);
                v_abort := false; --reiniciando bandera
                trx_tabla_err(v_trx_cont).trx_number := v_trx_number_old;
                trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|Transaccion No creada';
                v_trx_cont := v_trx_cont + 1;
          els*/

  if v_cabeza = 1 then

  --v_importe_app_old := v_importe_app;        

  dbms_output.put_line( 'Creando Transaccion '|| v_trx_number_old ||' ...');

  l_customer_trx_id := null;
  l_return_status := null;

  /*delete from ar_trx_errors_gt;
            
            delete from ar_trx_header_tmp_gt;
            delete from ar_trx_lines_tmp_gt;
            delete from ar_trx_dist_tmp_gt;
            delete from ar_trx_salescredits_tmp_gt;
            
            delete from ar_trx_header_gt;
            delete from ar_trx_lines_gt;
            delete from ar_trx_dist_gt;
            delete from ar_trx_salescredits_gt;
            --delete from ar_trx_errors_gt;
            DELETE FROM ZX_TRX_HEADERS_GT;
            DELETE FROM ZX_TRANSACTION_LINES_GT;
            DELETE FROM ZX_IMPORT_TAX_LINES_GT;*/

  --commit;
            

            
--            dbms_output.put_line('Debug: '||fnd_profile.value('AFLOG_ENABLED'));
            
--            select max(log_sequence)
--            into v_debug_id 
--            from fnd_log_messages;
            
               
--            dbms_output.put_line('Debug id: '||v_debug_id);

  AR_INVOICE_API_PUB.create_single_invoice(
  p_api_version           => 1.0,
          p_init_msg_list         => FND_API.G_FALSE,
          p_commit                => FND_API.G_TRUE,
          p_batch_source_rec      => o_batch_source_rec,
          x_customer_trx_id       => l_customer_trx_id,
          p_trx_header_tbl        => o_trx_header_tbl,
          p_trx_lines_tbl         => o_trx_lines_tbl,
          p_trx_dist_tbl          => p_trx_dist_tbl,
          p_trx_salescredits_tbl  => p_trx_salescredits_tbl,
          x_return_status         => l_return_status,
          x_msg_count             => p_msg_count,
          x_msg_data              => p_msg_data
          );

  commit;



  /*if l_customer_trx_id is not null then                
                dbms_output.put_line('Customer Trx id '|| l_customer_trx_id);
                 COMMIT;
                 
                 v_trx_number_new:=null;
                 open C_trx_number (l_customer_trx_id);
                 fetch c_trx_number into v_trx_number_new;
                 close c_trx_number;
                 
                 dbms_output.put_line( 'Transaccion Creada Exitosamente => '||v_trx_number_new);
                  
            els*/
  IF l_return_status = fnd_api.g_ret_sts_error OR
          l_return_status = fnd_api.g_ret_sts_unexp_error THEN
  dbms_output.put_line('unexpected errors found!');

  dbms_output.put_line( 'Transaccion no Creada');
  dbms_output.put_line( 'Msg '|| substr(p_msg_data,1,225));
  dbms_output.put_line('Status '|| l_return_status);
  dbms_output.put_line('v_trx_number                                          ='||v_trx_number_old);
  dbms_output.put_line('o_batch_source_rec.batch_source_id                    ='||o_batch_source_rec.batch_source_id );
  dbms_output.put_line('o_trx_header_tbl('||v_cabeza||').trx_header_id        ='|| o_trx_header_tbl(v_cabeza).trx_header_id);
  dbms_output.put_line('o_trx_header_tbl('||v_cabeza||').cust_trx_type_id     ='||o_trx_header_tbl(v_cabeza).cust_trx_type_id);
  dbms_output.put_line('o_trx_header_tbl('||v_cabeza||').bill_to_customer_id  ='||o_trx_header_tbl(v_cabeza).bill_to_customer_id);
  dbms_output.put_line('o_trx_header_tbl('||v_cabeza||').bill_to_address_id   ='||o_trx_header_tbl(v_cabeza).bill_to_address_id);
  dbms_output.put_line('o_trx_header_tbl('||v_cabeza||').term_id              ='|| o_trx_header_tbl(v_cabeza).term_id);
  dbms_output.put_line('o_trx_header_tbl('||v_cabeza||').trx_date             ='|| o_trx_header_tbl(v_cabeza).trx_date);
  dbms_output.put_line('o_trx_header_tbl('||v_cabeza||').trx_currency         ='|| o_trx_header_tbl(v_cabeza).trx_currency);
  dbms_output.put_line('o_trx_header_tbl('||v_cabeza||').trx_number         ='|| o_trx_header_tbl(v_cabeza).trx_number);
  v_errores_gral := v_errores_gral + 1;

  trx_tabla_err(v_trx_cont).trx_number := v_trx_number_old;
  trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|Errores en al API, revisar el Log en el numero de transaccion: '||v_trx_number_old||','||substr(p_msg_data,1,225);
  v_trx_cont := v_trx_cont + 1;

  FOR i in c_erro_c LOOP

  dbms_output.put_line('----------------------------------------------------');
  dbms_output.put_line('Header ID       = ' || to_char(i.trx_header_id));
  dbms_output.put_line('Line ID         = ' || to_char(i.trx_line_id));
  dbms_output.put_line('Sales Credit ID = ' || to_char(i.trx_salescredit_id));
  dbms_output.put_line('Dist Id         = ' || to_char(i.trx_dist_id));
  dbms_output.put_line('Contingency ID  = ' || to_char(i.trx_contingency_id));
  dbms_output.put_line('Message         = ' || substr(i.error_message,1,80));
  dbms_output.put_line('Invalid Value   = ' || substr(i.invalid_value,1,80));
  dbms_output.put_line('----------------------------------------------------');
  END LOOP;
  /*FOR c_erro IN c_erro_c (p_trx_header_tbl(v_cabeza).trx_header_id)
                 LOOP
                    dbms_output.put_line(
                                          'Errores: '
                                       || c_erro.error_message
                                       || ' valor no valido: '
                                       || c_erro.invalid_value
                                       || ' id de encabezado: '
                                       || c_erro.trx_header_id
                                       || ' id linea: '
                                       || c_erro.trx_line_id
                                       || ' id distribucion: '
                                       || c_erro.trx_dist_id
                                      );
                 END LOOP;*/

  delete from ar_trx_errors_gt;

  commit;

    ELSE
    SELECT count(*)
      Into l_cnt
      From ar_trx_errors_gt;
    IF l_cnt = 0
      THEN
      dbms_output.put_line('Customer Trx id '|| l_customer_trx_id);
      COMMIT;

      v_trx_number_new:=null;
      open C_trx_number (l_customer_trx_id);
      fetch c_trx_number into v_trx_number_new;
      close c_trx_number;

      dbms_output.put_line( 'Transaccion Creada Exitosamente => '||v_trx_number_new);

      trx_tabla_ok(v_trx_cont_ok).trx_number := v_trx_number_new;
      v_trx_cont_ok := v_trx_cont_ok + 1;

      if v_tipo_trx_old = 'DEV' then

      v_customer_trx_id_inv := 0;
      OPEN C_trx (v_trx_number_app_old,reg_cliente.orig_system_bill_address_id,reg_cliente.orig_system_bill_customer_id);
      FETCH C_trx INTO v_customer_trx_id_inv;
      CLOSE C_trx;

      IF nvl(v_customer_trx_id_inv,0) != 0 THEN

      dbms_output.put_line('Aplicando nota de credito a factura abierta...');
      dbms_output.put_line('Aplicando el importe => '||v_importe_app||' a la factura => '||v_trx_number_app_old);
      dbms_output.put_line('Aplicando nota de credito a factura abierta...');
      dbms_output.put_line('Aplicando el importe => '||v_importe_app||' a la factura => '||v_trx_number_app_old);
      dbms_output.put_line('v_customer_trx_id_inv => '||v_customer_trx_id_inv);
      XXBOL_AR_APPLY_CM_TO_DM (
      errbuf                  => v_errbuf
      ,retcode                 => v_retcode
      ,p_cm_customer_trx_id    => l_customer_trx_id
      ,p_inv_customer_trx_id   => v_customer_trx_id_inv
      ,p_org_id                => v_org_id
      ,p_amount                => round(v_importe_app,2)
      ,p_apply_date            => sysdate
              ) ;
      IF v_RETCODE > 0 THEN
      dbms_output.put_line('No se hizo la aplicacion del importe');
      dbms_output.put_line('No se hizo la aplicacion del importe');
      retcode :=  2;
      v_errores_gral := v_errores_gral + 1;
      --raise e_abort;                     
      end if;

        else

        dbms_output.put_line( 'La factura que se desea aplicar no existe '||v_trx_number_app_old);
        dbms_output.put_line( 'La nota de credito queda pendiente por aplicar '||v_trx_number_old);
        dbms_output.put_line( 'La factura que se desea aplicar no existe '||v_trx_number_app_old);
        dbms_output.put_line( 'La nota de credito queda pendiente por aplicar '||v_trx_number_old);
        v_errores_gral := v_errores_gral + 1;

      end if;
      end if;



      ELSE

      dbms_output.put_line( 'Transaction not Created '||v_trx_number_old);
      v_errores_gral := v_errores_gral + 1;

      trx_tabla_err(v_trx_cont).trx_number := v_trx_number_old;
      trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|Errores en al API, revisar el Log en el numero de transaccion: '||v_trx_number_old||', '||substr(p_msg_data,1,225);
      v_trx_cont := v_trx_cont + 1;
      FOR i in c_erro_c LOOP
      dbms_output.put_line('----------------------------------------------------');
      dbms_output.put_line('Header ID       = ' || to_char(i.trx_header_id));
      dbms_output.put_line('Line ID         = ' || to_char(i.trx_line_id));
      dbms_output.put_line('Sales Credit ID = ' || to_char(i.trx_salescredit_id));
      dbms_output.put_line('Dist Id         = ' || to_char(i.trx_dist_id));
      dbms_output.put_line('Contingency ID  = ' || to_char(i.trx_contingency_id));
      dbms_output.put_line('Message         = ' || substr(i.error_message,1,80));
      dbms_output.put_line('Invalid Value   = ' || substr(i.invalid_value,1,80));
      dbms_output.put_line('----------------------------------------------------');
      END LOOP;
      /*FOR c_erro IN c_erro_c (p_trx_header_tbl(v_cabeza).trx_header_id)
                 LOOP
                    dbms_output.put_line(
                                          'Errores: '
                                       || c_erro.error_message
                                       || ' valor no valido: '
                                       || c_erro.invalid_value
                                       || ' id de encabezado: '
                                       || c_erro.trx_header_id
                                       || ' id linea: '
                                       || c_erro.trx_line_id
                                       || ' id distribucion: '
                                       || c_erro.trx_dist_id
                                      );
                 END LOOP;*/
      delete from ar_trx_errors_gt;

      commit;

    END IF;

  END IF;

  v_cabeza := 0;

  end if;


  if v_exit = 1 then
  continue;
  end if;

  dbms_output.put_line('*******START******');
  dbms_output.put_line('reg_libro.uo: '||reg_libro.uo);
  fnd_global.APPS_INITIALIZE (0,20678,222,0,7121);
  MO_GLOBAL.INIT('AR'); --** IMP Comment this Line **
  commit;

  MO_GLOBAL.SET_POLICY_CONTEXT('S', reg_libro.uo);
  apps.fnd_client_info.set_org_context(reg_libro.uo);
  select MO_GLOBAL.get_current_org_id()
    into v_org_id from dual;
  --            dbms_output.put_line('Current MO Org_id='||v_org_id);      

  o_trx_header_tbl.delete;
  o_trx_lines_tbl.delete;

  v_linea := 0;
  --AR_INVOICE_API_PUB.clean_tmp_gt;
            --AR_INVOICE_API_PUB.clean_gt;

  reg_exists:=null;
  OPEN C_trx_exists (v_trx_number,reg_cliente.orig_system_bill_address_id,reg_cliente.orig_system_bill_customer_id,reg_type.cust_trx_type_id, reg_type.batch_source_id );
  FETCH C_trx_exists INTO reg_exists;
  if c_trx_exists%found then
  CLOSE C_trx_exists;
  trx_tabla_err(v_trx_cont).trx_number := v_trx_number;
  trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|El numero de transaccion ya fue cargada anteriormente';
  v_trx_cont := v_trx_cont + 1;
  dbms_output.put_line('El numero de transaccion ya fue cargada anteriormente');
  dbms_output.put_line('------------------------------------------------------');
  dbms_output.put_line('Transaccion           ='||v_trx_number);
  dbms_output.put_line('bill_to_address_id    ='||reg_cliente.orig_system_bill_address_id);
  dbms_output.put_line('bill_to_customer_id   ='||reg_cliente.orig_system_bill_customer_id);
  dbms_output.put_line('cust_trx_type_id      ='||reg_type.cust_trx_type_id);
  dbms_output.put_line('batch_source_id       ='||reg_type.batch_source_id );
  dbms_output.put_line('------------------------------------------------------');
  continue;
  end if;
  CLOSE C_trx_exists;


  select seq_trx_header_id.NEXTVAL
    into  v_header_id
    from dual;

  v_cabeza := 1;

  v_importe_app:=0;

  v_trx_number_old        := v_trx_number;
  v_tipo_trx_old          := v_tipo_trx;
  v_trx_number_app_old    := v_trx_number_app;

  -- this is the header
  o_batch_source_rec.batch_source_id             := reg_type.batch_source_id;--1;
  o_trx_header_tbl(v_cabeza).trx_header_id       := v_header_id;
  o_trx_header_tbl(v_cabeza).cust_trx_type_id    := reg_type.cust_trx_type_id;
  o_trx_header_tbl(v_cabeza).trx_date            := nvl(v_trx_date,sysdate);--sysdate;--temporal
  o_trx_header_tbl(v_cabeza).bill_to_customer_id := reg_cliente.orig_system_bill_customer_id;
  o_trx_header_tbl(v_cabeza).bill_to_address_id  := reg_cliente.orig_system_bill_address_id;
  if v_currency is not null then
  o_trx_header_tbl(v_cabeza).trx_currency        := v_currency;
  end if;
  IF nvl(v_currency,'MXN') = 'USD'
    THEN
    o_trx_header_tbl(v_cabeza).exchange_rate_type  := 'User';
    o_trx_header_tbl(v_cabeza).exchange_rate       := v_exchange_rate;
  END IF;

  if v_tipo_trx = 'FAC' then
  o_trx_header_tbl(v_cabeza).term_id             := reg_cliente.term_id;
  end if;

  -- se cambio ya que la numeracion de trx de crescendo son automaticas
            --o_trx_header_tbl(v_cabeza).trx_number := v_trx_number;
  o_trx_header_tbl(v_cabeza).interface_header_attribute1 := v_trx_number;
  --p_trx_header_tbl(1).trx_currency := 'MXN';


  end if;

  -- PARA AJUSTAR LA PRESICION
  /*if round(v_unit_selling_price,5) * V_cantidad != round(v_importe,5) then 
            v_importe := round(v_unit_selling_price,5) * V_cantidad;
            v_unit_selling_price := round(v_unit_selling_price,2);
        end if;*/
  /*v_importe := arpcurr.currround(V_cantidad *
                    v_unit_selling_price,v_currency);*/
  v_importe := V_cantidad * v_unit_selling_price;

  --        dbms_output.put_line('v_importe='|| v_importe||'; v_unit_selling_price='||v_unit_selling_price||'; V_cantidad='||V_cantidad);            




  if v_tipo_trx = 'DEV' then

  v_importe_app := v_importe_app + round((v_importe + (v_importe * reg_articulo.percentage_rate)/100),2);

  end if;

  select seq_trx_line_id.NEXTVAL
    into  v_line_id
    from dual;

  v_linea := v_linea + 1;

  --    dbms_output.put_line(' v_header_id='|| v_header_id||', v_line_id='||v_line_id||', v_linea='||v_linea);    

  if v_cliente_mostrador = 'SI' then

  /* open c_memoline(reg_libro.uo);
        fetch c_memoline into reg_memoline;
        if c_memoline%notfound then
           dbms_output.put_line( 'No se encontro la memoline Ventas Mostrador para la unidad operativa'||v_org_id);           
           close c_memoline;
           v_errores_gral := v_errores_gral + 1;
           trx_tabla_err(v_trx_cont).trx_number := v_trx_number;
           trx_tabla_err(v_trx_cont).msg_error := 'Linea: '||v_rec_no||'|No se encontro la memoline Ventas Mostrador para la unidad operativa'||v_org_id;
           v_trx_cont := v_trx_cont + 1;
           v_abort:=true;
           continue;    
        end if;
        close c_memoline;
        
        v_importe_app := v_importe_app + round(v_importe,2);

    -- this is the first line          
        o_trx_lines_tbl(v_linea).trx_header_id := v_header_id;
        o_trx_lines_tbl(v_linea).trx_line_id := v_line_id;
        o_trx_lines_tbl(v_linea).line_number := v_line_trx;
        if v_tipo_trx = 'FAC' then
            o_trx_lines_tbl(v_linea).memo_line_id := reg_memoline.memo_line_id;
            o_trx_lines_tbl(v_linea).amount := v_importe;
            o_trx_lines_tbl(v_linea).quantity_invoiced := V_cantidad;-- 1;
        else
            o_trx_lines_tbl(v_linea).description :=reg_articulo.description;
            o_trx_lines_tbl(v_linea).inventory_item_id := reg_articulo.inventory_item_id;    
            o_trx_lines_tbl(v_linea).memo_line_id := null;
            o_trx_lines_tbl(v_linea).amount := v_importe*-1;
            o_trx_lines_tbl(v_linea).quantity_invoiced := V_cantidad*-1;
        end if;        
                
        
        o_trx_lines_tbl(v_linea).unit_selling_price := v_unit_selling_price;        
        o_trx_lines_tbl(v_linea).line_type := 'LINE';
        --p_trx_lines_tbl(v_linea).taxable_flag := 'N';
    
        dbms_output.put_line('v_header_id='||v_header_id);
        dbms_output.put_line('v_line_id='||v_line_id);
        dbms_output.put_line('v_line='||v_line_trx);
        dbms_output.put_line('reg_memoline.memo_line_id='||reg_memoline.memo_line_id);
        dbms_output.put_line('v_quantity='||v_quantity);
        
        if  v_tipo_cliente_atributo is not null or
            v_mail_atributo is not null or
            v_telefono_atributo is not null or
            v_tipo_cliente_atributo is not null
        then
            o_trx_lines_tbl(v_linea).Interface_line_context := 'CRESCENDO';
            o_trx_lines_tbl(v_linea).INTERFACE_LINE_ATTRIBUTE1:= v_tipo_cliente_atributo;
            o_trx_lines_tbl(v_linea).INTERFACE_LINE_ATTRIBUTE2:= v_mail_atributo;
            o_trx_lines_tbl(v_linea).INTERFACE_LINE_ATTRIBUTE3:= v_telefono_atributo;
            o_trx_lines_tbl(v_linea).INTERFACE_LINE_ATTRIBUTE4:= v_tipo_cliente_atributo;
        end if;*/

  v_importe_app := v_importe_app + round(v_importe,2);

  o_trx_lines_tbl(v_linea).trx_header_id         := v_header_id;
  o_trx_lines_tbl(v_linea).trx_line_id           := v_line_id;
  o_trx_lines_tbl(v_linea).line_number           := v_line_trx;
  o_trx_lines_tbl(v_linea).description           := reg_articulo.description;--reg_trx.description;

  if v_tipo_trx = 'FAC' then
  o_trx_lines_tbl(v_linea).UOM_CODE              := v_uom;
  o_trx_lines_tbl(v_linea).amount                := v_importe;
  o_trx_lines_tbl(v_linea).quantity_invoiced     := V_cantidad;
    else
    o_trx_lines_tbl(v_linea).UOM_CODE              := null;
    o_trx_lines_tbl(v_linea).amount                := v_importe*-1;
    o_trx_lines_tbl(v_linea).quantity_invoiced     := V_cantidad*-1;
  end if;

  o_trx_lines_tbl(v_linea).unit_selling_price         := v_unit_selling_price;
  o_trx_lines_tbl(v_linea).line_type                  := 'LINE';
  o_trx_lines_tbl(v_linea).inventory_item_id          := reg_articulo.inventory_item_id;
  --o_trx_lines_tbl(v_linea).AMOUNT_INCLUDES_TAX_FLAG   := 'Y'; --TEMPORAL
        
        --p_trx_lines_tbl(v_linea).taxable_flag          := 'N';

  if  v_tipo_cliente_atributo is not null or
          v_mail_atributo is not null or
          v_telefono_atributo is not null or
          v_tipo_cliente_atributo is not null
    then
    o_trx_lines_tbl(v_linea).Interface_line_context := 'CRESCENDO';

    o_trx_lines_tbl(v_linea).INTERFACE_LINE_ATTRIBUTE1:= v_cliente_atributo;
    o_trx_lines_tbl(v_linea).INTERFACE_LINE_ATTRIBUTE2:= v_telefono_atributo;
    o_trx_lines_tbl(v_linea).INTERFACE_LINE_ATTRIBUTE3:= v_mail_atributo;
    o_trx_lines_tbl(v_linea).INTERFACE_LINE_ATTRIBUTE4:= v_tipo_cliente_atributo;

  end if;

    else

    o_trx_lines_tbl(v_linea).trx_header_id         := v_header_id;
    o_trx_lines_tbl(v_linea).trx_line_id           := v_line_id;
    o_trx_lines_tbl(v_linea).line_number           := v_line_trx;
    o_trx_lines_tbl(v_linea).description           := reg_articulo.description;--reg_trx.description;

    if v_tipo_trx = 'FAC' then
    o_trx_lines_tbl(v_linea).UOM_CODE              := v_uom;
    o_trx_lines_tbl(v_linea).amount                := v_importe;
    o_trx_lines_tbl(v_linea).quantity_invoiced     := V_cantidad;
      else
      o_trx_lines_tbl(v_linea).UOM_CODE              := null;
      o_trx_lines_tbl(v_linea).amount                := v_importe*-1;
      o_trx_lines_tbl(v_linea).quantity_invoiced     := V_cantidad*-1;
    end if;

    o_trx_lines_tbl(v_linea).unit_selling_price    := v_unit_selling_price;
    o_trx_lines_tbl(v_linea).line_type             := 'LINE';
    o_trx_lines_tbl(v_linea).inventory_item_id     := reg_articulo.inventory_item_id;
  --p_trx_lines_tbl(v_linea).taxable_flag          := 'N';

  end if;

  end loop;

  commit;

  if v_errores_gral > 0 then
  retcode := 1;
  end if;

  if trx_tabla_ok.COUNT > 0 then

  dbms_output.put_line('Resumen de transacciones creadas:');
  dbms_output.put_line('***************************************************************');

  for i in trx_tabla_ok.first .. trx_tabla_ok.last loop
  dbms_output.put_line('Numero de transaccion='|| trx_tabla_ok(i).trx_number);
  end loop;

  dbms_output.put_line('***************************************************************');

  end if;

  if trx_tabla_err.COUNT > 0 then

  dbms_output.put_line('Resumen de transacciones no creadas:');
  dbms_output.put_line('***************************************************************');

  for i in trx_tabla_err.first .. trx_tabla_err.last loop
  dbms_output.put_line('Numero de transaccion='|| trx_tabla_err(i).trx_number||'|'||trx_tabla_err(i).msg_error);
  end loop;

  dbms_output.put_line('***************************************************************');
  dbms_output.put_line('Revisar el log completo para identifacr los errores');

  end if;

  SYS.UTL_FILE.fclose (v_file_ar);

END XXBOL_AR_TRANSACTIONS_PRC;



PROCEDURE run_program
(p_header_id      in number,
p_error           out number) IS
ln_conc_req_id NUMBER;
lv_phase VARCHAR2(500);
lv_status VARCHAR2(500);
lv_dev_phase VARCHAR2(500);
lv_dev_status VARCHAR2(500);
lv_message1 VARCHAR2(500);
lb_result boolean;
v_org_id number:=fnd_profile.value('ORG_ID');--fnd_global.ORG_ID;    
l_exec_error exception;
BEGIN

  dbms_output.put_line( 'v_org_id = '||v_org_id);
  ln_conc_req_id := apps.fnd_request.submit_request(application =>'INV',
          program     => 'INCTCW',
          start_time  => null,
          sub_request => FALSE,
          argument1   => p_header_id,  --interface_header_id
          argument2   => 1 ,            --interface table
          argument3   => null,
          argument4   => null
          );
  commit;
  dbms_output.put_line( 'Conc. Request Id = '||TO_CHAR(ln_conc_req_id));
  dbms_output.put_line('Waiting the request...');
  IF (ln_conc_req_id != 0) THEN
  IF fnd_concurrent.wait_for_request(ln_conc_req_id,
          2,
          300,
          lv_phase,
          lv_status,
          lv_dev_phase,
          lv_dev_status,
          lv_message1)
    THEN
    dbms_output.put_line('Dev Phase = ' || lv_dev_phase);
    IF lv_dev_phase = 'COMPLETE' THEN
    IF lv_dev_status = 'WARNING' or lv_dev_status = 'ERROR' THEN
    dbms_output.put_line( 'Termina en Status warning o error');
    p_error:= 2;
      ELSIF lv_dev_status = 'NORMAL' THEN
      dbms_output.put_line( 'Termina en status Normal');
      p_error:= 0;
    END IF;
    END IF;
    else
    dbms_output.put_line('Error in Calling Concurrent Program');
    p_error:= 2;
  END IF;
  end if;
exception
when others then
  p_error:= 2;
  dbms_output.put_line( 'Error: '||sqlerrm);
END run_program;

PROCEDURE ACCOUNT_ALIAS_RECEIPT (
errbuf        OUT NOCOPY      VARCHAR2,
retcode       OUT NOCOPY      NUMBER,
p_data_file   IN              VARCHAR2
)
IS
v_transaction_source_name   VARCHAR2 (255);
v_transaction_type_id       NUMBER;-- 
v_dst_segment1              VARCHAR2 (255);
v_dst_segment2              VARCHAR2 (255);
v_dst_segment3              VARCHAR2 (255);
v_dst_segment4              VARCHAR2 (255);
v_dst_segment5              VARCHAR2 (255);
v_dst_segment6              VARCHAR2 (255);
v_dst_segment7              VARCHAR2 (255);
v_dst_segment8              VARCHAR2 (255);
v_item_segment1             VARCHAR2 (255);
v_transaction_quantity      NUMBER;
v_transaction_uom           VARCHAR2 (180);
v_loc_segment1              VARCHAR2 (255);
v_loc_segment2              VARCHAR2 (255);
v_loc_segment3              VARCHAR2 (255);
v_loc_segment4              VARCHAR2 (255);
v_lot_number                VARCHAR2 (255);
v_lot_expiration_date       DATE;
v_fm_serial_number          VARCHAR2 (255);
v_to_serial_number          VARCHAR2 (255);
v_process_flag              NUMBER (1)             := 1;
v_transaction_mode          NUMBER                 := 3;
v_lock_flag                 CHAR (2)               := '2';
--v_transaction_date          DATE                   := SYSDATE;
v_organization_id           NUMBER;
v_last_update_date          DATE                   := SYSDATE;
v_last_update_by            NUMBER                := fnd_global.user_id;
v_creation_date             VARCHAR2 (255)         := SYSDATE;
v_last_update_login         VARCHAR2 (255)         := '-1';
v_created_by                VARCHAR2 (255)        := fnd_global.user_id;
v_path_file                 VARCHAR2 (255)         := 'INCRS_TOP';
v_numcar                    NUMBER                 := 0;
v_car                       CHAR (1);
v_num_columna               NUMBER                 := 1;
v_temp                      VARCHAR2 (255);
v_rec_no                    NUMBER                 := 0;
--contador de las filas del archivo
v_registros_exitosos        NUMBER                 := 0;
--contador de las filas del archivo guardadas satisfactoriamente
v_line                      VARCHAR2 (2000);
--buffer que guarda una linea del archivo
v_data_file                 SYS.UTL_FILE.file_type;
v_instance                  VARCHAR2 (16);
--variable que controla las acciones sobre el archivo

v_serial_transaction_temp_id     mtl_transaction_lots_interface.SERIAL_TRANSACTION_TEMP_ID%TYPE;
v_product_transaction_id         mtl_transaction_lots_interface.PRODUCT_TRANSACTION_ID%TYPE;
--      
v_line_type                 varchar2(150);
v_trx_number                varchar2(150);
v_item_number               varchar2(150);
v_almacen                   varchar2(150);
v_subinventory_code         VARCHAR2 (255);
v_subinventory_to           VARCHAR2 (255);
v_concepto                  VARCHAR2 (255);
v_quantity                  number;
v_transaction_type          VARCHAR2 (255);
v_referencia                VARCHAR2 (255);
v_lot_quantity              number;
v_source_code               varchar2(150);
v_fecha_pedimento           VARCHAR2 (255);
v_nombre_aduana             VARCHAR2 (255);
v_agente_aduanal            VARCHAR2 (255);
v_tipo_pedimento            VARCHAR2 (255);
v_tipo_documento            VARCHAR2 (255);
v_fecha_recibo_laredo       VARCHAR2 (255);
v_role          number:= fnd_global.user_id;
v_request_id    number:=fnd_global.CONC_REQUEST_ID;
v_subject       varchar2(500):='Notificacion de Errores en Entrada Miscelanea '||p_data_file;
v_body          varchar2(5000):='Revisar el log del request_id='||fnd_global.CONC_REQUEST_ID||' para ver el detalle del error';

v_name          varchar2(150):='XXIRASA_LOGYX_IMPORTACION';

v_flag_control              VARCHAR2 (255):='NINGUNO';

cursor c_lotes (p_item_number varchar2, p_organization_id number) is

Select decode(to_char(msi.lot_control_code),
        '2','Y',
        '1','N') LOT_CONTROL,
        decode(to_char(msi.serial_number_control_code),
                '1','None',
                '2','Predefined',
                '5','Dynamic at INV receipt',
                '6','Dynamic at SO issue') SERIAL_CONTROL,
        msi.serial_number_control_code,
        msi.inventory_item_id,
        msi.PRIMARY_UOM_CODE
  from mtl_system_items_b msi,
          mtl_parameters mp
  where 1=1
          and msi.segment1 = p_item_number
          and msi.organization_id = p_organization_id
          and msi.organization_id=mp.organization_id;

reg_lotes           c_lotes%rowtype;
e_serial_number_null          exception;
e_serial_lote_null            exception;
e_lot_number_null             exception;
e_lot_notexists               exception;
e_lotnotfound                 exception;
e_tipo_incorrecto             exception;
e_locator_control             exception;
e_continue                    exception;
e_continue_l                  exception;
e_continue_s                  exception;

cursor c_orgs (p_almacen varchar2) is
select mp.ORGANIZATION_ID
  from mtl_parameters mp
  where mp.ORGANIZATION_CODE = p_almacen;

cursor c_alias (p_organization_id number,p_description varchar2) is
select disposition_id, segment1 tipo
  from mtl_generic_dispositions
  where segment1 = p_description
          --and description = p_description--'Entrada Prod Terminado'                
          and organization_id = p_organization_id;

cursor c_type (p_name varchar2) is
select transaction_type_id
  from MTL_TRANSACTION_TYPES
  where transaction_type_name = p_name;


cursor c_lots (p_item_id number, p_org_id number) is
select *
  from mtl_lot_numbers
  where inventory_item_id = p_item_id
          and organization_id = p_org_id
  order by ORIGINATION_DATE desc;

reg_lots  c_lots%rowtype;

cursor c_locator (p_org_id number, p_sub varchar2) is
select inventory_location_id
  from MTL_ITEM_LOCATIONS
  where organization_id=p_org_id
          and subinventory_code = p_sub
  order by creation_date desc;

v_quantity_aux      number;

cursor c_uom (p_uom varchar2) is
SELECT DISTINCT UOM_CODE
  FROM MTL_UNITS_OF_MEASURE
  WHERE UPPER(UNIT_OF_MEASURE) = UPPER(P_UOM);

cursor c_subinventory (p_code varchar2, p_org_id number) is
select distinct a.secondary_inventory_name subinventory_code, decode(a.LOCATOR_TYPE,1,'N','Y') locator_control,
        a.organization_id
  from mtl_secondary_inventories a
  where a.secondary_inventory_name = p_code
          and a.organization_id = p_org_id;

reg_sub_from c_subinventory%rowtype;
reg_sub_to   c_subinventory%rowtype;


cursor c_errors (p_trx_id number) is
SELECT (select mp.organization_code
  from mtl_parameters mp
  where mp.organization_id =mti.ORGANIZATION_ID) org,
        (
                  select msi.segment1
          from mtl_system_items_b msi
          where msi.inventory_item_id =  mti.inventory_item_id
                  and msi.organization_id =  mti.organization_id
                ) articulo
,nvl(mti.ERROR_EXPLANATION, mti.error_code) error_explanation
  FROM mtl_transactions_interface mti
  where transaction_header_id = p_trx_id
          and (mti.ERROR_EXPLANATION is not null
          or mti.error_code is not null)
  order by mti.organization_id, mti.inventory_item_id;

cursor c_exists (p_trx mtl_material_transactions.SOURCE_LINE_ID%type,
p_reference mtl_material_transactions.TRANSACTION_REFERENCE%type,
p_org_id number,
p_item mtl_system_items_b.segment1%type ) is
select mmt.SOURCE_LINE_ID, mmt.ORGANIZATION_ID, mmt.INVENTORY_ITEM_ID , mmt.TRANSACTION_REFERENCE
  FROM    mtl_material_transactions mmt
  where 1=1
          --and mmt.SOURCE_LINE_ID = p_trx
          and mmt.ORGANIZATION_ID = p_org_id
          and mmt.TRANSACTION_REFERENCE = p_reference
          and exists (select 1
    from mtl_system_items_b msi
    where mmt.INVENTORY_ITEM_ID = msi.inventory_item_id
            and msi.organization_id = mmt.organization_id
            and msi.segment1 = p_item)
        union all
          select mti.SOURCE_LINE_ID, mti.ORGANIZATION_ID, mti.INVENTORY_ITEM_ID , mti.TRANSACTION_REFERENCE
  from mtl_transactions_interface mti
  where 1=1
          --and mti.SOURCE_LINE_ID = p_trx
          and mti.organization_id =  p_org_id
          and mti.TRANSACTION_REFERENCE = p_reference
          and exists (select 1
    from mtl_system_items_b msi
    where mti.INVENTORY_ITEM_ID = msi.inventory_item_id
            and msi.organization_id = mti.organization_id
            and msi.segment1 = p_item);

reg_exists c_exists%rowtype;

v_existe varchar2(1):='N';

v_tipo varchar2(150):='ENT';--'SAL';
v_tipo_flex varchar2(150);
v_primary_quantity  number;
v_disposition_id number;

e_uom_notfound exception;
e_sub_notfound exception;
v_articulo_nuevo    varchar2(1):='N';

v_tienda_destino    varchar2(10);
v_to_organization_id number;
v_locator_from       varchar2(100);
v_from_locator_id       number;
v_locator_to       varchar2(100);
v_to_locator_id       number;

v_transaction_header_id number;
v_transaction_interface_id number;
v_error                 number:= 0;

v_errores               number:=0;

v_trx_number_source     number;

trx_tabla_err           trx_tbl_type;

v_cabecera              varchar2(1):='N';
v_location_id           number;
L_api_return_status VARCHAR2(1);
l_qty_oh            NUMBER;
l_qty_res_oh        NUMBER;
l_qty_res           NUMBER;
l_qty_sug           NUMBER;
l_qty_att           NUMBER;
l_qty_atr           NUMBER;
l_msg_count         NUMBER;
l_msg_data          VARCHAR2(1000);
v_serial_control            boolean:=false;

v_transaction_date  date;

/******************************************************************************************
*                       INICIO DEL PROCEDIMIENTO PRINCIPAL
*********************************************************************************************/
BEGIN

/* si se ejecuta fuera de un concurrente*/
  fnd_global.APPS_INITIALIZE (0,20634,401,0,7121);
  apps.fnd_client_info.set_org_context(101);
  --MO_GLOBAL.INIT('AR');
            --MO_GLOBAL.SET_POLICY_CONTEXT('S', 81);
  commit;

  --v_path_file := 'OUTCRS_TOP';

  trx_tabla_err.delete;

  dbms_output.put_line('Ruta:'||v_path_file
          );

  --apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
  dbms_output.put_line(
  'Iniciando proceso de carga de transacciones'
          );
  dbms_output.put_line(
  'Intentando abrir archivo de transacciones'
          );
  --apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
  dbms_output.put_line( 'Ruta: ' || v_path_file);
  dbms_output.put_line( 'Archivo: ' || p_data_file);
  v_data_file := SYS.UTL_FILE.fopen (v_path_file, p_data_file, 'r');
  dbms_output.put_line( 'Archivo abierto');

-- obtenemos el id de grupo para inventory transaction worker      
  SELECT NVL(MAX(TRANSACTION_HEADER_ID)+1,0)
    into v_transaction_header_id
    FROM mtl_transactions_interface;

  if v_transaction_header_id = 0 then

  select seq_mtl_header_id.nextval
    into v_transaction_header_id
    from dual;

  end if;

  dbms_output.put_line( '****************************************************');
  dbms_output.put_line( 'v_transaction_header_id: '||v_transaction_header_id);
  dbms_output.put_line( '****************************************************');



  /******************************************************************************************
*                    ASIGNACION DE VALORES A LAS VARIABLES
******************************************************************************************/
  LOOP
  BEGIN
    SYS.UTL_FILE.get_line (v_data_file, v_line);
    v_rec_no := v_rec_no + 1;
  --            dbms_output.put_line( v_line);
    v_numcar := 1;
    v_num_columna := 1;
    v_trx_number_source := NULL;

    v_line_type:= trim(substr(v_line,1,INSTR(v_line,'|')-1));

  ---            dbms_output.put_line('v_line_type:'||v_line_type);

    if v_line_type = 'MTL_TRANS' then

    v_tipo:=null;
    v_almacen:=null;
    v_organization_id:=null;
    v_transaction_uom:=null;
    v_transaction_quantity:=null;
    v_referencia:=null;
    v_transaction_type_id := null;
    v_source_code := null;
    v_tienda_destino:=null;
    v_to_organization_id:=null;
    v_locator_from:=null;
    v_from_locator_id:=null;
    v_locator_to:=null;
    v_to_locator_id:=null;
    v_disposition_id:=null;
    v_tipo_flex:=null;
    v_trx_number:=null;
    v_item_number:=null;
    v_subinventory_to:= null;
    v_subinventory_code:=null;

    v_existe := 'N';

    --                dbms_output.put_line('*******MTL_TRANS*******');

    v_articulo_nuevo := 'N';

    begin

      WHILE v_numcar <= LENGTH (v_line)
      LOOP
      v_temp := '';
      v_car := 'm';

      WHILE (v_car <> '|' AND v_numcar <= LENGTH (v_line))
      LOOP
      v_car := SUBSTR (v_line, v_numcar, 1);

      IF (v_car != '|')
        THEN
        v_temp := v_temp || v_car;
      END IF;

      v_numcar := v_numcar + 1;

      END LOOP;

      v_temp  := ltrim(rtrim(v_temp));

      --dbms_output.put_line('v_temp:'||v_temp||'-v_num_columna: '||v_num_columna);

      IF v_num_columna = 1 then
      v_line_type := v_temp;
        elsIF v_num_columna = 2
          THEN
          v_trx_number := v_temp;
          --                      dbms_output.put_line('v_trx_number:'||v_trx_number); 

          if v_trx_number is null then

          dbms_output.put_line('El numero de la transaccion es obligatorio, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'El numero de la transaccion es obligatorio, error en linea :' ||v_rec_no;
          raise e_continue;

          end if;


        ELSIF v_num_columna = 3
          THEN
          v_item_number := v_temp;
          --                      dbms_output.put_line('v_item_number:'||v_item_number);

          if v_item_number is null then

          dbms_output.put_line('El codigo del articulo es obligatorio, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'El codigo del articulo es obligatorio, error en linea :' ||v_rec_no;
          raise e_continue;

          end if;

        ELSIF v_num_columna = 4
          THEN
          v_almacen := v_temp;
          --                        dbms_output.put_line('v_almacen:'||v_almacen); --tienda / codigo organizacion inventarios

          if v_almacen is null then

          dbms_output.put_line('El codigo de la tienda es obligatorio, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'El codigo de la tienda es obligatorio, error en linea :' ||v_rec_no;
          raise e_continue;

          end if;

          open c_orgs (v_almacen);
          fetch c_orgs into v_organization_id;
          if c_orgs%notfound then
          dbms_output.put_line('No existe la tienda '||v_almacen||', error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'No existe la tienda '||v_almacen||', error en linea :' ||v_rec_no;
          close c_orgs;
          raise e_continue;
          end if;
          close c_orgs;
      --                        dbms_output.put_line('v_organization_id:'||v_organization_id);                      
        ELSIF v_num_columna = 5
          THEN
          v_subinventory_code := v_temp;
          --                      dbms_output.put_line('v_subinventory_code:'||v_subinventory_code);

          if v_subinventory_code is null then

          dbms_output.put_line('El subinventario es obligatorio, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'El subinventario es obligatorio, error en linea :' ||v_rec_no;
          raise e_continue;

          end if;

          reg_sub_from:=null;
          open c_subinventory (v_subinventory_code,v_organization_id);
          fetch c_subinventory into reg_sub_from;
          if c_subinventory%notfound then
          dbms_output.put_line('No existe el subinventario '||v_subinventory_code||' en la tienda '||v_almacen||', error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'No existe el subinventario '||v_subinventory_code||' en la tienda '||v_almacen||', error en linea :' ||v_rec_no;
          close c_subinventory;
          raise e_continue;
          end if;
          close c_subinventory;

          v_subinventory_code := reg_sub_from.subinventory_code;

      --                      dbms_output.put_line('Bajo control de localizadores:'||reg_sub_from.locator_control);

        ELSIF v_num_columna = 6
          THEN
          v_transaction_uom := v_temp;
          --                      dbms_output.put_line('v_transaction_uom:'||v_transaction_uom);

          if v_transaction_uom is null then

          dbms_output.put_line('La unidad de medida es obligatoria, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'La unidad de medida es obligatoria, error en linea :' ||v_rec_no;
          raise e_continue;

          end if;

          open c_uom(v_transaction_uom);
          fetch c_uom into v_transaction_uom;
          if c_uom%notfound then
          dbms_output.put_line('La unidad de medida '||v_transaction_uom||' no existe, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'La unidad de medida '||v_transaction_uom||' no existe, error en linea :' ||v_rec_no;
          close c_uom;
          raise e_continue;
          end if;
          close c_uom;


        ELSIF v_num_columna = 7
          THEN
          v_transaction_quantity := TO_NUMBER (v_temp);
          --                      dbms_output.put_line('v_transaction_quantity:'||v_transaction_quantity);
          if v_transaction_quantity is null then

          dbms_output.put_line('La cantidad de la transaccion es obligatoria, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'La cantidad de la transaccion es obligatoria, error en linea :' ||v_rec_no;
          v_errores := v_errores + 1;
          continue;

          end if;

          v_quantity_aux := v_transaction_quantity; -- para el control por lotes

        ELSIF v_num_columna = 8
          THEN
          v_referencia := v_temp;
          --                      dbms_output.put_line('v_referencia:'||v_referencia); 

          if v_referencia is null then

          dbms_output.put_line('La referencia de la transaccion es obligatoria, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'La referencia de la transaccion es obligatoria, error en linea :' ||v_rec_no;
          raise e_continue;

          end if;

        ELSIF v_num_columna = 9
          THEN

          v_tipo:= v_temp;

          --                      dbms_output.put_line('v_tipo:'||v_tipo);

          if v_tipo is null then

          dbms_output.put_line('El tipo de la transaccion es obligatoria, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'El tipo de la transaccion es obligatoria, error en linea :' ||v_rec_no;
          raise e_continue;
            elsif v_tipo not in ('ENT','SAL','SIT') THEN
            dbms_output.put_line('Los valores posibles para el tipo de transaccion son ENT, SAL o SIT, error en linea :' ||v_rec_no);
            trx_tabla_err(v_errores).trx_number := v_trx_number;
            trx_tabla_err(v_errores).msg_error := 'Los valores posibles para el tipo de transaccion son ENT, SAL o SIT, error en linea :' ||v_rec_no;
            raise e_continue;
          end if;

          if v_tipo = 'ENT' then
          v_source_code := 'Devolucion Venta CRESCENDO';
          open c_type (v_source_code);
          fetch c_type into v_transaction_type_id;
          close c_type;
            elsif v_tipo = 'SAL' then
            v_source_code := 'Salida Venta CRESCENDO';
            open c_type (v_source_code);
            fetch c_type into v_transaction_type_id;
            close c_type;
            v_transaction_quantity := abs(v_transaction_quantity)*-1;
            elsif v_tipo = 'SIT' then
            v_source_code := 'Transferencia CRESCENDO';
            open c_type (v_source_code);
            fetch c_type into v_transaction_type_id;
            close c_type;
            v_transaction_quantity := abs(v_transaction_quantity);
            else
            v_transaction_type_id := null;
          end if;

      --                      dbms_output.put_line('v_transaction_type:'||v_transaction_type);                      
--                      dbms_output.put_line('v_transaction_type_id:'||v_transaction_type_id);
--                      dbms_output.put_line('v_source_code:'||v_source_code);
--                      dbms_output.put_line('v_transaction_quantity:'||v_transaction_quantity); 

        ELSIF v_num_columna = 11
          THEN
          v_subinventory_to := v_temp;

          --                      dbms_output.put_line('v_subinventory_to:'||v_subinventory_to);

          if v_subinventory_to is null and v_tipo = 'SIT' then

          dbms_output.put_line('El subinventario destino es obligatorio en las transferencias, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'El subinventario destino es obligatorio en las transferencias, error en linea :' ||v_rec_no;
          raise e_continue;

          end if;

          reg_sub_to:=null;
          open c_subinventory (v_subinventory_to,v_to_organization_id);
          fetch c_subinventory into reg_sub_to;
          if c_subinventory%notfound and v_tipo = 'SIT' then
          dbms_output.put_line('El subinventario '||v_subinventory_to||' no existe en la tienda destino '||v_tienda_destino||', error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'El subinventario '||v_subinventory_to||' no existe en la tienda destino '||v_tienda_destino||', error en linea :' ||v_rec_no;
          close c_subinventory;
          raise e_continue;
          end if;
          close c_subinventory;

          v_subinventory_to := reg_sub_to.subinventory_code;

      --                      dbms_output.put_line('Bajo control de localizadores:'||reg_sub_to.locator_control);

        ELSIF v_num_columna = 10 -- TIENDA DESTINO
          THEN
          v_tienda_destino:= v_temp;

          --                        dbms_output.put_line('v_tienda_destino:'||v_tienda_destino);

          if v_tienda_destino is null and v_tipo = 'SIT' then

          dbms_output.put_line('La tienda destino es obligatoria en las transferencias, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'La tienda destino es obligatoria en las transferencias, error en linea :' ||v_rec_no;
          raise e_continue;

          end if;

          open c_orgs (v_tienda_destino);
          fetch c_orgs into v_to_organization_id;
          if c_orgs%notfound and v_tipo = 'SIT' then
          dbms_output.put_line('La tienda destino '||v_tienda_destino||' no existe, error en linea :' ||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'La tienda destino '||v_tienda_destino||' no existe, error en linea :' ||v_rec_no;
          close c_orgs;
          raise e_continue;
          end if;
          close c_orgs;

      --                        dbms_output.put_line('v_to_organization_id:'||v_to_organization_id);

        ELSIF v_num_columna = 12 -- LOCALIZADOR
          THEN
          v_locator_from := v_temp;

          if nvl(reg_sub_from.locator_control,'N') = 'Y' then

          open c_locator (
                  v_organization_id,
                  v_subinventory_code
          );
          fetch c_locator into v_from_locator_id;

          if c_locator%notfound then

          dbms_output.put_line('No hay localizadores definidos para el subinventario '||reg_sub_from.subinventory_code||', Error en linea:'||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'No hay localizadores definidos para el subinventario '||reg_sub_from.subinventory_code||', Error en linea:'||v_rec_no;
          close c_locator;
          raise e_continue;

          end if;

          close c_locator;
            else
            v_locator_from:=null;

          end if;
      --                      
        ELSIF v_num_columna = 13 -- LOCALIZADOR DESTINO
          THEN
          v_locator_to := v_temp;
          --                      
          if nvl(reg_sub_to.locator_control,'N') = 'Y' then

          open c_locator (
                  v_to_organization_id,
                  v_subinventory_to
          );
          fetch c_locator into v_to_locator_id;

          if c_locator%notfound then

          dbms_output.put_line('No hay localizadores definidos para el subinventario '||reg_sub_to.subinventory_code||', Error en linea:'||v_rec_no);
          trx_tabla_err(v_errores).trx_number := v_trx_number;
          trx_tabla_err(v_errores).msg_error := 'No hay localizadores definidos para el subinventario '||reg_sub_to.subinventory_code||', Error en linea:'||v_rec_no;
          close c_locator;
          raise e_continue;

          end if;

          close c_locator;
            else
            v_locator_to := null;
          end if;
        ELSIF v_num_columna = 14 -- FECHA_TARNSACCION
          THEN
          v_transaction_date := NVL(TO_DATE(v_temp,'DD/MM/RRRR'),SYSDATE);
      end if;
      v_num_columna := v_num_columna + 1;
      END LOOP;

    exception
    when e_continue then
      v_errores := v_errores + 1;
      continue;
    when others then
      dbms_output.put_line('Error no esperado: '||sqlerrm);
      trx_tabla_err(v_errores).trx_number := v_trx_number;
      trx_tabla_err(v_errores).msg_error := 'Error no esperado: '||sqlerrm;
      v_errores := v_errores + 1;
      continue;
    end;

    --                    dbms_output.put_line('before c_exists(+)');
    open c_exists (v_trx_number_source,
            v_referencia,
            v_organization_id,
            v_item_number);
    fetch c_exists into reg_exists;

    if c_exists%found then
    dbms_output.put_line('La transaccion ya ha sido cargada anteriormente, referencia: '||v_referencia||' Transaccion; '||v_trx_number||' organization_id: '||v_organization_id||' articulo: '||v_item_number||', Error en linea:'||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_trx_number;
    trx_tabla_err(v_errores).msg_error := 'La transaccion ya ha sido cargada anteriormente, referencia: '||v_referencia||' Transaccion; '||v_trx_number||' organization_id: '||v_organization_id||' articulo: '||v_item_number||', Error en linea:'||v_rec_no;
    v_existe := 'Y';
    close c_exists;
    continue;
      else
      v_existe := 'N';
    end if;

    close c_exists;

    --                    dbms_output.put_line('after c_exists(-)');
                    
--                    dbms_output.put_line('before c_alias(+)');

    if v_tipo = 'SAL' then
    open c_alias (v_organization_id,'Salida Venta POS');
    fetch c_alias into v_disposition_id, v_tipo_flex;
    if c_alias%notfound then
    dbms_output.put_line('El Alias de Cuenta Salida Por Venta no existe en la tienda '||v_almacen||', Error en linea:'||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_trx_number;
    trx_tabla_err(v_errores).msg_error := 'El Alias de Cuenta Salida Por Venta no existe en la tienda '||v_almacen||', Error en linea:'||v_rec_no;
    v_errores := v_errores + 1;
    continue;
    end if;
    close c_alias;
      elsif v_tipo = 'ENT' then
      open c_alias (v_organization_id,'Devolucion Venta POS');
      fetch c_alias into v_disposition_id, v_tipo_flex;
      if c_alias%notfound then
      dbms_output.put_line('El Alias de Cuenta Devolucion de Venta no existe en la tienda '||v_almacen||', Error en linea:'||v_rec_no);
      trx_tabla_err(v_errores).trx_number := v_trx_number;
      trx_tabla_err(v_errores).msg_error := 'El Alias de Cuenta Devolucion de Venta no existe en la tienda '||v_almacen||', Error en linea:'||v_rec_no;
      v_errores := v_errores + 1;
      continue;
      end if;
      close c_alias;
    end if;

    --                      dbms_output.put_line('after c_alias(-)');
                      
--                      dbms_output.put_line('v_disposition_id:'||v_disposition_id);

    reg_lotes := null;
    open c_lotes (v_item_number, v_organization_id);
    fetch c_lotes into reg_lotes;
    if c_lotes%notfound then
    v_articulo_nuevo := 'Y';
    dbms_output.put_line('El articulo '||v_item_number||' no existe en la tienda '||v_almacen||', Error en linea:'||v_rec_no);
    trx_tabla_err(v_errores).trx_number := v_trx_number;
    trx_tabla_err(v_errores).msg_error := 'El articulo '||v_item_number||' no existe en la tienda '||v_almacen||', Error en linea:'||v_rec_no;
    v_errores := v_errores + 1;
    close c_lotes;
    continue;
    end if;
    close c_lotes;

    --                    dbms_output.put_line('reg_lotes.LOT_CONTROL:'||reg_lotes.LOT_CONTROL);
--                    dbms_output.put_line('reg_lotes.serial_number_control_code:'||reg_lotes.serial_number_control_code);

    select MTL_MATERIAL_TRANSACTIONS_S.nextval
      into v_trx_number_source
      from dual;

    if reg_lotes.LOT_CONTROL = 'Y' then
    if reg_lotes.serial_number_control_code = 5 then
    --dbms_output.put_line('El articulo es controlado por lotes y serie');                                
    v_flag_control := 'AMBOS';
      else
      --dbms_output.put_line('El articulo es controlado por lotes');
      v_flag_control := 'LOTE';
    end if;

    -- procedimiento para afectar el lote mas antiguo solicitado por Isaac Ganon
                    --dbms_output.put_line('*********************************************************');
    v_lot_quantity := 0;
    for reg_sub in c_subinventory (v_subinventory_code,v_organization_id) loop
    /*dbms_output.put_line('articulo                 => '|| v_item_number);
                     dbms_output.put_line('v_subinventory_code      => '|| v_subinventory_code);
                     dbms_output.put_line('v_almacen                => '|| v_almacen);
                     dbms_output.put_line('reg_sub.locator_control  => '|| reg_sub.locator_control);*/
    if reg_sub.locator_control = 'Y' then
    v_location_id := null;
    for reg_locator in c_locator  (reg_sub.organization_id, v_subinventory_code) loop
    --                            dbms_output.put_line('reg_locator   => '|| reg_locator.inventory_location_id);                                                                                                                                                                                                                        
    v_cabecera := 'N';
    reg_lots:=null;
    -- para archivo de lotes 
    if v_quantity_aux > 0 then
    open c_lots (reg_lotes.inventory_item_id, reg_sub.organization_id);
    loop
    fetch c_lots into reg_lots;
    if c_lots%notfound then
    v_quantity_aux := 0;
    end if;
    exit when v_quantity_aux = 0;

    INV_Quantity_Tree_PUB.Query_Quantities (
    p_api_version_number    => 1.0
    , p_init_msg_lst        => apps.fnd_api.g_false
    , x_return_status       => L_api_return_status
    , x_msg_count           => l_msg_count
    , x_msg_data            => l_msg_data
    , p_organization_id     => reg_sub.organization_id
    , p_inventory_item_id   => reg_lotes.inventory_item_id
    , p_tree_mode           => apps.INV_Quantity_Tree_PUB.g_transaction_mode
    , p_onhand_source       => 3
    , p_is_revision_control => FALSE
    , p_is_lot_control      => TRUE
    , p_is_serial_control   => v_serial_control
    , p_revision            => NULL
    , p_lot_number          => reg_lots.lot_number
    , p_subinventory_code   => v_subinventory_code
    , p_locator_id          => reg_locator.inventory_location_id
    , x_qoh                 => l_qty_oh --quantity on hand
    , x_rqoh                => l_qty_res_oh --reservable quantity on hand
    , x_qr                  => l_qty_res    -- quantity reserved
    , x_qs                  => l_qty_sug    --quantity suggested
    , x_att                 => l_qty_att   -- available to transact 
    , x_atr                 => l_qty_atr    --available to reserve   
            );

    /* dbms_output.put_line('l_qty_oh                          => '|| l_qty_oh);
                                            dbms_output.put_line('v_quantity_aux                    => '|| v_quantity_aux);
                                            dbms_output.put_line('reg_lots.lot_number               => '|| reg_lots.lot_number);
                                            dbms_output.put_line('v_lot_quantity                    => '|| v_lot_quantity);
                                            dbms_output.put_line('v_transaction_quantity            => '|| v_transaction_quantity);
                                            dbms_output.put_line('v_transaction_interface_id        => '|| v_transaction_interface_id);
                                            dbms_output.put_line('reg_locator.inventory_location_id => '|| reg_locator.inventory_location_id);*/

    if l_qty_oh is not null and l_qty_oh > 0 then

    if l_qty_oh >= v_quantity_aux then -- insetar un lote con la cantidad total

    v_lot_number    := reg_lots.lot_number;
    if v_tipo = 'SAL' then
    v_lot_quantity  := v_quantity_aux * -1;
      else
      v_lot_quantity  := v_quantity_aux;
    end if;
    v_quantity_aux  := 0;

    if v_cabecera = 'N' then

    if v_location_id is not null then

    update mtl_transactions_interface
      set transaction_quantity = v_transaction_quantity
      where transaction_interface_id = v_transaction_interface_id;

    v_transaction_quantity :=  v_lot_quantity;

    if v_tipo = 'SAL' then
    v_transaction_quantity := v_transaction_quantity *-1;
    end if;

    end if;

    -- obtenemos el id de grupo para inventory transaction worker      
    SELECT NVL(MAX(nvl(v_transaction_interface_id,TRANSACTION_ID))+1,0)
      into v_transaction_interface_id
      FROM(
                SELECT TRANSACTION_ID
        FROM mtl_material_transactions
              UNION ALL
                SELECT TRANSACTION_INTERFACE_ID TRANSACTION_ID
        FROM mtl_transactions_interface
              );

    --                              dbms_output.put_line('v_transaction_interface_id:'||v_transaction_interface_id);

    INSERT INTO mtl_transactions_interface
    ( transaction_uom,transaction_date, source_code, source_line_id,
            source_header_id, process_flag, transaction_mode, lock_flag,
    --locator_id, 
            last_update_date, last_updated_by, creation_date,
            created_by, inventory_item_id, subinventory_code,
            organization_id, transaction_source_id,
            transaction_quantity,
    --primary_quantity, 
            transaction_type_id, transaction_reference,
            transaction_interface_id,
            locator_id, transfer_subinventory, transfer_organization, transfer_locator,
            transaction_header_id
    )
            VALUES (reg_lotes.PRIMARY_UOM_CODE,            --transaction uom
                                                             --SYSDATE,                      --transaction date
                    v_transaction_date, --TRANSACTION DATE
                    v_source_code,              --source code
                    v_trx_number_source,           --source line id
                    v_trx_number_source,           --source header id
                                                             --v_trx_number,                 --source line id
                                                             --v_trx_number,                 --source header id
                    1,                            --process flag
                    2,                            --transaction mode
                    2,                            --lock flag                             
                                                             --SYSDATE,                      --last update date
                    sysdate, --last update date
                    0,                            --last updated by
                    sysdate,                      --creation date
                    0,                            --created by
                                                             --v_item_number ,
                    reg_lotes.inventory_item_id,  --inventory item id
                    v_subinventory_code,  --From subinventory code
                    v_organization_id,            --organization id                             
                    v_disposition_id,             --transaction source id (Entrada de Producto Terminado-disposition_id)
                    v_transaction_quantity,       --transaction quantity
                                                             --v_transaction_quantity,       --Primary quantity
                    v_transaction_type_id,
                    v_referencia
                    --,v_trx_number
                    ,v_transaction_interface_id
                    ,reg_locator.inventory_location_id
                    ,v_subinventory_to
                    ,v_to_organization_id
                    ,v_to_locator_id
                    ,v_transaction_header_id
                    );

    end if;

      elsif l_qty_oh < v_quantity_aux then -- insertar dos registros de lote                                                                                                                                                

      v_lot_number   := reg_lots.lot_number;
      if v_tipo = 'SAL' then
      v_lot_quantity := l_qty_oh*-1;
        else
        v_lot_quantity := l_qty_oh;
      end if;
      v_quantity_aux := v_quantity_aux - l_qty_oh;

      if v_cabecera     != 'Y' then

      if v_location_id is not null then

      update mtl_transactions_interface
        set transaction_quantity = v_transaction_quantity
        where transaction_interface_id = v_transaction_interface_id;

      v_transaction_quantity := v_quantity_aux + l_qty_oh;

      if v_tipo = 'SAL' then
      v_transaction_quantity := v_transaction_quantity *-1;
      end if;

      end if;

      -- obtenemos el id de grupo para inventory transaction worker      
      SELECT NVL(MAX(nvl(v_transaction_interface_id,TRANSACTION_ID))+1,0)
        into v_transaction_interface_id
        FROM(
                  SELECT TRANSACTION_ID
          FROM mtl_material_transactions
                UNION ALL
                  SELECT TRANSACTION_INTERFACE_ID TRANSACTION_ID
          FROM mtl_transactions_interface
                );

      --                              dbms_output.put_line('v_transaction_interface_id:'||v_transaction_interface_id);

      INSERT INTO mtl_transactions_interface
      ( transaction_uom,transaction_date, source_code, source_line_id,
              source_header_id, process_flag, transaction_mode, lock_flag,
      --locator_id, 
              last_update_date, last_updated_by, creation_date,
              created_by, inventory_item_id, subinventory_code,
              organization_id, transaction_source_id,
              transaction_quantity,
      --primary_quantity, 
              transaction_type_id, transaction_reference,
              transaction_interface_id,
              locator_id, transfer_subinventory, transfer_organization, transfer_locator,
              transaction_header_id
      )
              VALUES (reg_lotes.PRIMARY_UOM_CODE,            --transaction uom
                      v_transaction_date,                      --transaction date
                      v_source_code,              --source code
                      v_trx_number_source,           --source line id
                      v_trx_number_source,           --source header id
                                                             --v_trx_number,                 --source line id
                                                             --v_trx_number,                 --source header id
                      1,                            --process flag
                      2,                            --transaction mode
                      2,                            --lock flag                             
                      sysdate,                      --last update date
                      0,                            --last updated by
                      sysdate,                      --creation date
                      0,                            --created by
                                                             --v_item_number ,
                      reg_lotes.inventory_item_id,  --inventory item id
                      v_subinventory_code,  --From subinventory code
                      v_organization_id,            --organization id                             
                      v_disposition_id,             --transaction source id (Entrada de Producto Terminado-disposition_id)
                      v_transaction_quantity,       --transaction quantity
                                                             --v_transaction_quantity,       --Primary quantity
                      v_transaction_type_id,
                      v_referencia
                      --,v_trx_number
                      ,v_transaction_interface_id
                      ,reg_locator.inventory_location_id
                      ,v_subinventory_to
                      ,v_to_organization_id
                      ,v_to_locator_id
                      ,v_transaction_header_id
                      );

      v_cabecera     := 'Y';
      v_location_id  := reg_locator.inventory_location_id;
      end if;
    end if;

    INSERT INTO mtl_transaction_lots_interface
    (transaction_interface_id, lot_number,
            transaction_quantity,
            last_update_date, last_updated_by,
            creation_date, created_by
    )
            VALUES (v_transaction_interface_id, v_lot_number,
                    v_lot_quantity,
                    v_last_update_date, v_last_update_by,
                    v_creation_date, v_created_by
                    );

    v_transaction_quantity := v_lot_quantity;

    end if;

    end loop;
    close c_lots;
    end if;

    end loop;

      else -- no es controlado por localizadores

      reg_lots:=null;
      -- para archivo de lotes 
      open c_lots (reg_lotes.inventory_item_id, reg_sub.organization_id);
      loop
      fetch c_lots into reg_lots;
      if c_lots%notfound then
      v_quantity_aux := 0;
      end if;
      exit when v_quantity_aux = 0;

      INV_Quantity_Tree_PUB.Query_Quantities (
      p_api_version_number    => 1.0
      , p_init_msg_lst        => apps.fnd_api.g_false
      , x_return_status       => L_api_return_status
      , x_msg_count           => l_msg_count
      , x_msg_data            => l_msg_data
      , p_organization_id     => reg_sub.organization_id
      , p_inventory_item_id   => reg_lotes.inventory_item_id
      , p_tree_mode           => apps.INV_Quantity_Tree_PUB.g_transaction_mode
      , p_onhand_source       => 3
      , p_is_revision_control => FALSE
      , p_is_lot_control      => TRUE
      , p_is_serial_control   => v_serial_control
      , p_revision            => NULL
      , p_lot_number          => reg_lots.lot_number
      , p_subinventory_code   => v_subinventory_code
      , p_locator_id          => NULL
      , x_qoh                 => l_qty_oh --quantity on hand
      , x_rqoh                => l_qty_res_oh --reservable quantity on hand
      , x_qr                  => l_qty_res    -- quantity reserved
      , x_qs                  => l_qty_sug    --quantity suggested
      , x_att                 => l_qty_att   -- available to transact 
      , x_atr                 => l_qty_atr    --available to reserve   
              );


      if l_qty_oh is not null and l_qty_oh > 0 then

      if l_qty_oh >= v_quantity_aux then -- insetar un lote con la cantidad total

      v_lot_number    := reg_lots.lot_number;
      if v_tipo = 'SAL' then
      v_lot_quantity  := v_quantity_aux*-1;
        else
        v_lot_quantity  := v_quantity_aux;
      end if;
      v_quantity_aux  := 0;

      if v_cabecera = 'N' then

      -- obtenemos el id de grupo para inventory transaction worker      
      SELECT NVL(MAX(nvl(v_transaction_interface_id,TRANSACTION_ID))+1,0)
        into v_transaction_interface_id
        FROM(
                  SELECT TRANSACTION_ID
          FROM mtl_material_transactions
                UNION ALL
                  SELECT TRANSACTION_INTERFACE_ID TRANSACTION_ID
          FROM mtl_transactions_interface
                );

      --                              dbms_output.put_line('v_transaction_interface_id:'||v_transaction_interface_id);

      INSERT INTO mtl_transactions_interface
      ( transaction_uom,transaction_date, source_code, source_line_id,
              source_header_id, process_flag, transaction_mode, lock_flag,
      --locator_id, 
              last_update_date, last_updated_by, creation_date,
              created_by, inventory_item_id, subinventory_code,
              organization_id, transaction_source_id,
              transaction_quantity,
      --primary_quantity, 
              transaction_type_id, transaction_reference,
              transaction_interface_id,
              locator_id, transfer_subinventory, transfer_organization, transfer_locator,
              transaction_header_id
      )
              VALUES (reg_lotes.PRIMARY_UOM_CODE,            --transaction uom
                      v_transaction_date,                      --transaction date
                      v_source_code,              --source code
                      v_trx_number_source,           --source line id
                      v_trx_number_source,           --source header id
                                                             --v_trx_number,                 --source line id
                                                             --v_trx_number,                 --source header id
                      1,                            --process flag
                      2,                            --transaction mode
                      2,                            --lock flag                             
                      sysdate,                      --last update date
                      0,                            --last updated by
                      sysdate,                      --creation date
                      0,                            --created by
                                                             --v_item_number ,
                      reg_lotes.inventory_item_id,  --inventory item id
                      v_subinventory_code,  --From subinventory code
                      v_organization_id,            --organization id                             
                      v_disposition_id,             --transaction source id (Entrada de Producto Terminado-disposition_id)
                      v_transaction_quantity,       --transaction quantity
                                                             --v_transaction_quantity,       --Primary quantity
                      v_transaction_type_id,
                      v_referencia
                      --,v_trx_number
                      ,v_transaction_interface_id
                      ,null
                      ,v_subinventory_to
                      ,v_to_organization_id
                      ,v_to_locator_id
                      ,v_transaction_header_id
                      );

      end if;

        elsif l_qty_oh < v_quantity_aux then -- insertar dos registros de lote                                                                                                                                                

        v_lot_number   := reg_lots.lot_number;
        if v_tipo = 'SAL' then
        v_lot_quantity := l_qty_oh *-1;
          else
          v_lot_quantity := l_qty_oh;
        end if;
        v_quantity_aux := v_quantity_aux - l_qty_oh;

        if v_cabecera     != 'Y' then

        -- obtenemos el id de grupo para inventory transaction worker      
        SELECT NVL(MAX(nvl(v_transaction_interface_id,TRANSACTION_ID))+1,0)
          into v_transaction_interface_id
          FROM(
                    SELECT TRANSACTION_ID
            FROM mtl_material_transactions
                  UNION ALL
                    SELECT TRANSACTION_INTERFACE_ID TRANSACTION_ID
            FROM mtl_transactions_interface
                  );

        --                              dbms_output.put_line('v_transaction_interface_id:'||v_transaction_interface_id);

        INSERT INTO mtl_transactions_interface
        ( transaction_uom,transaction_date, source_code, source_line_id,
                source_header_id, process_flag, transaction_mode, lock_flag,
        --locator_id, 
                last_update_date, last_updated_by, creation_date,
                created_by, inventory_item_id, subinventory_code,
                organization_id, transaction_source_id,
                transaction_quantity,
        --primary_quantity, 
                transaction_type_id, transaction_reference,
                transaction_interface_id,
                locator_id, transfer_subinventory, transfer_organization, transfer_locator,
                transaction_header_id
        )
                VALUES (reg_lotes.PRIMARY_UOM_CODE,            --transaction uom
                        v_transaction_date,                      --transaction date
                        v_source_code,              --source code
                        v_trx_number_source,           --source line id
                        v_trx_number_source,           --source header id
                                                             --v_trx_number,                 --source line id
                                                             --v_trx_number,                 --source header id
                        1,                            --process flag
                        2,                            --transaction mode
                        2,                            --lock flag                             
                        sysdate,                      --last update date
                        0,                            --last updated by
                        sysdate,                      --creation date
                        0,                            --created by
                                                             --v_item_number ,
                        reg_lotes.inventory_item_id,  --inventory item id
                        v_subinventory_code,  --From subinventory code
                        v_organization_id,            --organization id                             
                        v_disposition_id,             --transaction source id (Entrada de Producto Terminado-disposition_id)
                        v_transaction_quantity,       --transaction quantity
                                                             --v_transaction_quantity,       --Primary quantity
                        v_transaction_type_id,
                        v_referencia
                        --,v_trx_number
                        ,v_transaction_interface_id
                        ,null
                        ,v_subinventory_to
                        ,v_to_organization_id
                        ,v_to_locator_id
                        ,v_transaction_header_id
                        );

        v_cabecera     := 'Y';
        end if;
      end if;

      INSERT INTO mtl_transaction_lots_interface
      (transaction_interface_id, lot_number,
              transaction_quantity,
              last_update_date, last_updated_by,
              creation_date, created_by
      )
              VALUES (v_transaction_interface_id, v_lot_number,
                      v_lot_quantity,
                      v_last_update_date, v_last_update_by,
                      v_creation_date, v_created_by
                      );

      end if;

      end loop;
      close c_lots;

    end if;
    end loop;

    if v_quantity_aux > 0 then
    dbms_output.put_line('No hay existencia suficiente para el articulo '|| v_item_number || ' en subinventario '||v_subinventory_code||' y organizacion '||v_almacen);
    dbms_output.put_line('revisar los registros de interface que no fueron importados');
    end if;
    --dbms_output.put_line('*********************************************************');        
      elsif reg_lotes.LOT_CONTROL = 'N' then
      if reg_lotes.serial_number_control_code = 5 then
      --                                dbms_output.put_line('El articulo es controlado por numero de serie');
      v_flag_control := 'SERIAL';
        else
        --dbms_output.put_line('El articulo no tiene control serial ni por lotes');
        v_flag_control := 'NINGUNO';

        INSERT INTO mtl_transactions_interface
        (transaction_uom, transaction_date, source_code, source_line_id,
                source_header_id, process_flag, transaction_mode, lock_flag,
        --locator_id, 
                last_update_date, last_updated_by, creation_date,
                created_by, inventory_item_id, subinventory_code,
                organization_id, transaction_source_id,
                transaction_quantity,
        --primary_quantity, 
                transaction_type_id, transaction_reference,
                locator_id, transfer_subinventory, transfer_organization, transfer_locator,
                transaction_header_id
        )
                VALUES (reg_lotes.PRIMARY_UOM_CODE,    --transaction uom
                        v_transaction_date,                       --transaction date
                        v_source_code,                 --source code
                        v_trx_number_source,           --source line id
                        v_trx_number_source,           --source header id
                                     --v_trx_number,                --source line id
                                     --v_trx_number,                --source header id
                        1,                             --process flag
                        2,                             --transaction mode
                        2,                             --lock flag                             
                        sysdate,                       --last update date
                        0,                             --last updated by
                        sysdate,                       --creation date
                        0,                             --created by
                        reg_lotes.inventory_item_id,   --inventory item id
                        v_subinventory_code,           --From subinventory code
                        v_organization_id,             --organization id                             
                        v_disposition_id,              --transaction source id (Entrada de Producto Terminado-disposition_id)
                        v_transaction_quantity,       --transaction quantity
                                     --v_transaction_quantity,       --Primary quantity
                        v_transaction_type_id,
                        v_referencia,
                        v_from_locator_id,
                        v_subinventory_to,
                        v_to_organization_id,
                        v_to_locator_id,
                        v_transaction_header_id
                        );

      end if;
    end if;                    --          

      elsif v_line_type = 'MTL_LOTES' then
      continue;
      elsif v_line_type = 'MTL_SERIE' then

      --                dbms_output.put_line('*******MTL_SERIE*******');

      v_line_type :=null;
      v_trx_number:=null;
      v_fm_serial_number :=null;


      WHILE v_numcar <= LENGTH (v_line)
      LOOP
      v_temp := '';
      v_car := 'm';

      WHILE (v_car <> '|' AND v_numcar <= LENGTH (v_line))
      LOOP
      v_car := SUBSTR (v_line, v_numcar, 1);

      IF (v_car != '|')
        THEN
        v_temp := v_temp || v_car;
      END IF;

      v_numcar := v_numcar + 1;

      END LOOP;

      v_temp:= ltrim(rtrim(v_temp));

      IF v_num_columna = 1 then
      v_line_type := v_temp;
        elsIF v_num_columna = 2
          THEN
          v_trx_number := v_temp;
      --                      dbms_output.put_line('v_trx_number :'||v_trx_number );  
        ELSIF v_num_columna = 3
          THEN
          v_fm_serial_number  := v_temp;
      --                      dbms_output.put_line('v_fm_serial_number :'||v_fm_serial_number );
      end if;
      v_num_columna := v_num_columna + 1;
      END LOOP;

      if reg_lotes.serial_number_control_code = 5 then
      if v_fm_serial_number is null then
      --dbms_output.put_line('El articulo es controlado por numero de serie y no se especifico numero de serie en el archivo');
      trx_tabla_err(v_errores).trx_number := v_trx_number;
      trx_tabla_err(v_errores).msg_error := 'El articulo es controlado por numero de serie y no se especifico numero de serie en el archivo';
      raise e_serial_number_null;
      end if;
        else
        dbms_output.put_line('El articulo no tiene control serial se omite la informacion');
      end if;


      if  v_flag_control IN ('SERIAL','AMBOS') then

      INSERT INTO mtl_serial_numbers_interface
      (transaction_interface_id, fm_serial_number,
              to_serial_number, last_update_date,
              last_updated_by, creation_date, created_by
      )
              VALUES (v_transaction_interface_id, v_fm_serial_number,
                      v_fm_serial_number, v_last_update_date,
                      v_last_update_by, v_creation_date, v_created_by
                      );

      end if;

    end if;

    v_registros_exitosos := v_registros_exitosos + 1;
  EXCEPTION
  WHEN NO_DATA_FOUND
  THEN
  --apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
    dbms_output.put_line(
    'Lectura de Archivo Correcta'
            );
    EXIT;
  END;
  END LOOP;

  commit;

  SYS.UTL_FILE.fclose (v_data_file);

  --apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
  dbms_output.put_line(
  'Registros totales:  ' || TO_CHAR (v_rec_no)
          );
  --apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
  dbms_output.put_line(
  'Registros exitosos: '
          || TO_CHAR (v_registros_exitosos)
          );

  if v_registros_exitosos > 0 then

  run_program(
  p_header_id    => v_transaction_header_id,
          p_error       => v_error
          );

  --dbms_output.put_line(
           --                   'No se ejecuta el transaction manager, ejecutar manualmente'
             --                );                           


  end if;

  dbms_output.put_line('Resumen de movimientos con errores');
  dbms_output.put_line('***************************************************************');

  if trx_tabla_err.COUNT > 0 then
  dbms_output.put_line('Transaccion|Mensaje de Error');
  for i in trx_tabla_err.first .. trx_tabla_err.last loop

  dbms_output.put_line(trx_tabla_err(i).trx_number||'|'||trx_tabla_err(i).msg_error);
  end loop;

  dbms_output.put_line('***************************************************************');
  dbms_output.put_line('Revisar el log completo para identifacr los errores');

  end if;

  if v_errores > 0 then

  retcode := 1;
  errbuf:='Exitieron errores en la validacion de las lineas del archivo, revisar el LOG completo';
  end if;

  if v_error > 0 then

  dbms_output.put_line('Tienda|Articulo|Error');

  for reg_err in c_errors (v_transaction_header_id) loop

  dbms_output.put_line(reg_err.org||'|'||reg_err.articulo||'|'||reg_err.error_explanation);

  end loop;

  retcode := 2;
  errbuf:='El procesador de Transacciones termino en Error, revisar los LOG creados de cada concurrente';
  end if;



EXCEPTION
  WHEN SYS.UTL_FILE.invalid_path
THEN
--apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
dbms_output.put_line(
'El nombre del archivo o la ruta es invalida.'
);
SYS.UTL_FILE.fclose_all;
ROLLBACK;
retcode := 1;
WHEN SYS.UTL_FILE.invalid_mode
THEN
--apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
dbms_output.put_line(
'El parametro OPEN_MODE en FOPEN es invalido.'
);
SYS.UTL_FILE.fclose_all;
ROLLBACK;
retcode := 1;
WHEN SYS.UTL_FILE.invalid_filehandle
THEN
--apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
dbms_output.put_line(
'El manejador del archivo es invalido.'
);
SYS.UTL_FILE.fclose_all;
ROLLBACK;
retcode := 1;
WHEN SYS.UTL_FILE.invalid_operation
THEN
--apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
dbms_output.put_line(
'El archivo no puede ser abierto u operado como se requiere.'
);
SYS.UTL_FILE.fclose_all;
ROLLBACK;
retcode := 1;
WHEN SYS.UTL_FILE.read_error
THEN
--apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
dbms_output.put_line(
'Un error de operacion de sistema a ocurrido durante la operacion de lectura.'
);
SYS.UTL_FILE.fclose_all;
ROLLBACK;
retcode := 1;
WHEN SYS.UTL_FILE.write_error
THEN
--apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
dbms_output.put_line(
'Un error de operacion de sistema ha ocurrido durante la operacion de escritura.'
);
SYS.UTL_FILE.fclose_all;
ROLLBACK;
retcode := 1;
WHEN SYS.UTL_FILE.internal_error
THEN
--apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
dbms_output.put_line(
'Ocurrio un error interno no especificado en SYS.UTL_FILE.'
);
SYS.UTL_FILE.fclose_all;
ROLLBACK;
retcode := 1;
when e_serial_number_null THEN
retcode:= 2;
rollback;
dbms_output.put_line('Notificando al administrador');
--apps.xxbol_notify_errors(v_role,v_subject,v_body);
when e_lot_number_null THEN
retcode:= 2;
rollback;
dbms_output.put_line('Notificando al administrador');
--apps.xxbol_notify_errors(v_role,v_subject,v_body);
when e_serial_lote_null THEN
retcode:= 2;
rollback;
dbms_output.put_line('Notificando al administrador');
--apps.xxbol_notify_errors(v_role,v_subject,v_body); 
when e_lot_notexists THEN
retcode:= 2;
rollback;
dbms_output.put_line('Notificando al administrador');
--apps.xxbol_notify_errors(v_role,v_subject,v_body);
when e_lotnotfound then
rollback;
dbms_output.put_line('No se encontro el articulo para identificar si es controlado por lote o no, revisar el articulo en la aplicacion');
retcode := 2;
when e_uom_notfound then
rollback;
retcode := 2;
dbms_output.put_line('La unidad de medida '||v_transaction_uom|| ' no existe en Oracle, corregir y volver a intentar');
when e_tipo_incorrecto then
rollback;
retcode := 2;
dbms_output.put_line('El tipo de transaccion: '|| v_tipo ||' no corresponde al alias de cuenta: '|| v_concepto||' corregir el archivo e intentar de nuevo' );
when e_sub_notfound then
rollback;
retcode := 2;
dbms_output.put_line('No se especifico o no existe el subinventario origen o destino corregir el archivo e intentar de nuevo' );
WHEN NO_DATA_FOUND
THEN
--apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
dbms_output.put_line(
'-------       Fin de archivo    --------'
);
SYS.UTL_FILE.fclose_all;
COMMIT;
WHEN OTHERS
THEN
--apps.fnd_file.new_line (apps.fnd_file.LOG, 1);
dbms_output.put_line(
'Termino en Error:' || SQLERRM
);
SYS.UTL_FILE.fclose_all;
ROLLBACK;
retcode := 2;
END ACCOUNT_ALIAS_RECEIPT;

PROCEDURE xxbol_notify_errors(p_role   IN NUMBER,
p_subject IN VARCHAR2,
p_body IN VARCHAR2)
IS

lv_body varchar2(4000);
lv_item_key VARCHAR2(1500);
ln_item_key NUMBER;
ln_save_threshold NUMBER;
lv_role VARCHAR2(100);

BEGIN
  SELECT asp_wf_alerts_s.nextval INTO ln_item_key FROM DUAL;

  SELECT user_name
    INTO   lv_role
    FROM fnd_user
    WHERE user_id = p_role;

  lv_item_key := ' 0001-'|| to_char(ln_item_key);

  lv_body := p_body;

  ln_save_threshold := WF_ENGINE.threshold;
  WF_ENGINE.threshold := -1;
  WF_ENGINE.CreateProcess( itemtype => 'ASO_USER', itemkey => lv_item_key, process => 'ASO_NOTIFY_USER', user_key => lv_item_key);
  WF_ENGINE.SetItemAttrText('ASO_USER', lv_item_key, 'NOTIFICATION_SUBJECT', p_subject);
  WF_ENGINE.SetItemAttrText('ASO_USER', lv_item_key, 'NOTIFICATION_BODY', lv_body);
  WF_ENGINE.SetItemAttrText('ASO_USER', lv_item_key, 'ROLE_TO_NOTIFY', lv_role);
  WF_ENGINE.StartProcess(itemtype => 'ASO_USER', itemkey => lv_item_key);

  COMMIT;

  WF_ENGINE.threshold := ln_save_threshold;

END xxbol_notify_errors;

PROCEDURE recibos
(
ERRBUF    OUT VARCHAR2,
RETCODE   OUT number,
p_file    in varchar2
)
is

cursor c_libro (p_org_code varchar2) is

select hroi.organization_id, hroi.org_information1 gl_id, hroi.org_information3 UO , hraou.name
  from
          hr_all_organization_units hraou,
                  hr_organization_information hroi
  where      hraou.organization_id               = hroi.organization_id
          and     hroi.org_information_context    = 'Accounting Information'
          and exists (
    select 1
    from mtl_parameters mp
    where mp.organization_id = hroi.organization_id
            and mp.organization_code = p_org_code
          );

reg_libro c_libro%rowtype;

cursor c_account (p_receipt_method_id number, p_account_name varchar2, p_currency varchar2)
is

SELECT   *
  FROM ar_receipt_method_accounts_all
  WHERE (  remit_bank_acct_use_id IN (
            SELECT ba.bank_acct_use_id
    FROM ce_bank_acct_uses_all ba,
            ce_bank_accounts cba,
            ce_bank_branches_v bb
    WHERE bb.bank_name LIKE '%'
            AND bb.bank_branch_name LIKE '%'
            AND bb.bank_institution_type = 'BANK'
            AND bb.branch_party_id = cba.bank_branch_id
            AND cba.bank_account_id = ba.bank_account_id
            AND cba.account_classification = 'INTERNAL'
            and cba.bank_account_name = p_account_name
            and cba.currency_code = p_currency
          )
          )
          AND (receipt_method_id = p_receipt_method_id)
  ORDER BY remit_bank_acct_use_id;

reg_account c_account%rowtype;

cursor c_metodo (p_name varchar2)
is
select *
  from   ar_receipt_methods
  where name = p_name
          and sysdate between start_date and nvl(end_date,sysdate);

reg_metodo c_metodo%rowtype;

cursor c_trx (p_cliente varchar2, p_cliente_oracle varchar2,p_trx_number varchar2,p_org_id number) is

SELECT rct.trx_number,APS.customer_id,
        nvl(aps.AMOUNT_DUE_REMAINING,0) AMOUNT,
        rct.org_id,
        C.ACCOUNT_NUMBER,
        aps.INVOICE_CURRENCY_CODE,
        rct.customer_trx_id
  FROM apps.ra_customer_trx_all rct,
          apps.ra_cust_trx_types_all rca,
          apps.ar_payment_schedules_all aps,
          hz_cust_accounts c,
          hz_parties p
  WHERE 1=1
          AND rct.cust_trx_type_id = rca.cust_trx_type_id
          AND rca.org_id = rct.org_id
          AND rca.TYPE = 'INV'
          AND aps.customer_trx_id = rct.customer_trx_id
          AND nvl(aps.AMOUNT_DUE_REMAINING,0)>0
          AND C.CUST_ACCOUNT_ID = APS.customer_id
          AND c.party_id   = p.party_id

          and rct.org_id =   p_org_id
          --and rct.trx_number = p_trx_number
          and rct.interface_header_attribute1 =  p_trx_number
          and (
          (
                  p_cliente_oracle is not null
                          and C.ACCOUNT_NUMBER = p_cliente_oracle
                  )
                  or
                  (
                          p_cliente is not null
                                  and p.ORGANIZATION_NAME_PHONETIC = p_cliente
                          )
          );

reg_trx c_trx%rowtype;

cursor c_receipt (p_receipt varchar2, p_receipt_date date, p_org_id number) is

SELECT ac.*
  FROM ar_cash_receipts_all ac
  WHERE ac.receipt_number = p_receipt
          AND ac.receipt_date = p_receipt_date
          AND ac.org_id =  p_org_id;

reg_receipt c_receipt%rowtype;

l_return_status     VARCHAR2 (1);
l_msg_count         NUMBER;
l_msg_data          VARCHAR2 (240);
l_count             NUMBER;
l_cash_receipt_id   NUMBER;
l_msg_data_out      VARCHAR2 (240);
l_mesg              VARCHAR2 (240);
p_count             NUMBER;

v_FILE_pay          SYS.UTL_FILE.file_type;
V_LINE              VARCHAR2(5000);
v_rec_no            number:=0;
v_path              varchar2(1000):='INCRS_TOP';
v_substr            varchar2(5000);

v_payment_date      date;
v_importe           number;
v_importe_aplicar   number;
v_amount_applied_from    number;
v_cheque            varchar2(30);
v_cliente           varchar2(200);
v_cliente_oracle    varchar2(200);
v_transaccion       varchar2(200);
v_referencia        varchar2(200);
v_cuenta            varchar2(200);
v_metodo            varchar2(200);
v_moneda            varchar2(200);
v_tipo_cambio       varchar2(200);
v_tienda            varchar2(200);
v_exchange_rate_type varchar2(200);
l_cr_id              number;
v_amount_applied     number;
v_errores            number:=0;
v_trans_to_receipt_rate number;

trx_tabla_err           trx_tbl_type;

BEGIN

trx_tabla_err.delete;

  dbms_output.put_line( 'Ruta: ' || v_path);
  dbms_output.put_line( 'Archivo: ' || p_file);
  v_file_pay := SYS.UTL_FILE.fopen (v_path, p_file, 'r');
  dbms_output.put_line( 'Archivo abierto');
  --apps.fnd_file.new_line (apps.fnd_file.LOG, 1);      

  v_line:=null;
  --LECTURA ARCHIVO
  LOOP

  begin
    SYS.UTL_FILE.get_line (v_file_pay, v_line);
  exception
  when no_data_found then
    v_line := null;
  end;
  exit when v_line is null;

  dbms_output.put_line( v_line);

  v_importe:=null;
  v_payment_date:=null;
  v_cheque:=null;
  v_cliente:=null;
  v_transaccion:=null;
  v_referencia:=null;
  v_cuenta    :=null;
  v_metodo    :=null;
  v_moneda    :=null;
  v_tipo_cambio:=null;
  v_tienda:=null;
  v_trans_to_receipt_rate:=null;
  v_exchange_rate_type := null;
  v_amount_applied_from:=null;
  v_trans_to_receipt_rate:=null;

  for i in 1..13 loop

  v_substr:= trim(substr(v_line,1,INSTR(v_line,'|')-1));

  if i = 1 then       -- fecha de pago   
  v_payment_date:= to_date(v_substr,'DD/MM/RRRR');
  --                dbms_output.put_line( 'v_payment_date:  '||v_payment_date);
  v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 2 then    -- IMPORTE DEL PAGO
    v_importe:= v_substr;
    --                dbms_output.put_line( 'v_importe:  '||v_importe);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 3 then    -- cheque
    v_cheque:= v_substr;
    --                dbms_output.put_line( 'v_cheque:  '||v_cheque);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 4 then    -- cliente crescendo
    v_cliente:= v_substr;
    --                dbms_output.put_line( 'v_cliente:  '||v_cliente);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 5 then    -- cliente oracle
    v_cliente_oracle:= v_substr;
    --                dbms_output.put_line( 'v_cliente_oracle:  '||v_cliente_oracle);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 6 then    -- transaccion
    v_transaccion:= v_substr;
    --                dbms_output.put_line( 'v_transaccion:  '||v_transaccion);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 7 then -- referencia
    v_referencia:= v_substr;
    --                dbms_output.put_line( 'v_referencia:  '||v_referencia);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 8 then -- cuenta                   
    v_cuenta:= v_substr;
    --                dbms_output.put_line( 'v_cuenta:  '||v_cuenta);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 9 then -- metodo de pago
    v_metodo:= v_substr;
    --                dbms_output.put_line( 'v_metodo:  '||v_metodo);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 10 then -- moneda
    v_moneda:= v_substr;
    --                dbms_output.put_line( 'v_moneda:  '||v_moneda);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);

    elsif i = 11 then -- tipo de cambio
    v_tipo_cambio:= v_substr;
    --                dbms_output.put_line( 'v_tipo_cambio:  '||v_tipo_cambio);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 12 then -- tienda
    v_tienda:= v_substr;
    --                dbms_output.put_line( 'v_tienda:  '||v_tienda);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
    elsif i = 13 then --importe a aplicar
    v_importe_aplicar:= v_substr;
    --                dbms_output.put_line( 'v_importe_aplicar:  '||v_importe_aplicar);
    v_line:= substr(v_line,INSTR(v_line,'|')+1);
  end if;
  end loop;

  reg_libro:=null;
  open c_libro (v_tienda);
  fetch c_libro into reg_libro;
  if c_libro%notfound then
  close c_libro;
  dbms_output.put_line('La tienda '||v_tienda||' no existe en oracle');
  trx_tabla_err(v_errores).trx_number := v_cheque;
  trx_tabla_err(v_errores).msg_error := 'La tienda '||v_tienda||' no existe en oracle';
  --v_trx_cont := v_trx_cont + 1;
  v_errores := v_errores + 1;
  continue;
  end if;
  close c_libro;

  /* si se ejecuta fuera de un concurrente*/
  fnd_global.APPS_INITIALIZE (0,20678,222,0,7121);
  apps.fnd_client_info.set_org_context(reg_libro.uo);
  MO_GLOBAL.INIT('AR');
  --MO_GLOBAL.SET_POLICY_CONTEXT('S', 81);
  commit;

  --dbms_output.put_line('reg_libro.uo: '||reg_libro.uo);

  reg_trx:=null;
  open c_trx (v_cliente,v_cliente_oracle, v_transaccion, reg_libro.uo);
  fetch c_trx into reg_trx;
  if c_trx%notfound then
  close c_trx;
  dbms_output.put_line('La transaccion '||v_transaccion||' no se encuentra en Oracle o ya esta cerrada');
  trx_tabla_err(v_errores).trx_number := v_cheque;
  trx_tabla_err(v_errores).msg_error := 'La transaccion '||v_transaccion||' no se encuentra en Oracle o ya esta cerrada';
  v_errores := v_errores + 1;
  continue;
    else

    if  reg_trx.invoice_currency_code = 'USD' AND v_moneda = 'MXN' THEN
    v_exchange_rate_type := null;
    v_amount_applied_from := null;
    v_importe_aplicar:= v_importe_aplicar / round(v_tipo_cambio,5);
    v_trans_to_receipt_rate := round(v_tipo_cambio,5);
    v_tipo_cambio := null;
    elsif  reg_trx.invoice_currency_code = 'MXN' AND v_moneda = 'USD' THEN
    v_exchange_rate_type := 'User';
    v_amount_applied_from := v_importe_aplicar;
    v_importe_aplicar:= v_importe_aplicar * round(v_tipo_cambio,5);
    v_trans_to_receipt_rate := null;
    elsif  reg_trx.invoice_currency_code = 'USD' and v_moneda = 'USD' then
    v_amount_applied_from := null;
    v_exchange_rate_type := 'User';
    v_trans_to_receipt_rate:=null;
    else
    v_exchange_rate_type := null;
    v_tipo_cambio:=null;
    v_amount_applied_from:=null;
    v_trans_to_receipt_rate:=null;
  END IF;

  /*dbms_output.put_line('reg_trx.invoice_currency_code: '||reg_trx.invoice_currency_code);
            dbms_output.put_line('v_moneda: '||v_moneda);
            dbms_output.put_line('v_tipo_cambio: '||v_tipo_cambio);
            dbms_output.put_line('v_exchange_rate_type: '||v_exchange_rate_type);
            dbms_output.put_line('v_amount_applied_from: '||v_amount_applied_from);
            dbms_output.put_line('v_importe_aplicar: '||v_importe_aplicar);*/

  end if;
  close c_trx;

  reg_metodo:=null;
  open c_metodo (v_metodo);
  fetch c_metodo into reg_metodo;
  if c_metodo%notfound then
  close c_metodo;
  dbms_output.put_line('metodo de pago invalido '||v_metodo);
  trx_tabla_err(v_errores).trx_number := v_cheque;
  trx_tabla_err(v_errores).msg_error := 'metodo de pago invalido '||v_metodo;
  v_errores := v_errores + 1;
  continue;
  end if;
  close c_metodo;

  reg_account:=null;
  open c_account (reg_metodo.receipt_method_id, v_cuenta, v_moneda);
  fetch c_account into reg_account;
  if c_account%notfound then
  close c_account;
  dbms_output.put_line('Nombre de cuenta no existe en Oracle '||v_cuenta||' para el metodo de pago '||v_metodo||' y moneda '||v_moneda);
  trx_tabla_err(v_errores).trx_number := v_cheque;
  trx_tabla_err(v_errores).msg_error := 'Nombre de cuenta no existe en Oracle '||v_cuenta||' para el metodo de pago '||v_metodo||' y moneda '||v_moneda;
  v_errores := v_errores + 1;
  continue;
  end if;
  close c_account;

  -- Api start here

  reg_receipt:=null;
  open c_receipt (v_cheque, v_payment_date, reg_libro.uo);
  fetch c_receipt into reg_receipt;
  if c_receipt%notfound then
  l_msg_count:=null;
  l_msg_count:=0;
  l_return_status:=null;
  --        dbms_output.put_line('creando recibo...'||v_cheque);
        --arp_standard.enable_debug;
        --arp_standard.enable_file_debug('INCRS_TOP', 'CREATE_CASH.log');
  ar_receipt_api_pub.create_cash
          (p_api_version                 => 1.0,
          p_init_msg_list               => fnd_api.g_true,
          p_receipt_number              => v_cheque,
          p_amount                      => v_importe,
          p_receipt_method_id           => reg_metodo.receipt_method_id,
          p_remittance_bank_account_id  => reg_account.REMIT_BANK_ACCT_USE_ID,
          p_customer_number             => reg_trx.ACCOUNT_NUMBER,
          p_cr_id                       => l_cr_id,
          p_receipt_date                => v_payment_date,
          p_gl_date                     => v_payment_date,
          x_return_status               => l_return_status,
          x_msg_count                   => l_msg_count,
          x_msg_data                    => l_msg_data,
          p_currency_code               => v_moneda,
          p_exchange_rate_type          => v_exchange_rate_type,
          p_exchange_rate               => v_tipo_cambio,
          p_org_id                      => reg_libro.uo
          );
    else
    l_cr_id:= reg_receipt.cash_receipt_id;
    v_importe_aplicar := reg_receipt.amount;
  end if;
  close c_receipt;

  dbms_output.put_line('id de recibo creado => '||l_cr_id);

  IF l_return_status = FND_API.G_RET_STS_ERROR and nvl(l_cr_id,0) = 0 then

  IF l_msg_count = 1
    THEN
    dbms_output.put_line('l_msg_data ' || l_msg_data);
    trx_tabla_err(v_errores).trx_number := v_cheque;
    trx_tabla_err(v_errores).msg_error := l_msg_data;
    v_errores := v_errores + 1;
    continue;
    ELSIF l_msg_count > 1
      THEN
      LOOP
      p_count := p_count + 1;
      l_msg_data := fnd_msg_pub.get (fnd_msg_pub.g_next, fnd_api.g_false);

      IF l_msg_data IS NULL
        THEN
        EXIT;
      END IF;

      dbms_output.put_line('Message' || p_count || ' ---' || l_msg_data);
      END LOOP;
      trx_tabla_err(v_errores).trx_number := v_cheque;
      trx_tabla_err(v_errores).msg_error := l_msg_data;
      v_errores := v_errores + 1;
      continue;
  end if;
    else
    IF nvl(l_cr_id,0) > 0 THEN
    l_msg_count:=null;
    l_msg_count:=0;
    l_return_status:=null;
    if reg_trx.amount <= v_importe_aplicar then
    v_importe_aplicar :=  trunc(reg_trx.amount,5);
    end if;
    dbms_output.put_line('aplicando importe...'||v_importe_aplicar);
    ar_receipt_api_pub.APPLY
            (p_api_version              => 1.0,
            p_init_msg_list            => fnd_api.g_true,
            p_commit                   => fnd_api.g_true,
            p_validation_level         => fnd_api.g_valid_level_full,
            p_cash_receipt_id          => l_cr_id,
            p_customer_trx_id          => reg_trx.customer_trx_id,
            p_amount_applied           => v_importe_aplicar,
            p_amount_applied_from      => v_amount_applied_from,
            p_trans_to_receipt_rate    => v_trans_to_receipt_rate,
            p_apply_date               => v_payment_date,--SYSDATE,                            
            x_return_status            => l_return_status,
            x_msg_count                => l_msg_count,
            x_msg_data                 => l_msg_data,
            p_org_id                   => reg_libro.uo
            );
    --            dbms_output.put_line('Message count ' || l_msg_count);
--               dbms_output.put_line('Cash Receipt ID ' || l_cr_id);

    IF l_msg_count = 1
      THEN
      dbms_output.put_line('l_msg_data ' || l_msg_data);
      trx_tabla_err(v_errores).trx_number := v_cheque;
      trx_tabla_err(v_errores).msg_error := l_msg_data;
      v_errores := v_errores + 1;
      continue;
      ELSIF l_msg_count > 1
        THEN
        LOOP
        p_count := p_count + 1;
        l_msg_data := fnd_msg_pub.get (fnd_msg_pub.g_next, fnd_api.g_false);

        IF l_msg_data IS NULL
          THEN
          EXIT;
        END IF;

        dbms_output.put_line('Message' || p_count || ' ---' || l_msg_data);
        END LOOP;
        trx_tabla_err(v_errores).trx_number := v_cheque;
        trx_tabla_err(v_errores).msg_error := l_msg_data;
        v_errores := v_errores + 1;
        continue;
      else
      dbms_output.put_line('Importe aplicado correctamente');
    END IF;
  end if;
END IF;
end loop;

if trx_tabla_err.COUNT > 0 then

dbms_output.put_line('Resumen de Recibos no creados o no aplicados:');
dbms_output.put_line('***************************************************************');
dbms_output.put_line('Recibo|Mensaje de Error');
for i in trx_tabla_err.first .. trx_tabla_err.last loop

dbms_output.put_line(trx_tabla_err(i).trx_number||'|'||trx_tabla_err(i).msg_error);
end loop;

dbms_output.put_line('***************************************************************');
dbms_output.put_line('Revisar el log completo para identifacr los errores');

end if;


if v_errores > 0 then


RETCODE := 1;
ERRBUF:='Exitieron errores en la generacion de recibos del archivo '||p_file||', corregir';

end if;

SYS.UTL_FILE.fclose (v_file_pay);

END recibos;


procedure salidas
is
type XXBOL_LOT_QUANTITIES_TYPE IS RECORD
(
PRODUCTO    VARCHAR2(240 BYTE),
ITEM_ID     NUMBER,
LOTE        VARCHAR2(250 BYTE),
EXIS        NUMBER,
INICIAL     NUMBER,
MOVIMIENTO  VARCHAR2(100 BYTE),
FECHA       VARCHAR2(10 BYTE),
SUCURSAL    NUMBER,
PARTIDA     NUMBER,
LOCATOR_ID  NUMBER,
LOCALIZADOR VARCHAR2(240 BYTE),
secondary_inventory_name VARCHAR2(240 BYTE),
SERIAL_NUMBER   VARCHAR2(240 BYTE)
);

type XXBOL_MTL_SYSTEM_ITEMS_TYPE IS RECORD
(
PRODUCTO                  VARCHAR2(40 BYTE),
CODIGO                    VARCHAR2(240 BYTE),
LOCALIZADOR               VARCHAR2(160 BYTE),
DESCRIPTION1              VARCHAR2(240 BYTE),
DESCRIPTION2              VARCHAR2(240 BYTE),
DESCRIPTION3              VARCHAR2(240 BYTE),
PROVEEDOR1                NUMBER,
PROVEEDOR2                NUMBER,
INVENTORY_ITEM_FLAG       VARCHAR2(1 BYTE),
KIT                       VARCHAR2(1 BYTE),
LOT_CONTROL               VARCHAR2(1 BYTE),
SERIAL_CONTROL            VARCHAR2(1 BYTE),
LINEA                     VARCHAR2(40 BYTE),
SUBLINEA                  VARCHAR2(40 BYTE),
MARCA                     VARCHAR2(40 BYTE),
IMPUESTO                  NUMBER,
SUBSTITUTO                VARCHAR2(40 BYTE),
UNIDAD                    VARCHAR2(25 BYTE),
ALTA                      VARCHAR2(10 BYTE),
MODIFICADO                VARCHAR2(10 BYTE),
MONEDA                    VARCHAR2(30 BYTE),
NOTAS                     VARCHAR2(240 BYTE),
PRECIO1                   number,
PRECIO2                   number,
PRECIO3                   number,
PRECIO4                   number,
PRECIO5                   number,
PRECIO6                   number,
PRECIO7                   number,
PRECIO8                   number,
PRECIOG                   number,
PRECIOP                   number,
COSTO_PROM                NUMBER,
COSTO_REPO                NUMBER,
COSTO_UL                  NUMBER,
DESCUENTO1                NUMBER,
DESCUENTO2                NUMBER,
DESCUENTO3                NUMBER,
EXIS                      NUMBER,
EXIS0                     NUMBER,
EXIS1                     NUMBER,
EXIS2                     NUMBER,
EXIS3                     NUMBER,
EXIS4                     NUMBER,
EXIS5                     NUMBER,
EXIS6                     NUMBER,
EXIS7                     NUMBER,
EXIS8                     NUMBER,
EXIS9                     NUMBER,
EXIS10                    NUMBER,
EXIS11                    NUMBER,
EXIS12                    NUMBER,
EXIS13                    NUMBER,
EXIS14                    NUMBER,
EXIS15                    NUMBER,
EXIS16                    NUMBER,
EXIS17                    NUMBER,
EXIS18                    NUMBER,
EXIS19                    NUMBER,
EXIS20                    NUMBER,
EXIS21                    NUMBER,
EXIS22                    NUMBER,
EXIS23                    NUMBER,
EXIS24                    NUMBER,
EXIS25                    NUMBER,
EXIS26                    NUMBER,
EXIS27                    NUMBER,
EXIS28                    NUMBER,
EXIS29                    NUMBER,
EXIS30                    NUMBER,
EXIS31                    NUMBER,
EXIS32                    NUMBER,
EXIS33                    NUMBER,
EXIS34                    NUMBER,
EXIS35                    NUMBER,
EXIS36                    NUMBER,
EXIS37                    NUMBER,
EXIS38                    NUMBER,
EXIS39                    NUMBER,
EXIS40                    NUMBER,
EXIS41                    NUMBER,
EXIS42                    NUMBER,
EXIS43                    NUMBER,
EXIS44                    NUMBER,
EXIS45                    NUMBER,
EXIS46                    NUMBER,
EXIS47                    NUMBER,
EXIS48                    NUMBER,
EXIS49                    NUMBER,
EXIS50                    NUMBER,
EXIS51                    NUMBER,
EXIS52                    NUMBER,
EXIS53                    NUMBER,
EXIS54                    NUMBER,
INVENTORY_ITEM_ID         NUMBER,
PLANNING_MAKE_BUY_CODE    NUMBER
);

type XXBOL_CLIENTES_TYPE IS RECORD
(
CLIENTE     VARCHAR2(240),
CLIENTE_ORACLE VARCHAR2(240),
RFC         VARCHAR2(80),
CURP        VARCHAR2(80),
NOMBRE      VARCHAR2(240),
NOMBRE2     VARCHAR2(240),
CALLE       VARCHAR2(240),
COLONIA     VARCHAR2(240),
ESTADO      VARCHAR2(240),
CIUDAD      VARCHAR2(240),
CP          VARCHAR2(240),
TELEFONO    VARCHAR2(240),
TELEFONO2   VARCHAR2(240),
CONTACTO    VARCHAR2(240),
CONTACTO2   VARCHAR2(240),
VENDEDOR    VARCHAR2(240),
CLASIFICA   VARCHAR2(10),
TIPO        VARCHAR2(240),
TIPOCTE     VARCHAR2(240),
GIRO        VARCHAR2(240),
CLEDO       VARCHAR2(240),
DIAS        NUMBER,
LIMITE      NUMBER,
ALTA        VARCHAR2(10),
DESCUENTO   NUMBER,
BLOQUEADO   VARCHAR2(1),
BLOQUEONOT  VARCHAR2(240),
ENTREGA     VARCHAR2(240),
EMAIL       VARCHAR2(240),
HOMEPAGE    VARCHAR2(240),
SITE_USE_ID NUMBER,
PARTY_ID    NUMBER,
CUST_ACCOUNT_ID NUMBER,
PRICE_LIST_ID   NUMBER,
SALESREP_ID     NUMBER,
created_date    date,
last_update_date date
);
/*V_IP            varchar2(100):='10.97.0.81';--'10.1.30.59';
v_usuario_ftp   varchar2(100):='blanco';
v_passw_ftp     varchar2(100):='posadas';
v_path_in       varchar2(100):='/INP/';*/
V_IP            varchar2(100):='10.1.30.223';
v_usuario_ftp   varchar2(100):='crescendo';
v_passw_ftp     varchar2(100):='@dmin2011';
v_path_in       varchar2(100):='/INP/';

--retcode number;
L_api_return_status VARCHAR2(1);
l_qty_oh NUMBER;
l_qty_res_oh NUMBER;
l_qty_res NUMBER;
l_qty_sug NUMBER;
l_qty_att NUMBER;
l_qty_atr NUMBER;
l_msg_count NUMBER;
l_msg_data VARCHAR2(1000);

cursor c_org_customer (p_ou_id number) is
select *
  from mtl_parameters mp
  where exists (
    select hroi.organization_id, hroi.org_information1 gl_id, hroi.org_information3 UO , hraou.name
    from
            hr_all_organization_units hraou,
                    hr_organization_information hroi
    where      hraou.organization_id               = hroi.organization_id
            and     hroi.org_information_context    = 'Accounting Information'
            and mp.organization_id = hroi.organization_id
            and hroi.org_information3 = p_ou_id
          );

cursor c_contactos (p_cust_account_id in number) is

select g.party_name  CONTACTO,
        h.raw_phone_number phone_contact,
        upper(d.job_title) titulo,
        d.JOB_TITLE_CODE,
        d.status status_contacto,
        A.PARTY_ID
  from  hz_org_contacts d,
          hz_relationships a,
          hz_parties g,
          hz_cust_account_roles hcar,
          (
                    SELECT *
            FROM hz_contact_points cp
            where cp.owner_table_name(+) = 'HZ_PARTIES'
                    and cp.contact_point_type = 'PHONE'
                    AND cp.status = 'A'
                    AND CP.PHONE_LINE_TYPE = 'GEN'
                    AND CP.PRIMARY_FLAG = 'Y'
                  ) h
  where d.party_relationship_id          = a.relationship_id
          AND a.subject_table_name             = 'HZ_PARTIES'
          AND a.object_table_name              = 'HZ_PARTIES'
          AND a.directional_flag               = 'F'
          and a.relationship_code(+)           = 'CONTACT_OF'
          and g.party_id                       = a.subject_id(+)
          and hcar.cust_account_id             = p_CUST_ACCOUNT_ID
          AND hcar.role_type                   = 'CONTACT'
          AND hcar.party_id                    = a.party_id
          AND a.party_id                       = h.owner_table_id(+);

cursor c_party_sites (p_contact_point_type varchar2, p_party_id number, p_phone_line_type varchar2) is
SELECT *
  FROM hz_contact_points cp
  where cp.owner_table_name = 'HZ_PARTIES'
          and cp.contact_point_type = p_contact_point_type--'WEB'
          AND cp.status = 'A'
          --AND CP.PRIMARY_FLAG = 'Y'
          AND
          (
                  ( p_phone_line_type is not null
                          and CP.PHONE_LINE_TYPE = p_phone_line_type
                          )
                          or
                          (
                                  p_phone_line_type is null
                                  )
                  )
          AND cp.owner_table_id = p_party_id;

cursor c_clientes is

SELECT *
  FROM
          (
                    select distinct
                            lpad(c.account_number,6,'0') cliente_oracle,
                            p.ORGANIZATION_NAME_PHONETIC CLIENTE,
                            p.jgzz_fiscal_code RFC,
                            null CURP,
                            p.party_name NOMBRE,
                            '*' NOMBRE2,
                            lo.address1 CALLE,
                            case
                              when lo.address3 is null and lo.address4 is not null
                              then trim(lo.address2) || ', ' ||  trim(lo.address4)
                              when lo.address3 is not null and lo.address4 is not null
                              then trim(lo.address2) || ', ' ||  trim(lo.address3) || ', '|| trim(lo.address4)
                              when lo.address3 is not null and lo.address4 is null
                              then trim(lo.address2) || ', ' ||  trim(lo.address3)
                                    else trim(lo.address2)
                                    end COLONIA,
                            lo.state estado,
                            case when lo.city is not null then
                                    lo.city
                                    end ciudad,
                            lo.postal_code cp,
                            (SELECT DISTINCT S.SALESREP_NUMBER
                              FROM RA_SALESREPS_ALL S
                              WHERE  S.status = 'A'
                                      and s.salesrep_id = CSU.primary_salesrep_id
                                      AND sysdate between s.start_date_active
                                      and nvl(s.end_date_active,to_date('4712/12/31','RRRR/mm/DD'))
                                    ) VENDEDOR,
                            (
                                      select headers.attribute1
                              from qp_secu_list_headers_v headers
                              where headers.list_header_id = CSU.PRICE_LIST_ID
                                    ) CLASIFICA,
                            p.PARTY_ID,
                    --csu.SITE_USE_ID,
                     --CSU.PRICE_LIST_ID,
                     --csu.CUST_ACCT_SITE_ID,
                     --CSU.primary_salesrep_id,
                            c.CUST_ACCOUNT_ID,
                    --ps.PARTY_SITE_ID,
                            csu.primary_flag,
                    --hr_general.decode_organization(csu.org_id) uo,
                            case when P.ATTRIBUTE1 is not null then 'FABRICANTE'
                              when p.attribute2 is not null then 'DISTRIBUIDOR'
                              WHEN  P.ATTRIBUTE3 is not null then 'OTRO'
                                    ELSE NULL
                                    end TIPO,
                            case when  P.ATTRIBUTE1 is not null then (
                                      SELECT v_val.description
                              FROM fnd_flex_vset_v    v_set
                                      ,fnd_flex_values_vl v_val
                              WHERE 1 = 1
                                      AND v_set.flex_value_set_id = v_val.flex_value_set_id
                                      AND v_set.parent_value_set_name = 'LOV_SEG_FAB'--LOV_SEG_DIST
                                      and v_val.enabled_flag = 'Y'
                                      and P.ATTRIBUTE1 = v_val.flex_value_meaning)
                              when  p.attribute2 is not null then (
                                        SELECT v_val.description
                                FROM fnd_flex_vset_v    v_set
                                        ,fnd_flex_values_vl v_val
                                WHERE 1 = 1
                                        AND v_set.flex_value_set_id = v_val.flex_value_set_id
                                        AND v_set.parent_value_set_name = 'LOV_SEG_DIST'
                                        and v_val.enabled_flag = 'Y'
                                        and P.ATTRIBUTE2 = v_val.flex_value_meaning)
                              WHEN  P.ATTRIBUTE3 is not null then P.ATTRIBUTE3
                                    ELSE NULL
                                    end GIRO,
                            '0' DIAS,
                    --                     nvl((SELECT CASE WHEN TERM.NAME = 'CONTADO' THEN '0'
--                                  ELSE SUBSTR(TERM.NAME,1,INSTR(TERM.NAME,' ')-1)
--                             END DIAS 
--                    FROM ra_terms_tl term,
--                         hz_customer_profiles pro
--                    WHERE term.LANGUAGE = 'ESA'                    
--                    and pro.cust_account_id = c.cust_account_id
--                    and pro.STANDARD_TERMS =  term.TERM_ID
--                    ),'0')  DIAS,
                            nvl((
                                      select OVERALL_CREDIT_LIMIT
                              from hz_cust_profile_amts amts,
                                      hz_customer_profiles pf,
                                      hz_cust_profile_classes pc
                              where amts.CUST_ACCOUNT_PROFILE_ID   = pf.CUST_ACCOUNT_PROFILE_ID
                                      AND pf.profile_class_id              = pc.profile_class_id
                                      and amts.cust_account_id = pf.cust_account_id
                                      and amts.site_use_id is null
                                      and pf.cust_account_id  = c.cust_account_id
                                      and nvl(pf.CREDIT_CHECKING,'N') = 'Y'
                                    ),'0') limite,
                    --amts.trx_credit_limit LIMITE,
--                    pf.CREDIT_CHECKING,
                            TO_CHAR(C.CREATION_DATE,'DD/MM/RRRR') ALTA,
                            case when nvl(csu.status,'A') != 'A' or nvl(p.status,'A') !='A' or nvl(c.status,'A') !='A' then
                                    'S'
                                    else 'N'
                                    end  BLOQUEADO,
                            case when nvl(csu.status,'A') != 'A' or nvl(p.status,'A') !='A' or nvl(c.status,'A') !='A' then
                                    'CUENTA DESACTIVADA'
                                    else '*'
                                    end  BLOQUEONOT
            FROM hz_cust_accounts c,
                    hz_parties p,
                    hz_cust_acct_sites_all st,
                    hz_party_sites ps,
                    hz_locations lo,
                    FND_TERRITORIES_VL trr,
                    hz_cust_site_uses_all csu,
                    ar_lookups lu
            WHERE c.party_id                      = p.party_id
                    --AND c.cust_account_id                = pf.cust_account_id
               --and pf.site_use_id (+)               =  csu.site_use_id               
                    AND c.cust_account_id                = st.cust_account_id
                    AND st.party_site_id                 = ps.party_site_id
                    AND ps.location_id                   = lo.location_id
                    AND lo.COUNTRY                       = trr.TERRITORY_CODE(+)
                    and csu.CUST_ACCT_SITE_ID            = st.CUST_ACCT_SITE_ID
                    and lu.lookup_type                   = 'SITE_USE_CODE'
                    AND lu.lookup_code                   = csu.site_use_code
                    AND p.party_type = 'ORGANIZATION'
                    --               AND csu.status                       = 'A'
                    AND csu.primary_flag                 = 'Y'
                    AND csu.org_id                       = st.org_id
                    AND csu.org_id                       = st.org_id
                    AND csu.SITE_USE_CODE                ='BILL_TO'
                    and p.ORGANIZATION_NAME_PHONETIC is not null
                  --and hr_general.decode_organization(csu.org_id) = 'UO_DCH' --- FALTA QUE CRESCENDO CONFIRME COMO QUIERE LOS CLIENTES
                  /*AND p.jgzz_fiscal_code IS NOT NULL
               AND p.jgzz_fiscal_code !='.'*/
                  /*AND (P.ATTRIBUTE1 is not null
                   or p.attribute2 is not null                     
                   or p.attribute3 is not null
                   )*/
                  )
          DATOS
        /*WHERE datos.NOMBRE IS NOT NULL
            AND datos.CALLE IS NOT NULL
            AND datos.COLONIA IS NOT NULL
            AND datos.ESTADO IS NOT NULL
            AND datos.CIUDAD IS NOT NULL
            AND datos.CP is not null*/
  order by datos.cliente_oracle
;

reg_clientes c_clientes%rowtype;

cursor c_lotes (p_item_id number, p_org_id number) is
select *
  from mtl_lot_numbers
  where inventory_item_id = p_item_id
          and organization_id = p_org_id;

reg_lotes c_lotes%rowtype;
cursor c_locator (p_org_id number, p_sub varchar2) is
select segment1||segment2||segment3||segment4 locator, inventory_location_id
  from MTL_ITEM_LOCATIONS
  where organization_id=p_org_id
          and subinventory_code = p_sub;

reg_locator c_locator%rowtype;

CURSOR c_existencias is

select  msi_master.segment1 producto,
        msi_master.attribute3 codigo,
        null localizador,
--msi_master.description description1,  
        nvl((select ltrim(rtrim(iteml.long_description,chr(10)),chr(10)) long_description
          from mtl_system_items_tl iteml
          where 1=1
                  AND msi_master.inventory_item_id = iteml.inventory_item_id(+)
                  AND msi_master.organization_id = iteml.organization_id(+)
                  AND iteml.LANGUAGE(+) = 'ESA'),msi_master.description) description1,
        null description2,
        null description3,
        null proveedor1,
        null proveedor2,
        decode(msi_master.INVENTORY_ITEM_FLAG,'Y','S',nvl(msi_master.INVENTORY_ITEM_FLAG,'N')) INVENTORY_ITEM_FLAG,
        decode(msi_master.item_type,'K','S','N') KIT,
        decode(to_char(msi_master.lot_control_code),
                '2','S',
                '1','N') LOT_CONTROL,
        decode(to_char(msi_master.serial_number_control_code),
                '1','N','S') SERIAL_CONTROL,
        case when UPPER(mic.segment1) like '%NO APLICA%' THEN 'NA'
                else substr(
        mic.segment1, 1, instr(mic.segment1,' ')-1
                )
                end LINEA,
        case when UPPER(mic.segment2) like '%NO APLICA%' THEN 'NAPL'
                else substr(
        mic.segment2, 1, instr(mic.segment2,' ')-1
                )
                end SUBLINEA,
        null MARCA,
        rt.percentage_rate impuesto,
        msi_master.PRIMARY_UNIT_OF_MEASURE unidad,
        TO_CHAR(sysdate,'DD/MM/RRRR') ALTA,
        TO_CHAR(sysdate,'DD/MM/RRRR') MODIFICADO,
--        (
--        select decode(headers.CURRENCY_CODE,'MXN','MN','USD','US',headers.CURRENCY_CODE) MONEDA          
--           from qp_list_lines_v lines,
--                qp_secu_list_headers_v headers
--           where headers.LIST_HEADER_ID = lines.LIST_HEADER_ID
--           AND lines.product_id =  msi_master.inventory_item_id 
--           group by headers.CURRENCY_CODE
--        ) MONEDA,         
        NULL NOTAS,
-- lotes
        msi_master.segment1 PRODUCTO_LOTE,
        msi_master.inventory_item_id,
        mic.category_set_id,
        msi_master.planning_make_buy_code
  from MTL_SYSTEM_ITEMS_b            msi,
          --org_organization_definitions   o,
          MTL_UNITS_OF_MEASURE           uom,
          mtl_parameters  org,
          MTL_SYSTEM_ITEMS_b           msi_master,
          --mtl_secondary_inventories d,
         --mtl_onhand_quantities_detail a,
          MTL_ITEM_CATEGORIES_V mic,
          zx_rates_b rt,
          zx_rates_tl rtt
  where msi_master.PRIMARY_UOM_CODE            =  uom.uom_code (+)
          and msi.organization_id = org.organization_id
          and msi_master.organization_id = org.master_organization_id
          and msi.inventory_item_id = msi_master.inventory_item_id
          --and org.organization_code = 'MST'    
     --
          and msi_master.inventory_item_id = mic.inventory_item_id
          and msi_master.organization_id = mic.organization_id
          and mic.CATEGORY_SET_NAME = 'GANON Inventarios'
          --
          AND msi.tax_code = rt.tax_rate_code
          AND rtt.tax_rate_id = rt.tax_rate_id
          AND rtt.LANGUAGE = 'ESA'
          and msi_master.INVENTORY_ITEM_FLAG = 'Y'
          --     
          and (
          exists (
            select 1
            from mtl_onhand_quantities_detail oh
            where oh.INVENTORY_ITEM_ID =  msi_master.inventory_item_id
                  )
                  or exists (
            select 1
            from mtl_material_transactions_temp temp
            where temp.INVENTORY_ITEM_ID = msi_master.inventory_item_id
                  )
                  or exists (
            select 1
            from mtl_reservations mr
            where mr.INVENTORY_ITEM_ID = msi_master.inventory_item_id
                  )
          )
  group by msi_master.lot_control_code,
          msi_master.serial_number_control_code,
          msi_master.segment1,
          msi_master.attribute3,
          msi_master.description,
          msi_master.inventory_item_id,
          msi_master.INVENTORY_ITEM_FLAG,
          msi_master.item_type,
          mic.segment1,
          mic.segment2,
          rt.percentage_rate,
          msi_master.PRIMARY_UNIT_OF_MEASURE,
          mic.category_set_id,
          msi_master.planning_make_buy_code,
          msi_master.organization_id
        union all
          select  msi_master.segment1 producto,
                  msi_master.attribute3 codigo,
                  null localizador,
          --msi_master.description description1,
                  nvl((select ltrim(rtrim(iteml.long_description,chr(10)),chr(10))  long_description
                    from mtl_system_items_tl iteml
                    where 1=1
                            AND msi_master.inventory_item_id = iteml.inventory_item_id(+)
                            AND msi_master.organization_id = iteml.organization_id(+)
                            AND iteml.LANGUAGE(+) = 'ESA'),msi_master.description) description1,
                  null description2,
                  null description3,
                  null proveedor1,
                  null proveedor2,
                  decode(msi_master.INVENTORY_ITEM_FLAG,'Y','S',nvl(msi_master.INVENTORY_ITEM_FLAG,'N')) INVENTORY_ITEM_FLAG,
                  decode(msi_master.item_type,'K','S','N') KIT,
                  decode(to_char(msi_master.lot_control_code),
                          '2','S',
                          '1','N') LOT_CONTROL,
                  decode(to_char(msi_master.serial_number_control_code),
                          '1','N','S') SERIAL_CONTROL,
                  case when UPPER(mic.segment1) like '%NO APLICA%' THEN 'NA'
                          else substr(
                  mic.segment1, 1, instr(mic.segment1,' ')-1
                          )
                          end LINEA,
                  case when UPPER(mic.segment2) like '%NO APLICA%' THEN 'NAPL'
                          else substr(
                  mic.segment2, 1, instr(mic.segment2,' ')-1
                          )
                          end SUBLINEA,
                  null MARCA,
                  rt.percentage_rate impuesto,
                  msi_master.PRIMARY_UNIT_OF_MEASURE unidad,
                  TO_CHAR(sysdate,'DD/MM/RRRR') ALTA,
                  TO_CHAR(sysdate,'DD/MM/RRRR') MODIFICADO,
          --        (
--        select decode(headers.CURRENCY_CODE,'MXN','MN','USD','US',headers.CURRENCY_CODE) MONEDA          
--           from qp_list_lines_v lines,
--                qp_secu_list_headers_v headers
--           where headers.LIST_HEADER_ID = lines.LIST_HEADER_ID
--           AND lines.product_id =  msi_master.inventory_item_id 
--           group by headers.CURRENCY_CODE
--        ) MONEDA,         
                  NULL NOTAS,
          -- lotes
                  msi_master.segment1 PRODUCTO_LOTE,
                  msi_master.inventory_item_id,
                  mic.category_set_id,
                  msi_master.planning_make_buy_code
  from MTL_SYSTEM_ITEMS_b            msi,
          --org_organization_definitions   o,
          MTL_UNITS_OF_MEASURE           uom,
          mtl_parameters  org,
          MTL_SYSTEM_ITEMS_b           msi_master,
          --mtl_secondary_inventories d,
         --mtl_onhand_quantities_detail a,
          MTL_ITEM_CATEGORIES_V mic,
          zx_rates_b rt,
          zx_rates_tl rtt
  where msi_master.PRIMARY_UOM_CODE            =  uom.uom_code (+)
          and msi.organization_id = org.organization_id
          and msi_master.organization_id = org.master_organization_id
          and msi.inventory_item_id = msi_master.inventory_item_id
          --and org.organization_code = 'MST'    
     --
          and msi_master.inventory_item_id = mic.inventory_item_id
          and msi_master.organization_id = mic.organization_id
          and mic.CATEGORY_SET_NAME = 'GANON Inventarios'
          --
          AND msi.tax_code = rt.tax_rate_code(+)
          AND rtt.tax_rate_id(+) = rt.tax_rate_id
          AND rtt.LANGUAGE(+) = 'ESA'
          and decode(msi_master.INVENTORY_ITEM_FLAG,'Y','S',nvl(msi_master.INVENTORY_ITEM_FLAG,'N')) = 'N'
          and msi_master.item_type = 'NS'
  group by msi_master.lot_control_code,
          msi_master.serial_number_control_code,
          msi_master.segment1,
          msi_master.attribute3,
          msi_master.description,
          msi_master.inventory_item_id,
          msi_master.INVENTORY_ITEM_FLAG,
          msi_master.item_type,
          mic.segment1,
          mic.segment2,
          rt.percentage_rate,
          msi_master.PRIMARY_UNIT_OF_MEASURE,
          mic.category_set_id,
          msi_master.planning_make_buy_code,
          msi_master.organization_id;

reg_exis c_existencias%rowtype;

cursor c_subinventory (p_num varchar2) is

select *
  from
          (
                    select d.ORGANIZATION_ID, decode(LOCATOR_TYPE,1,'N','Y') locator_control,
                            d.secondary_inventory_name,
                            (select mp.organization_code
                              from mtl_parameters mp
                              where mp.organization_id = d.ORGANIZATION_ID)||'-'||d.secondary_inventory_name codigo
            from mtl_secondary_inventories d
            where d.attribute1 = p_num
                  ) datos;

reg_sub c_subinventory%rowtype;

cursor c_currency (p_item_id number) is

select decode(headers.CURRENCY_CODE,'MXN','MN','USD','US',headers.CURRENCY_CODE) currency
  from qp_list_lines_v lines,
          qp_secu_list_headers_v headers
  where headers.LIST_HEADER_ID = lines.LIST_HEADER_ID
          AND lines.product_id = p_item_id
  group by  headers.CURRENCY_CODE;

cursor c_precios (p_item_id number, p_name varchar2) is

select distinct HEADERS.NAME, lines.operand, headers.list_header_id
  from qp_list_lines_v lines,
          qp_secu_list_headers_v headers
  where headers.LIST_HEADER_ID = lines.LIST_HEADER_ID
          AND lines.product_id = p_item_id
          and headers.name = p_name
          and rownum <=10;

reg_precios c_precios%rowtype;

cursor c_on_hand (p_item_id number, p_org_id number, p_sub varchar2) is
select to_char(max(
a.DATE_RECEIVED
        ),'DD/MM/RRRR') alta, to_char(max (
a.LAST_UPDATE_DATE
        ),'DD/MM/RRRR') modificado
  from mtl_onhand_quantities_detail a
  where a.inventory_item_id = p_item_id
          and a.organization_id = p_org_id
          and a.subinventory_code = p_sub;

v_oh_file                   SYS.UTL_FILE.file_type;
v_lot_file                  SYS.UTL_FILE.file_type;
v_cus_file                  SYS.UTL_FILE.file_type;
v_loc_file                  SYS.UTL_FILE.file_type;
v_carga_file                SYS.UTL_FILE.file_type;

v_file_exists               SYS.UTL_FILE.file_type;

v_path                        varchar2(1000):='OUTCRS_TOP';--'BOL_TOP';
v_file                        varchar2(1000):='PRODUCTO_'; --ARTICULOS/EXISTENCIAS/PRECIOS/IMPUESTO
v_lote_file                   varchar2(1000):='LOTE_'; --LOTES
v_customer_file               varchar2(1000):='CLIENTE_'; --LOTES
v_file_cargar                 varchar2(1000):='CARGAR.txt'; --LOTES  
v_localizador_file            varchar2(1000):='LOCALIZADOR_';

v_lot_control               boolean;
v_serial_control            boolean;
V_cont                      number:=0;

v_linea1                     varchar2(5000);
v_linea2                     varchar2(5000);
v_linea3                     varchar2(5000);
v_linea4                     varchar2(5000);
v_linea5                     varchar2(5000);
v_linea6                     varchar2(5000);
v_linea7                     varchar2(5000);
v_linea8                     varchar2(5000);
v_linea_lote                varchar2(5000);

v_linea1_cus                varchar2(5000);
v_linea2_cus                varchar2(5000);
v_linea3_cus                varchar2(5000);
v_linea4_cus                varchar2(5000);
v_linea5_cus                varchar2(5000);

v_linea_oh                  varchar2(5000);
--v_linea_lote                varchar2(5000);

V_encabezado                varchar2(5000);

v_cuenta_precios            number:=0;

v_exis                      number:=0;
v_exis_lote                 number:=0;
v_exis_locator              number:=0;
v_exis_sub                  number:=0;
v_ini                       number:=0;

reg_tabla                   XXBOL_MTL_SYSTEM_ITEMS_TYPE;
reg_tabla_lote              XXBOL_LOT_QUANTITIES_TYPE;
reg_tabla_clientes          XXBOL_CLIENTES_TYPE;


v_cont_ph                   number:=0;
v_cont_co                   number:=0;
v_cont_sub                  number:=0;

reg_web             c_party_sites%rowtype;
reg_mail            c_party_sites%rowtype;
reg_phone           c_party_sites%rowtype;

v_accion_exis               varchar2(1):='I';

v_cont_lotes                number:=0;
v_cont_exis                 number:=0;
v_cont_clientes             number:=0;

-- para validar que el archivo de carga existe para no borrar en caso de no existir cambios en las existencias o clientes
v_fexists                   boolean;
v_file_length               number;
v_block_size                BINARY_INTEGER;

BEGIN

  v_file := v_file || to_char(sysdate,'RRRRMMDD_HH24MISS')||'.txt';
  v_lote_file := v_lote_file || to_char(sysdate,'RRRRMMDD_HH24MISS')||'.txt';
  v_customer_file := v_customer_file || to_char(sysdate,'RRRRMMDD_HH24MISS')||'.txt';
  v_localizador_file := v_localizador_file || to_char(sysdate,'RRRRMMDD_HH24MISS')||'.txt';

  --v_path:= 'ODPDIR'; 
  v_cus_file := UTL_FILE.FOPEN(v_path,v_customer_file,'w');
  v_lot_file := UTL_FILE.FOPEN(v_path,v_lote_file,'w');
  v_oh_file := UTL_FILE.FOPEN(v_path,v_file,'w');
  v_loc_file := UTL_FILE.FOPEN(v_path,v_localizador_file,'w');
  v_carga_file := UTL_FILE.FOPEN(v_path,v_file_cargar,'w');

  --apps.inv_quantity_tree_grp.clear_quantity_cache;

--lote
  UTL_FILE.PUT_LINE(v_lot_file,'ARCHIVO|PRODUCTO|LOTE|EXISTENCIA|INICIAL|MOVIMIENTO|FECHA|SUCURSAL|PARTIDA');
  UTL_FILE.PUT_LINE(v_loc_file,'ARCHIVO|PRODUCTO|SUCURSAL|SUBINVENTARIO|LOCALIZADOR|EXISTENCIA');

  V_encabezado := 'ARCHIVO|PRODUCTO|CODIGO|LOC|DESC1|DESC2|DESC3|PROVEEDOR|PROVEEDOR2|INVENTARIO|KIT|LOTE|SERIE|LINEA|SUBLINEA|MARCA|IMPUESTO|SUBSTITUTO|UNIDAD|ALTA|MODIFICADO|MONEDA|NOTAS|LISTA A1|PRECIO2|LISTA 3|LISTA 4|PRECIO5|LISTA 6|PRECIO7|PRECIO8|PRECIOG|PRECIOP|COSTO_PROM|COSTO_REPO|COSTO_ULTI|DESCUENTO1|DESCUENTO2|DESCUENTO3|EXIS|';

  for i in 0 .. 54 loop
  reg_sub:=null;
  open c_subinventory(to_char(i));
  fetch c_subinventory into reg_sub;
  close c_subinventory;
  v_encabezado := v_encabezado||reg_sub.codigo||'|';
  end loop;

  --existencias
  UTL_FILE.PUT_LINE(v_oh_file,v_encabezado);
  --clientes
  UTL_FILE.PUT_LINE(v_cus_file,'ARCHIVO|CLIENTE|RFC|CURP|NOMBRE|NOMBRE2|CALLE|COLONIA|ESTADO|CIUDAD|CP|TELEFONO|TELEFONO2|CONTACTO|CONTACTO2|VENDEDOR|CLASIFICA|TIPO|TIPOCTE|GIRO|CLEDO|DIAS|LIMITE|ALTA|DESCUENTO|BLOQUEADO|BLOQUEONOT|EMAIL|HOMEPAGE|CLIENTE_ORACLE');

  reg_exis:=null;
  -- para existencias 
  open c_existencias;
  loop
  fetch c_existencias into reg_exis;
  exit when c_existencias%notfound;
  --for reg_exis in c_existencias loop
--        dbms_output.put_line('*******************************************');
--        dbms_output.put_line(reg_exis.producto);
--        dbms_output.put_line('*******************************************');

  apps.inv_quantity_tree_grp.clear_quantity_cache;

  --reg_tabla:=null;    

  v_cuenta_precios := 0;
  v_linea1 := null;
  v_linea2 := null;
  v_linea3 := null;
  v_linea4 := null;
  v_linea5 := null;
  v_linea6 := null;
  v_linea7 := null;
  v_linea8 := null;
  v_exis_sub := 0;
  v_exis:=0;
  v_accion_exis:='I';
  v_cont := 0;

  reg_tabla:=null;
  reg_tabla_lote:=null;

  --dbms_output.put_line('Controlado por lote: '||reg_exis.lot_control);

  if reg_exis.lot_control = 'S' then

  v_lot_control:=true;

    else

    v_lot_control:=false;

  end if;

  if reg_exis.serial_control = 'S' then

  v_serial_control:=true;

    else

    v_serial_control:=false;

  end if;

  reg_tabla.inventory_item_id       :=reg_exis.inventory_item_id;
  reg_tabla.PRODUCTO                :=reg_exis.PRODUCTO;
  reg_tabla.CODIGO                  :=reg_exis.CODIGO;
  reg_tabla.LOCALIZADOR             :=reg_exis.LOCALIZADOR;
  reg_tabla.DESCRIPTION1            :=reg_exis.DESCRIPTION1;
  reg_tabla.DESCRIPTION2            :=reg_exis.DESCRIPTION2;
  reg_tabla.DESCRIPTION3            :=reg_exis.DESCRIPTION3;
  reg_tabla.PROVEEDOR1              :=reg_exis.PROVEEDOR1;
  reg_tabla.PROVEEDOR2              :=reg_exis.PROVEEDOR2;
  reg_tabla.INVENTORY_ITEM_FLAG     :=reg_exis.INVENTORY_ITEM_FLAG;
  reg_tabla.KIT                     :=reg_exis.KIT;
  reg_tabla.LOT_CONTROL             :=reg_exis.LOT_CONTROL;
  reg_tabla.SERIAL_CONTROL          :=reg_exis.SERIAL_CONTROL;
  reg_tabla.LINEA                   :=reg_exis.LINEA;
  reg_tabla.SUBLINEA                :=reg_exis.SUBLINEA;
  --reg_tabla.MARCA                   :=reg_exis.MARCA;
  reg_tabla.IMPUESTO                :=reg_exis.IMPUESTO;
  --reg_tabla.SUBSTITUTO              :=reg_exis.SUBSTITUTO;
  reg_tabla.UNIDAD                  :=reg_exis.UNIDAD;
  reg_tabla.ALTA                    :=reg_exis.ALTA;
  reg_tabla.MODIFICADO              :=reg_exis.MODIFICADO;


  /*
          Si el articulo no esta dentro de una lista de precios, no se envia a crescendo
          */
  reg_tabla.MONEDA:=null;

  open c_currency (reg_exis.inventory_item_id);
  fetch c_currency into reg_tabla.MONEDA;
  IF c_currency%notfound then
  close c_currency;
  dbms_output.put_line('El articulo '||reg_exis.producto||' no se encuentra en alguna lista de precios, no se envia a CRESCENDO');
  continue;
  end if;
  close c_currency;

  --reg_tabla.MONEDA                  :=reg_exis.MONEDA;
  reg_tabla.NOTAS                   :=reg_exis.NOTAS;


  v_linea1 :=v_file||'|'||reg_exis.PRODUCTO||'|'||
          nvl(reg_exis.CODIGO,'*')||'|';

  v_linea3:=
          reg_exis.DESCRIPTION1||'|'||
                  NVL(reg_exis.DESCRIPTION2,'*')||'|'||
                  NVL(reg_exis.DESCRIPTION3,'*')||'|'||
                  NVL(reg_exis.PROVEEDOR1,'*')||'|'||
                  NVL(reg_exis.PROVEEDOR2,'*')||'|'||
                  reg_exis.INVENTORY_ITEM_FLAG||'|'||
                  reg_exis.KIT||'|'||
                  reg_exis.LOT_CONTROL||'|'||
                  reg_exis.SERIAL_CONTROL||'|'||
                  NVL(reg_exis.LINEA,'*')||'|'||
                  NVL(reg_exis.SUBLINEA,'*')||'|*|'||
                  reg_exis.IMPUESTO||'|*|'||
                  reg_exis.UNIDAD||'|'||
                  reg_exis.ALTA||'|'||
                  reg_exis.MODIFICADO||'|'||
                  NVL(reg_tabla.MONEDA,'*')||'|'||
                  NVL(reg_exis.NOTAS,'*')||'|';

  FOR i in 1 .. 10 loop

  reg_precios:=null;

  if i = 1 then
  OPEN c_precios (reg_exis.inventory_item_id,'LISTA 1');
  FETCH c_precios into reg_precios;
  CLOSE c_precios;

  reg_tabla.PRECIO1 :=trim(to_char(round(nvl(reg_precios.operand,0),4),'999999999999.9999'));

    elsif i = 3 then
    OPEN c_precios (reg_exis.inventory_item_id,'LISTA 3');
    FETCH c_precios into reg_precios;
    CLOSE c_precios;

    reg_tabla.PRECIO3 :=trim(to_char(round(nvl(reg_precios.operand,0),4),'999999999999.9999'));

    elsif i = 4 then
    OPEN c_precios (reg_exis.inventory_item_id,'LISTA 4');
    FETCH c_precios into reg_precios;
    CLOSE c_precios;

    reg_tabla.PRECIO4 :=trim(to_char(round(nvl(reg_precios.operand,0),4),'999999999999.9999'));

    ELSif i = 6 then
    OPEN c_precios (reg_exis.inventory_item_id,'LISTA 6');
    FETCH c_precios into reg_precios;
    CLOSE c_precios;

    reg_tabla.PRECIO6 :=trim(to_char(round(nvl(reg_precios.operand,0),4),'999999999999.9999'));

  end if;

  v_linea6:= v_linea6 || trim(to_char(round(nvl(reg_precios.operand,0),4),'999999999999.9999'))||'|';

  END LOOP;

  v_cont_sub:=0;


  for i in 0 .. 54 loop

  v_cont_sub := v_cont_sub + 1;

  v_exis := 0;

  /*
            
            23-nov-2011 - se cambio para que se pueda mapear mas de un subinventario por sucursal de CRESCENDO y para que se consolide en un solo registro
            
            reg_sub:=null;
            open c_subinventory (to_char(i));
            fetch c_subinventory into reg_sub;
            if c_subinventory%notfound then
                null;
            else
            */
  for reg_sub in c_subinventory (to_char(i)) loop

  if reg_tabla.COSTO_PROM is null and reg_exis.INVENTORY_ITEM_FLAG = 'S' then
  reg_tabla.COSTO_PROM := trim(to_char(round(NVL(cst_cost_api.get_item_cost(1,reg_exis.inventory_item_id,reg_sub.ORGANIZATION_ID,NULL,NULL),0),4),'999999999999.9999'));
  reg_tabla.COSTO_UL :=  trim(to_char(round(NVL(cstplpop.po_price(reg_sub.ORGANIZATION_ID, reg_exis.inventory_item_id),0),4),'999999999999.9999'));
  end if;
  --dbms_output.put_line('Controlado por localizador: '||reg_sub.locator_control);

  if reg_sub.locator_control = 'Y' then

  for reg_locator in c_locator  (reg_sub.organization_id, reg_sub.secondary_inventory_name) loop

  if reg_exis.lot_control = 'S' then

  reg_lotes:=null;
  -- para archivo de lotes 
  open c_lotes (reg_exis.inventory_item_id, reg_sub.organization_id);
  loop
  fetch c_lotes into reg_lotes;
  exit when c_lotes%notfound;
  -- para archivo de lotes        
                            --for reg_lotes in c_lotes (reg_exis.inventory_item_id, reg_sub.organization_id) loop                                                                     
  reg_tabla_lote:=null;
  v_cont := v_cont + 1;

  INV_Quantity_Tree_PUB.Query_Quantities (
  p_api_version_number    => 1.0
  , p_init_msg_lst        => apps.fnd_api.g_false
  , x_return_status       => L_api_return_status
  , x_msg_count           => l_msg_count
  , x_msg_data            => l_msg_data
  , p_organization_id     => reg_sub.organization_id
  , p_inventory_item_id   => reg_exis.inventory_item_id
  , p_tree_mode           => apps.INV_Quantity_Tree_PUB.g_transaction_mode
  , p_onhand_source       => 3
  , p_is_revision_control => FALSE
  , p_is_lot_control      => TRUE
  , p_is_serial_control   => v_serial_control
  , p_revision            => NULL
  , p_lot_number          => reg_lotes.lot_number
  , p_subinventory_code   => reg_sub.secondary_inventory_name
  , p_locator_id          => reg_locator.inventory_location_id
  , x_qoh                 => l_qty_oh --quantity on hand
  , x_rqoh                => l_qty_res_oh --reservable quantity on hand
  , x_qr                  => l_qty_res    -- quantity reserved
  , x_qs                  => l_qty_sug    --quantity suggested
  , x_att                 => l_qty_att   -- available to transact 
  , x_atr                 => l_qty_atr    --available to reserve   
          );

  if l_qty_oh is not null and l_qty_oh > 0 then

  v_linea2:=reg_locator.locator||'|'; --- cuando crescendo modifique la estructura de sus sistema para manejar localizadores esto debe cambiar

  reg_tabla_lote.PRODUCTO    := reg_exis.PRODUCTO;
  reg_tabla_lote.ITEM_ID     := reg_exis.inventory_item_id;
  reg_tabla_lote.LOTE        := reg_lotes.lot_number;
  reg_tabla_lote.MOVIMIENTO  := 'TTraslado';
  reg_tabla_lote.FECHA       := to_char(sysdate,'DD/MM/RRRR');
  reg_tabla_lote.PARTIDA     := V_CONT;
  reg_tabla_lote.LOCATOR_ID  := reg_locator.inventory_location_id;
  reg_tabla_lote.LOCALIZADOR := reg_locator.locator;
  reg_tabla_lote.secondary_inventory_name :=reg_sub.secondary_inventory_name;
  --reg_tabla_lote.SUCURSAL
                                        --reg_tabla_lote.SERIAL_NUMBER
  reg_tabla_lote.EXIS        := l_qty_oh;

  v_cont_lotes := v_cont_lotes + 1;

  UTL_FILE.PUT_LINE(v_lot_file,v_lote_file||'|'||reg_exis.PRODUCTO_LOTE||'|'||
          reg_lotes.lot_number||'|'||
          to_char(l_qty_oh)||'|'||
          to_char(l_qty_oh)||'|'||
          'TTraslado'||'|'||
          reg_tabla_lote.FECHA||'|'||
          i||'|'||
          v_cont
          );

  UTL_FILE.PUT_LINE(v_carga_file,v_lote_file||'|'||reg_exis.PRODUCTO_LOTE||'|'||
          reg_lotes.lot_number||'|'||
          to_char(l_qty_oh)||'|'||
          to_char(l_qty_oh)||'|'||
          'TTraslado'||'|'||
          reg_tabla_lote.FECHA||'|'||
          i||'|'||
          v_cont||chr(10)||chr(13)
          );

  UTL_FILE.PUT_LINE(v_loc_file,v_localizador_file||'|'||reg_exis.PRODUCTO_LOTE||'|'||
          i||'|'||
          reg_sub.secondary_inventory_name||'|'||
          reg_locator.locator||'|'||
          to_char(l_qty_oh)||chr(10)||chr(13)
          );

  UTL_FILE.PUT_LINE(v_carga_file,v_localizador_file||'|'||reg_exis.PRODUCTO_LOTE||'|'||
          i||'|'||
          reg_sub.secondary_inventory_name||'|'||
          reg_locator.locator||'|'||
          to_char(l_qty_oh)||chr(10)||chr(13)
          );

  v_exis := v_exis + l_qty_oh;

  end if;

  end loop;
  close c_lotes;

    else

    INV_Quantity_Tree_PUB.Query_Quantities (
    p_api_version_number    => 1.0
    , p_init_msg_lst        => apps.fnd_api.g_false
    , x_return_status       => L_api_return_status
    , x_msg_count           => l_msg_count
    , x_msg_data            => l_msg_data
    , p_organization_id     => reg_sub.organization_id
    , p_inventory_item_id   => reg_exis.inventory_item_id
    , p_tree_mode           => apps.INV_Quantity_Tree_PUB.g_transaction_mode
    , p_onhand_source       => 3
    , p_is_revision_control => FALSE
    , p_is_lot_control      => FALSE
    , p_is_serial_control   => v_serial_control
    , p_revision            => NULL
    , p_lot_number          => NULL
    , p_subinventory_code   => reg_sub.secondary_inventory_name
    , p_locator_id          => reg_locator.inventory_location_id
    , x_qoh                 => l_qty_oh --quantity on hand
    , x_rqoh                => l_qty_res_oh --reservable quantity on hand
    , x_qr                  => l_qty_res    -- quantity reserved
    , x_qs                  => l_qty_sug    --quantity suggested
    , x_att                 => l_qty_att   -- available to transact 
    , x_atr                 => l_qty_atr    --available to reserve   
            );

    if l_qty_oh is not null and l_qty_oh > 0 then

    v_exis := v_exis + l_qty_oh;
    v_linea2:=reg_locator.locator||'|'; --- cuando crescendo modifique la estructura de sus sistema para manejar localizadores esto debe cambiar


    UTL_FILE.PUT_LINE(v_loc_file,v_localizador_file||'|'||reg_exis.PRODUCTO_LOTE||'|'||
            i||'|'||
            reg_sub.secondary_inventory_name||'|'||
            reg_locator.locator||'|'||
            to_char(l_qty_oh)||chr(10)||chr(13)
            );

    UTL_FILE.PUT_LINE(v_carga_file,v_localizador_file||'|'||reg_exis.PRODUCTO_LOTE||'|'||
            i||'|'||
            reg_sub.secondary_inventory_name||'|'||
            reg_locator.locator||'|'||
            to_char(l_qty_oh)||chr(10)||chr(13)
            );

    end if;

  end if;

  end loop;

    else -- no es controlado por localizadores

    if reg_exis.lot_control = 'S' then

    reg_lotes:=null;
    -- para archivo de lotes 
    open c_lotes (reg_exis.inventory_item_id, reg_sub.organization_id);
    loop
    fetch c_lotes into reg_lotes;
    exit when c_lotes%notfound;

    --for reg_lotes in c_lotes (reg_exis.inventory_item_id, reg_sub.organization_id) loop                                                                     
    reg_tabla_lote:=null;
    v_cont := v_cont + 1;

    INV_Quantity_Tree_PUB.Query_Quantities (
    p_api_version_number    => 1.0
    , p_init_msg_lst        => apps.fnd_api.g_false
    , x_return_status       => L_api_return_status
    , x_msg_count           => l_msg_count
    , x_msg_data            => l_msg_data
    , p_organization_id     => reg_sub.organization_id
    , p_inventory_item_id   => reg_exis.inventory_item_id
    , p_tree_mode           => apps.INV_Quantity_Tree_PUB.g_transaction_mode
    , p_onhand_source       => 3
    , p_is_revision_control => FALSE
    , p_is_lot_control      => TRUE
    , p_is_serial_control   => v_serial_control
    , p_revision            => NULL
    , p_lot_number          => reg_lotes.lot_number
    , p_subinventory_code   => reg_sub.secondary_inventory_name
    , p_locator_id          => NULL
    , x_qoh                 => l_qty_oh --quantity on hand
    , x_rqoh                => l_qty_res_oh --reservable quantity on hand
    , x_qr                  => l_qty_res    -- quantity reserved
    , x_qs                  => l_qty_sug    --quantity suggested
    , x_att                 => l_qty_att   -- available to transact 
    , x_atr                 => l_qty_atr    --available to reserve   
            );


    if l_qty_oh is not null and l_qty_oh > 0 then

    reg_tabla_lote.PRODUCTO    := reg_exis.PRODUCTO;
    reg_tabla_lote.ITEM_ID     := reg_exis.inventory_item_id;
    reg_tabla_lote.LOTE        := reg_lotes.lot_number;
    reg_tabla_lote.MOVIMIENTO  := 'TTraslado';
    reg_tabla_lote.FECHA       := to_char(sysdate,'DD/MM/RRRR');
    reg_tabla_lote.PARTIDA     := V_CONT;
    reg_tabla_lote.LOCATOR_ID  := null;
    reg_tabla_lote.LOCALIZADOR := reg_locator.locator;
    reg_tabla_lote.secondary_inventory_name :=reg_sub.secondary_inventory_name;
    --reg_tabla_lote.SUCURSAL
                                        --reg_tabla_lote.SERIAL_NUMBER
    reg_tabla_lote.EXIS        := l_qty_oh;


    UTL_FILE.PUT_LINE(v_lot_file,v_lote_file||'|'||reg_exis.PRODUCTO_LOTE||'|'||
            reg_lotes.lot_number||'|'||
            to_char(l_qty_oh)||'|'||
            to_char(l_qty_oh)||'|'||
            'TTraslado'||'|'||
            reg_tabla_lote.FECHA||'|'||
            i||'|'||
            v_cont
            );

    UTL_FILE.PUT_LINE(v_carga_file,v_lote_file||'|'||reg_exis.PRODUCTO_LOTE||'|'||
            reg_lotes.lot_number||'|'||
            to_char(l_qty_oh)||'|'||
            to_char(l_qty_oh)||'|'||
            'TTraslado'||'|'||
            reg_tabla_lote.FECHA||'|'||
            i||'|'||
            v_cont||chr(10)||chr(13)
            );

    v_cont_lotes := v_cont_lotes + 1;

    v_exis := v_exis + l_qty_oh;

    end if;

    end loop;
    close c_lotes;

    else

    INV_Quantity_Tree_PUB.Query_Quantities (
    p_api_version_number    => 1.0
    , p_init_msg_lst        => apps.fnd_api.g_false
    , x_return_status       => L_api_return_status
    , x_msg_count           => l_msg_count
    , x_msg_data            => l_msg_data
    , p_organization_id     => reg_sub.organization_id
    , p_inventory_item_id   => reg_exis.inventory_item_id
    , p_tree_mode           => apps.INV_Quantity_Tree_PUB.g_transaction_mode
    , p_onhand_source       => 3
    , p_is_revision_control => false
    , p_is_lot_control      => FALSE
    , p_is_serial_control   => v_serial_control
    , p_revision            => NULL
    , p_lot_number          => NULL
    , p_subinventory_code   => reg_sub.secondary_inventory_name
    , p_locator_id          => NULL
    , x_qoh                 => l_qty_oh --quantity on hand
    , x_rqoh                => l_qty_res_oh --reservable quantity on hand
    , x_qr                  => l_qty_res    -- quantity reserved
    , x_qs                  => l_qty_sug    --quantity suggested
    , x_att                 => l_qty_att   -- available to transact 
    , x_atr                 => l_qty_atr    --available to reserve   
            );

    if l_qty_oh is not null and l_qty_oh > 0 then

    v_exis := v_exis + l_qty_oh;

    end if;

  end if;

  end if;
  end loop;

  if v_cont_sub = 1 then
  reg_tabla.EXIS0 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
  --v_linea5:=trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'))||'|';
    elsif v_cont_sub = 2 then
    reg_tabla.EXIS1 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 3 then
    reg_tabla.EXIS2 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 4 then
    reg_tabla.EXIS3 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 5 then
    reg_tabla.EXIS4 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 6 then
    reg_tabla.EXIS5 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 7 then
    reg_tabla.EXIS6 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 8 then
    reg_tabla.EXIS7 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 9 then
    reg_tabla.EXIS8 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 10 then
    reg_tabla.EXIS9 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 11 then
    reg_tabla.EXIS10 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 12 then
    reg_tabla.EXIS11 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 13 then
    reg_tabla.EXIS12 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 14 then
    reg_tabla.EXIS13 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 15 then
    reg_tabla.EXIS14 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 16 then
    reg_tabla.EXIS15 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 17 then
    reg_tabla.EXIS16 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 18 then
    reg_tabla.EXIS17 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 19 then
    reg_tabla.EXIS18 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 20 then
    reg_tabla.EXIS19 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 21 then
    reg_tabla.EXIS20 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 22 then
    reg_tabla.EXIS21 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 23 then
    reg_tabla.EXIS22 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 24 then
    reg_tabla.EXIS23 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 25 then
    reg_tabla.EXIS24 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 26 then
    reg_tabla.EXIS25 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 27 then
    reg_tabla.EXIS26 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 28 then
    reg_tabla.EXIS27 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 29 then
    reg_tabla.EXIS28 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 30 then
    reg_tabla.EXIS29 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 31 then
    reg_tabla.EXIS30 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 32 then
    reg_tabla.EXIS31 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 33 then
    reg_tabla.EXIS32 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 34 then
    reg_tabla.EXIS33 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 35 then
    reg_tabla.EXIS34 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 36 then
    reg_tabla.EXIS35 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 37 then
    reg_tabla.EXIS36 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 38 then
    reg_tabla.EXIS37 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 39 then
    reg_tabla.EXIS38 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 40 then
    reg_tabla.EXIS39 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 41 then
    reg_tabla.EXIS40 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 42 then
    reg_tabla.EXIS41 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 43 then
    reg_tabla.EXIS42 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 44 then
    reg_tabla.EXIS43 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 45 then
    reg_tabla.EXIS44 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 46 then
    reg_tabla.EXIS45 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 47 then
    reg_tabla.EXIS46 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 48 then
    reg_tabla.EXIS47 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 49 then
    reg_tabla.EXIS48 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 50 then
    reg_tabla.EXIS49 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 51 then
    reg_tabla.EXIS50 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 52 then
    reg_tabla.EXIS51 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 53 then
    reg_tabla.EXIS52 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 54 then
    reg_tabla.EXIS53 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
    elsif v_cont_sub = 55 then
    reg_tabla.EXIS54 := trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'));
  end if;

  v_linea8 := v_linea8  || trim(to_char(round(nvl(v_exis,0),3),'99999999999.999'))||'|';

  v_exis_sub := v_exis_sub + nvl(v_exis,0);

  --                        dbms_output.put_line('Subinventario '||v_cont_sub||' existencia: '|| v_exis );

  end loop;


  v_linea7:= reg_tabla.COSTO_PROM||'|0.0000|'||reg_tabla.COSTO_UL||'|0.0000|0.00|0.00|';

  --dbms_output.put_line('Existencia articulo: '|| v_exis_sub );
      
  --if v_exis_sub > 0 or reg_exis.INVENTORY_ITEM_FLAG = 'N' then    

  reg_tabla.exis := v_exis_sub;

  IF v_linea2 is null then
  v_linea2:='*|'; --- cuando crescendo modifique la estructura de sus sistema para manejar localizadores esto debe cambiar
  end if;
--        dbms_output.put_line('Insertando linea en archivo productos' );

  UTL_FILE.PUT_LINE(v_oh_file,v_linea1||
          v_linea2||
          v_linea3||
          v_linea5||
          v_linea6||
          v_linea7||
          trim(to_char(NVL(v_exis_sub,0),'999999999999.999'))||'|'||
          v_linea8
          );
  UTL_FILE.PUT_LINE(v_carga_file,v_linea1||
          v_linea2||
          v_linea3||
          v_linea5||
          v_linea6||
          v_linea7||
          trim(to_char(NVL(v_exis_sub,0),'999999999999.999'))||'|'||
          v_linea8 ||chr(10)||chr(13)
          );

  v_cont_exis := v_cont_exis + 1;

-- end if;

end loop;
close c_existencias;
--layout clientes

reg_clientes:=null;

open c_clientes;
loop
fetch c_clientes into reg_clientes;
exit when c_clientes%notfound;
--    for reg_clientes in c_clientes loop

reg_tabla_clientes:=null;

reg_tabla_clientes.CLIENTE:= reg_clientes.CLIENTE;
reg_tabla_clientes.CLIENTE_ORACLE:= reg_clientes.CLIENTE_ORACLE;
reg_tabla_clientes.RFC:=reg_clientes.RFC;
reg_tabla_clientes.CURP:=reg_clientes.CURP;
reg_tabla_clientes.NOMBRE:=reg_clientes.NOMBRE;
reg_tabla_clientes.NOMBRE2:=reg_clientes.NOMBRE2;
reg_tabla_clientes.CALLE:=reg_clientes.CALLE;
reg_tabla_clientes.COLONIA:=reg_clientes.COLONIA;
reg_tabla_clientes.ESTADO:=reg_clientes.ESTADO;
reg_tabla_clientes.CIUDAD:=reg_clientes.CIUDAD;
reg_tabla_clientes.CP:=reg_clientes.CP;
reg_tabla_clientes.VENDEDOR:=reg_clientes.VENDEDOR;
reg_tabla_clientes.CLASIFICA:=reg_clientes.CLASIFICA;
reg_tabla_clientes.TIPO:=reg_clientes.TIPO;
--reg_cliente.TIPOCTE:=reg_clientes.COLONIA;
                --reg_cliente.GIRO:=reg_clientes.GIRO;
                --reg_cliente.CLEDO:=reg_clientes.COLONIA;
reg_tabla_clientes.DIAS:=reg_clientes.DIAS;
reg_tabla_clientes.LIMITE:=reg_clientes.LIMITE;
reg_tabla_clientes.ALTA:=reg_clientes.ALTA;
--reg_cliente.DESCUENTO:=reg_clientes.COLONIA;
reg_tabla_clientes.BLOQUEADO:=reg_clientes.BLOQUEADO;
reg_tabla_clientes.BLOQUEONOT:=reg_clientes.BLOQUEONOT;
--reg_cliente.ENTREGA:=reg_clientes.COLONIA;

/*reg_tabla_clientes.SITE_USE_ID:=reg_clientes.SITE_USE_ID;                                
                reg_tabla_clientes.PRICE_LIST_ID:=reg_clientes.PRICE_LIST_ID;
                reg_tabla_clientes.SALESREP_ID:=reg_clientes.PRIMARY_SALESREP_ID;
                */

reg_tabla_clientes.PARTY_ID:=reg_clientes.PARTY_ID;
reg_tabla_clientes.CUST_ACCOUNT_ID:=reg_clientes.CUST_ACCOUNT_ID;

v_linea1_cus := v_customer_file||'|'||
NVL(reg_clientes.CLIENTE,'*')||'|'||
--reg_clientes.CLIENTE||'|'||                                 
reg_clientes.RFC||'|'||
NVL(reg_clientes.CURP,'*')||'|'||
reg_clientes.NOMBRE||'|'||
NVL(reg_clientes.NOMBRE2,'*')||'|'||
reg_clientes.CALLE||'|'||
reg_clientes.COLONIA||'|'||
reg_clientes.ESTADO||'|'||
reg_clientes.CIUDAD||'|'||
reg_clientes.CP||'|';


v_cont_co:=0;

FOR reg_contactos in c_contactos (reg_clientes.cust_account_id)
loop

v_cont_co := v_cont_co + 1;

IF v_cont_co = 1 THEN

reg_tabla_clientes.CONTACTO:=reg_contactos.contacto;

--dbms_output.put_line('reg_contactos.party_id: '||reg_contactos.party_id);

reg_phone:=null;
open c_party_sites ('PHONE', reg_contactos.party_id, 'GEN');
fetch c_party_sites  into reg_phone;
close c_party_sites;

reg_tabla_clientes.TELEFONO:=reg_phone.phone_number;
--dbms_output.put_line('reg_phone.phone_number: '||reg_phone.phone_number);

reg_phone:=null;
open c_party_sites ('PHONE', reg_contactos.party_id, 'MOBILE');
fetch c_party_sites  into reg_phone;
close c_party_sites;

reg_tabla_clientes.TELEFONO2:=reg_phone.phone_number;
--dbms_output.put_line('reg_phone.phone_number: '||reg_phone.phone_number);

reg_web:=null;
open c_party_sites ('WEB', reg_contactos.party_id, '');
fetch c_party_sites into reg_web;
close c_party_sites;

reg_tabla_clientes.HOMEPAGE:=reg_web.url;

--dbms_output.put_line('Abriendo MAIL..');
reg_mail:=null;
open c_party_sites ('EMAIL', reg_contactos.party_id, '');
fetch c_party_sites into reg_mail;
close c_party_sites;

reg_tabla_clientes.EMAIL:=reg_mail.EMAIL_ADDRESS;

ELSIF v_cont_co = 2 THEN
reg_tabla_clientes.CONTACTO2:=reg_contactos.contacto;

IF reg_tabla_clientes.TELEFONO IS NULL THEN
reg_phone:=null;
open c_party_sites ('PHONE', reg_contactos.party_id, 'GEN');
fetch c_party_sites  into reg_phone;
close c_party_sites;

reg_tabla_clientes.TELEFONO:=reg_phone.phone_number;
END IF;

IF reg_tabla_clientes.TELEFONO2 IS NULL THEN

reg_phone:=null;
open c_party_sites ('PHONE', reg_contactos.party_id, 'MOBILE');
fetch c_party_sites  into reg_phone;
close c_party_sites;

reg_tabla_clientes.TELEFONO2:=reg_phone.phone_number;

END IF;

IF reg_tabla_clientes.EMAIL IS NULL THEN
reg_mail:=null;
open c_party_sites ('EMAIL', reg_contactos.party_id, '');
fetch c_party_sites into reg_mail;
close c_party_sites;
reg_tabla_clientes.EMAIL:=reg_mail.EMAIL_ADDRESS;
END IF;

IF reg_tabla_clientes.HOMEPAGE IS NULL THEN
--dbms_output.put_line('Abriendo MAIL..');
reg_web:=null;
open c_party_sites ('WEB', reg_contactos.party_id, '');
fetch c_party_sites into reg_web;
close c_party_sites;
reg_tabla_clientes.HOMEPAGE:=reg_web.url;
END IF;

end if;

end loop;

v_linea2_cus := NVL(reg_tabla_clientes.TELEFONO,'*')||'|'||NVL(reg_tabla_clientes.TELEFONO2,'*')||'|';

v_linea3_cus := NVL(reg_tabla_clientes.CONTACTO,'*')||'|'||NVL(reg_tabla_clientes.CONTACTO2,'*')||'|';

v_linea4_cus :=
NVL(reg_clientes.VENDEDOR,'*')||'|'||
NVL(reg_clientes.CLASIFICA,'*')||'|'||
NVL(reg_clientes.TIPO,'*')||'|'||
NVL(reg_clientes.GIRO,'*')||'|*|*|'||
NVL(reg_clientes.DIAS,'0')||'|'||
NVL(reg_clientes.LIMITE,'0')||'|'||
reg_clientes.ALTA||'|*|'||
NVL(reg_clientes.BLOQUEADO,'*')||'|'||
NVL(reg_clientes.BLOQUEONOT,'*')||'|'||
NVL(reg_mail.EMAIL_ADDRESS,'*')||'|'||
NVL(reg_web.url,'*')||'|'||reg_clientes.CLIENTE_ORACLE||'|';

UTL_FILE.PUT_LINE(v_cus_file,
v_linea1_cus||
v_linea2_cus||
v_linea3_cus||
v_linea4_cus
);
UTL_FILE.PUT_LINE(v_carga_file,
v_linea1_cus||
v_linea2_cus||
v_linea3_cus||
v_linea4_cus||chr(10)||chr(13)
);
v_cont_clientes := v_cont_clientes + 1;

end loop;

close c_clientes;

if v_cont_exis = 0 then
--    dbms_output.put_line('No se genera archivo de existencias');            
UTL_FILE.FCLOSE(v_oh_file);
rollback;
UTL_FILE.FREMOVE(v_path,v_file);
ELSE
UTL_FILE.FCLOSE(v_oh_file);
--    dbms_output.put_line('Archivo de existencias Generado: '||v_file);
end if;

if v_cont_lotes = 0 then
--    dbms_output.put_line('No se genera archivo de lotes');            
UTL_FILE.FCLOSE(v_lot_file);
UTL_FILE.FCLOSE(v_loc_file);
rollback;
UTL_FILE.FREMOVE(v_path,v_lote_file);
UTL_FILE.FREMOVE(v_path,v_localizador_file);
ELSE
UTL_FILE.FCLOSE(v_lot_file);
UTL_FILE.FCLOSE(v_loc_file);
--    dbms_output.put_line('Archivo de lotes Generado: '||v_lote_file);
end if;

if v_cont_clientes = 0 then
--    dbms_output.put_line('No se genera archivo de clientes');            
UTL_FILE.FCLOSE(v_cus_file);
rollback;
UTL_FILE.FREMOVE(v_path,v_customer_file);
ELSE
UTL_FILE.FCLOSE(v_cus_file);
--    dbms_output.put_line('Archivo de clientes Generado: '||v_customer_file);
end if;

if v_cont_exis = 0
and  v_cont_lotes = 0
and v_cont_clientes = 0
then
--    dbms_output.put_line('No se genera archivo de carga para CRESCENDO');            
UTL_FILE.FCLOSE(v_carga_file);
rollback;
utl_file.fgetattr(location    => v_path,
filename => v_file_cargar,
fexists   => v_fexists,
file_length => v_file_length,
block_size  => v_block_size);
if  v_fexists  then
--        dbms_output.put_line('Longitud del archivo: '||v_file_length);
--        dbms_output.put_line('bloque: '||v_block_size);
if nvl(v_file_length,0) = 0 then
UTL_FILE.FREMOVE(v_path,v_file_cargar);
else
DECLARE
  l_conn  UTL_TCP.connection;
  l_list  t_string_table;
  v_borra varchar2(1):='Y';
  v_archivo varchar2(1000);
BEGIN
  l_conn := login(V_IP, '21',  v_usuario_ftp,  v_passw_ftp,60);
--xxftp.ascii(p_conn => l_conn);
  nlst(p_conn   => l_conn,
          p_dir   => v_path_in,
          p_list  => l_list);
--              dbms_output.put_line('count:'||l_list.COUNT);  
  IF l_list.COUNT > 0 THEN
  FOR i IN l_list.first .. l_list.last LOOP
  v_archivo := substr(l_list(i),instr(l_list(i),'/',-1)+1);
  if  v_archivo = 'CARGAR.txt' THEN
  dbms_output.put_line('listando => ' ||  v_archivo);
  dbms_output.put_line('El Archivo CARGAR.txt aun lo procesa CRESCENDO, se reenviara el archivo en la proxima sincronizacion');
  v_borra:='N';
  END IF;
  END LOOP;
  if v_borra = 'Y' then
  --XXBOL_CRESCENDO_PK.ascii(p_conn => l_conn);
  put(p_conn      => l_conn,
          p_from_dir  => v_path,
          p_from_file => 'CARGAR.txt',
          p_to_file   => v_path_in||'CARGAR.txt');
  UTL_FILE.FREMOVE(v_path,v_file_cargar);
  dbms_output.put_line('Archivo '||v_file_cargar||' enviado via FTP');
  end if;
    else
    --XXBOL_CRESCENDO_PK.ascii(p_conn => l_conn);
    put(p_conn      => l_conn,
            p_from_dir  => v_path,
            p_from_file => 'CARGAR.txt',
            p_to_file   => v_path_in||'CARGAR.txt');
    UTL_FILE.FREMOVE(v_path,v_file_cargar);
    dbms_output.put_line('Archivo '||v_file_cargar||' enviado via FTP');
  END IF;
  logout(l_conn);
exception
when others then
  dbms_output.put_line('error => ' || sqlcode || '-' || sqlerrm);
  logout(l_conn);
  :retcode:=2;
END;
end if;

else
dbms_output.put_line('El archivo no existe');
end if;

ELSE
UTL_FILE.FCLOSE(v_carga_file);
dbms_output.put_line('Archivo de carga CRESCENDO Generado: '||v_file_cargar);
DECLARE
  l_conn  UTL_TCP.connection;
  l_list  t_string_table;
  v_borra varchar2(1):='Y';
  v_archivo varchar2(1000);
BEGIN
  l_conn :=login(V_IP, '21',  v_usuario_ftp,  v_passw_ftp,60);
--xxftp.ascii(p_conn => l_conn);
  nlst(p_conn   => l_conn,
          p_dir   => v_path_in,
          p_list  => l_list);
  dbms_output.put_line('count:'||l_list.COUNT);
  IF l_list.COUNT > 0 THEN
  FOR i IN l_list.first .. l_list.last LOOP
  v_archivo := substr(l_list(i),instr(l_list(i),'/',-1)+1);
  if v_archivo = 'CARGAR.txt' THEN
  dbms_output.put_line('listando => ' || v_archivo);
  dbms_output.put_line('El Archivo CARGAR.txt aun lo procesa CRESCENDO, se reenviara el archivo en la proxima sincronizacion');
  v_borra:='N';
  END IF;
  END LOOP;
  if v_borra = 'Y' then
  --XXBOL_CRESCENDO_PK.ascii(p_conn => l_conn);
  put(p_conn      => l_conn,
          p_from_dir  => v_path,
          p_from_file => 'CARGAR.txt',
          p_to_file   => v_path_in||'CARGAR.txt');
  UTL_FILE.FREMOVE(v_path,v_file_cargar);
  dbms_output.put_line('Archivo '||v_file_cargar||' enviado via FTP');
  end if;
    else
    put(p_conn      => l_conn,
            p_from_dir  => v_path,
            p_from_file => 'CARGAR.txt',
            p_to_file   => v_path_in||'CARGAR.txt');
    UTL_FILE.FREMOVE(v_path,v_file_cargar);
    dbms_output.put_line('Archivo '||v_file_cargar||' enviado via FTP');
  END IF;
  logout(l_conn);
exception
when others then
  dbms_output.put_line('error => ' || sqlcode || '-' || sqlerrm);
  logout(l_conn);
  :retcode:=2;
END;
end if;
end SALIDAS;

BEGIN

  :retcode := 0;

  open c_usuario (v_usuario);
  fetch c_usuario into v_role;
  close c_usuario;

  dbms_output.put_line ('Fecha : '||to_char(sysdate,'DD-MON-RRRR HH24:MI:SS'));


  l_conn := login(V_IP, '21', v_usuario_ftp, v_passw_ftp,15);
  --xxftp.ascii(p_conn => l_conn);
  nlst(p_conn   => l_conn,
          p_dir   => v_path_in,
          p_list  => l_list);
  dbms_output.put_line ('count:'||l_list.COUNT);
  IF l_list.COUNT > 0 THEN
  FOR i IN l_list.first .. l_list.last LOOP
  v_body:='Revisar el archivo log';

  v_archivo := substr(l_list(i),instr(l_list(i),'/',-1)+1);

  if upper(v_archivo) like 'CO1%' THEN
  dbms_output.put_line ('listando => ' || v_archivo);
  get_file(p_conn      => l_conn,
          p_from_file => v_path_in||v_archivo,
          p_to_dir    => v_path,
          p_to_file   => v_archivo
          );
  delete_file(p_conn => l_conn,p_file => v_path_in||v_archivo); --borramos el archivo del servidor de CRESCENDO                                                                    
  dbms_output.put_line ('Ejecutando la interfaz de Clientes...');
  cliente(errbuf, errcode, v_archivo);
  if nvl(errcode,0) = 0 then
  --utl_file.frename(v_path,v_archivo,v_path_err,v_archivo,true); -- movemos el archivo a un directorio de respaldo
                --delete_file(p_conn => l_conn,p_file => '/Out/'||v_archivo); --borramos el archivo del servidor de CRESCENDO
  dbms_output.put_line ('La interfaz termino correctamente');
    else
    v_subject := v_subject||' Clientes, Archivo => '|| v_archivo;
    xxbol_notify_errors(v_role,v_subject,v_body);
    dbms_output.put_line ('La interfaz termino en error, revisar el registro');
    utl_file.frename(v_path,v_archivo,v_path_err,'err_'||v_archivo,true); -- movemos el archivo a un directorio de respaldo anteponiendo err_
                --delete_file(p_conn => l_conn,p_file => '/Out/'||v_archivo); --borramos el archivo del servidor de CRESCENDO                
    v_errores := v_errores + 1;
  end if;
    elsif upper(v_archivo) like 'CO2%' THEN
    dbms_output.put_line ('listando => ' || v_archivo);
    get_file(p_conn      => l_conn,
            p_from_file => v_path_in||v_archivo,
            p_to_dir    => v_path,
            p_to_file   => v_archivo);
    delete_file(p_conn => l_conn,p_file => v_path_in||v_archivo); --borramos el archivo del servidor de CRESCENDO 
    dbms_output.put_line ('Ejecutando la interfaz de transacciones de Cuentas por cobrar...');
    XXBOL_AR_TRANSACTIONS_PRC(errbuf,errcode,v_archivo);
    if nvl(errcode,0) = 0 then
    --utl_file.frename(v_path,v_archivo,v_path_err,v_archivo,true); -- movemos el archivo a un directorio de respaldo
                --delete_file(p_conn => l_conn,p_file => '/Out/'||v_archivo); --borramos el archivo del servidor de CRESCENDO
    dbms_output.put_line ('La interfaz termino correctamente');
      else

      v_subject := v_subject||' Transacciones Cuentas por cobrar, Archivo => '|| v_archivo;
      xxbol_notify_errors(v_role,v_subject,v_body);
      utl_file.frename(v_path,v_archivo,v_path_err,'err_'||v_archivo,true); -- movemos el archivo a un directorio de respaldo
                --delete_file(p_conn => l_conn,p_file => '/Out/'||v_archivo); --borramos el archivo del servidor de CRESCENDO
      dbms_output.put_line ('La interfaz termino en error, revisar el registro');
      v_errores := v_errores + 1;
    end if;
    elsif UPPER(v_archivo) like 'CO4_INV_T%' THEN
    dbms_output.put_line ('listando => ' || v_archivo);
    get_file(p_conn      => l_conn,
            p_from_file => v_path_in||v_archivo,
            p_to_dir    => v_path,
            p_to_file   => v_archivo);
    delete_file(p_conn => l_conn,p_file => v_path_in||v_archivo); --borramos el archivo del servidor de CRESCENDO 
    dbms_output.put_line ('Ejecutando la interfaz de Movimientos de Inventario (Transferencias)...');
    ACCOUNT_ALIAS_RECEIPT(errbuf,errcode,v_archivo);
    if nvl(errcode,0) = 0 then
    --utl_file.frename(v_path,v_archivo,v_path_err,v_archivo,true); -- movemos el archivo a un directorio de respaldo
                --delete_file(p_conn => l_conn,p_file => '/Out/'||v_archivo); --borramos el archivo del servidor de CRESCENDO
    dbms_output.put_line ('La interfaz termino correctamente');
      else

      v_subject := v_subject||' Movimientos de Inventario, Archivo => '|| v_archivo;
      xxbol_notify_errors(v_role,v_subject,v_body);
      utl_file.frename(v_path,v_archivo,v_path_err,'err_'||v_archivo,true); -- movemos el archivo a un directorio de respaldo
                --delete_file(p_conn => l_conn,p_file => '/Out/'||v_archivo); --borramos el archivo del servidor de CRESCENDO
      dbms_output.put_line ('La interfaz termino en error, revisar el registro');
      v_errores := v_errores + 1;
    end if;
    elsif UPPER(v_archivo) like 'CO4_INV_Z%' THEN
    dbms_output.put_line ('listando => ' || v_archivo);
    get_file(p_conn      => l_conn,
            p_from_file => v_path_in||v_archivo,
            p_to_dir    => v_path,
            p_to_file   => v_archivo);
    delete_file(p_conn => l_conn,p_file => v_path_in||v_archivo); --borramos el archivo del servidor de CRESCENDO 
    dbms_output.put_line ('Ejecutando la interfaz de Movimientos de Inventario (Salidas)...');
    ACCOUNT_ALIAS_RECEIPT(errbuf,errcode,v_archivo);
    if nvl(errcode,0) = 0 then
    --utl_file.frename(v_path,v_archivo,v_path_err,v_archivo,true); -- movemos el archivo a un directorio de respaldo
                --delete_file(p_conn => l_conn,p_file => '/Out/'||v_archivo); --borramos el archivo del servidor de CRESCENDO
    dbms_output.put_line ('La interfaz termino correctamente');
      else

      v_subject := v_subject||' Movimientos de Inventario, Archivo => '|| v_archivo;
      xxbol_notify_errors(v_role,v_subject,v_body);
      utl_file.frename(v_path,v_archivo,v_path_err,'err_'||v_archivo,true); -- movemos el archivo a un directorio de respaldo
                --delete_file(p_conn => l_conn,p_file => '/Out/'||v_archivo); --borramos el archivo del servidor de CRESCENDO
      dbms_output.put_line ('La interfaz termino en error, revisar el registro');
      v_errores := v_errores + 1;
    end if;

    /**
              Una vez procesadas las salidas de inventario se procede con la genracion de existencias...
              **/
    SALIDAS;
    elsif upper(v_archivo) like 'CO5%' THEN
    dbms_output.put_line ('listando => ' || v_archivo);
    get_file(p_conn      => l_conn,
            p_from_file => v_path_in||v_archivo,
            p_to_dir    => v_path,
            p_to_file   => v_archivo);
    delete_file(p_conn => l_conn,p_file => v_path_in||v_archivo); --borramos el archivo del servidor de CRESCENDO 
    dbms_output.put_line ('Ejecutando la interfaz de Pagos...');
    recibos(errbuf,errcode,v_archivo);
    if nvl(errcode,0) = 0 then
    --utl_file.frename(v_path,v_archivo,v_path_err,v_archivo,true); -- movemos el archivo a un directorio de respaldo                
    dbms_output.put_line ('La interfaz termino correctamente');
      else

      v_subject := v_subject||' Pagos, Archivo => '|| v_archivo;
      xxbol_notify_errors(v_role,v_subject,v_body);
      utl_file.frename(v_path,v_archivo,v_path_err,'err_'||v_archivo,true); -- movemos el archivo a un directorio de respaldo                
      dbms_output.put_line ('La interfaz termino en error, revisar el registro');
      v_errores := v_errores + 1;
    end if;
  END IF;
  END LOOP;
    else
    dbms_output.put_line ('No hay archivos nuevos para procesar');
  END IF;
  logout(l_conn);

  if v_errores > 0 then
  :retcode := 1;
    else
    :retcode := 0;
  end if;

exception
when others then
  dbms_output.put_line ('error => ' || sqlcode || '-' || sqlerrm);
  logout(l_conn);
  :retcode:=2;
END;
/
--spool off;
exit :retcode;
 